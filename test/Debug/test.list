
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ac  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004124  08004124  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004124  08004124  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800412c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000014  08004140  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004140  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5c9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd1  00000000  00000000  0002b60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002900e  00000000  00000000  0002e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfa9  00000000  00000000  000577b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9296  00000000  00000000  0006475f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d9f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b48  00000000  00000000  0015da48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003950 	.word	0x08003950

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08003950 	.word	0x08003950

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fe9b 	bl	8000f3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f81a 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f89c 	bl	8000344 <MX_GPIO_Init>
  MX_I2C1_Init();
 800020c:	f000 f85c 	bl	80002c8 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_Init();
 8000210:	f000 fae4 	bl	80007dc <SSD1306_Init>
	  SSD1306_GotoXY (0,21);
 8000214:	2115      	movs	r1, #21
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fc4a 	bl	8000ab0 <SSD1306_GotoXY>
	  SSD1306_Puts ("HELLO WORLD :)", &Font_7x10, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	4905      	ldr	r1, [pc, #20]	; (8000234 <main+0x38>)
 8000220:	4805      	ldr	r0, [pc, #20]	; (8000238 <main+0x3c>)
 8000222:	f000 fcdb 	bl	8000bdc <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000226:	f000 fb9d 	bl	8000964 <SSD1306_UpdateScreen>

	  HAL_Delay (2000);
 800022a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800022e:	f000 fef9 	bl	8001024 <HAL_Delay>
	  SSD1306_Init();
 8000232:	e7ed      	b.n	8000210 <main+0x14>
 8000234:	20000000 	.word	0x20000000
 8000238:	08003968 	.word	0x08003968

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b096      	sub	sp, #88	; 0x58
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	2244      	movs	r2, #68	; 0x44
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fb78 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	463b      	mov	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800025e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000262:	f001 fedd 	bl	8002020 <HAL_PWREx_ControlVoltageScaling>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800026c:	f000 fab0 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000270:	2310      	movs	r3, #16
 8000272:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800027c:	2360      	movs	r3, #96	; 0x60
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	4618      	mov	r0, r3
 800028a:	f001 ff7d 	bl	8002188 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000294:	f000 fa9c 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	463b      	mov	r3, r7
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fb83 	bl	80029bc <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002bc:	f000 fa88 	bl	80007d0 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3758      	adds	r7, #88	; 0x58
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_I2C1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_I2C1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_I2C1_Init+0x74>)
 80002d4:	2204      	movs	r2, #4
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_I2C1_Init+0x74>)
 80002da:	22f0      	movs	r2, #240	; 0xf0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <MX_I2C1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000302:	480e      	ldr	r0, [pc, #56]	; (800033c <MX_I2C1_Init+0x74>)
 8000304:	f001 f92a 	bl	800155c <HAL_I2C_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030e:	f000 fa5f 	bl	80007d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <MX_I2C1_Init+0x74>)
 8000316:	f001 fdab 	bl	8001e70 <HAL_I2CEx_ConfigAnalogFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 fa56 	bl	80007d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_I2C1_Init+0x74>)
 8000328:	f001 fded 	bl	8001f06 <HAL_I2CEx_ConfigDigitalFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 fa4d 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000030 	.word	0x20000030
 8000340:	40005400 	.word	0x40005400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08e      	sub	sp, #56	; 0x38
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800035a:	4bb2      	ldr	r3, [pc, #712]	; (8000624 <MX_GPIO_Init+0x2e0>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4ab1      	ldr	r2, [pc, #708]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000360:	f043 0310 	orr.w	r3, r3, #16
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4baf      	ldr	r3, [pc, #700]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0310 	and.w	r3, r3, #16
 800036e:	623b      	str	r3, [r7, #32]
 8000370:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000372:	4bac      	ldr	r3, [pc, #688]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4aab      	ldr	r2, [pc, #684]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4ba9      	ldr	r3, [pc, #676]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0304 	and.w	r3, r3, #4
 8000386:	61fb      	str	r3, [r7, #28]
 8000388:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4ba6      	ldr	r3, [pc, #664]	; (8000624 <MX_GPIO_Init+0x2e0>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4aa5      	ldr	r2, [pc, #660]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4ba3      	ldr	r3, [pc, #652]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0320 	and.w	r3, r3, #32
 800039e:	61bb      	str	r3, [r7, #24]
 80003a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003a2:	4ba0      	ldr	r3, [pc, #640]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	4a9f      	ldr	r2, [pc, #636]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ae:	4b9d      	ldr	r3, [pc, #628]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b6:	617b      	str	r3, [r7, #20]
 80003b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b9a      	ldr	r3, [pc, #616]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a99      	ldr	r2, [pc, #612]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b97      	ldr	r3, [pc, #604]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	613b      	str	r3, [r7, #16]
 80003d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b94      	ldr	r3, [pc, #592]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a93      	ldr	r2, [pc, #588]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003d8:	f043 0302 	orr.w	r3, r3, #2
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b91      	ldr	r3, [pc, #580]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0302 	and.w	r3, r3, #2
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ea:	4b8e      	ldr	r3, [pc, #568]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a8d      	ldr	r2, [pc, #564]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b8b      	ldr	r3, [pc, #556]	; (8000624 <MX_GPIO_Init+0x2e0>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0308 	and.w	r3, r3, #8
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000402:	4b88      	ldr	r3, [pc, #544]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a87      	ldr	r2, [pc, #540]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b85      	ldr	r3, [pc, #532]	; (8000624 <MX_GPIO_Init+0x2e0>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800041a:	f001 fea5 	bl	8002168 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800041e:	230c      	movs	r3, #12
 8000420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000422:	2302      	movs	r3, #2
 8000424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2300      	movs	r3, #0
 800042c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800042e:	230d      	movs	r3, #13
 8000430:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000436:	4619      	mov	r1, r3
 8000438:	487b      	ldr	r0, [pc, #492]	; (8000628 <MX_GPIO_Init+0x2e4>)
 800043a:	f000 fefd 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800043e:	2307      	movs	r3, #7
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000442:	2312      	movs	r3, #18
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800044e:	2304      	movs	r3, #4
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	4619      	mov	r1, r3
 8000458:	4874      	ldr	r0, [pc, #464]	; (800062c <MX_GPIO_Init+0x2e8>)
 800045a:	f000 feed 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2300      	movs	r3, #0
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800046e:	230d      	movs	r3, #13
 8000470:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	4619      	mov	r1, r3
 8000478:	486c      	ldr	r0, [pc, #432]	; (800062c <MX_GPIO_Init+0x2e8>)
 800047a:	f000 fedd 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800047e:	233f      	movs	r3, #63	; 0x3f
 8000480:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048e:	4619      	mov	r1, r3
 8000490:	4867      	ldr	r0, [pc, #412]	; (8000630 <MX_GPIO_Init+0x2ec>)
 8000492:	f000 fed1 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000496:	2301      	movs	r3, #1
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049a:	2302      	movs	r3, #2
 800049c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2300      	movs	r3, #0
 80004a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004a6:	2301      	movs	r3, #1
 80004a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fec0 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80004b8:	230a      	movs	r3, #10
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004bc:	230b      	movs	r3, #11
 80004be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c8:	4619      	mov	r1, r3
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ce:	f000 feb3 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004d2:	23f0      	movs	r3, #240	; 0xf0
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004de:	2303      	movs	r3, #3
 80004e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004e2:	2305      	movs	r3, #5
 80004e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f000 fea2 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004f4:	2301      	movs	r3, #1
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f8:	2302      	movs	r3, #2
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2300      	movs	r3, #0
 8000502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000504:	2302      	movs	r3, #2
 8000506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050c:	4619      	mov	r1, r3
 800050e:	4849      	ldr	r0, [pc, #292]	; (8000634 <MX_GPIO_Init+0x2f0>)
 8000510:	f000 fe92 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000514:	2302      	movs	r3, #2
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000518:	230b      	movs	r3, #11
 800051a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000524:	4619      	mov	r1, r3
 8000526:	4843      	ldr	r0, [pc, #268]	; (8000634 <MX_GPIO_Init+0x2f0>)
 8000528:	f000 fe86 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800052c:	2344      	movs	r3, #68	; 0x44
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000530:	2303      	movs	r3, #3
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053c:	4619      	mov	r1, r3
 800053e:	483d      	ldr	r0, [pc, #244]	; (8000634 <MX_GPIO_Init+0x2f0>)
 8000540:	f000 fe7a 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000544:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000556:	2301      	movs	r3, #1
 8000558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	4619      	mov	r1, r3
 8000560:	4831      	ldr	r0, [pc, #196]	; (8000628 <MX_GPIO_Init+0x2e4>)
 8000562:	f000 fe69 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000566:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000578:	2303      	movs	r3, #3
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800057c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000580:	4619      	mov	r1, r3
 8000582:	4829      	ldr	r0, [pc, #164]	; (8000628 <MX_GPIO_Init+0x2e4>)
 8000584:	f000 fe58 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800059a:	2301      	movs	r3, #1
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a2:	4619      	mov	r1, r3
 80005a4:	4823      	ldr	r0, [pc, #140]	; (8000634 <MX_GPIO_Init+0x2f0>)
 80005a6:	f000 fe47 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005aa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b0:	2302      	movs	r3, #2
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80005bc:	230d      	movs	r3, #13
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	4619      	mov	r1, r3
 80005c6:	481b      	ldr	r0, [pc, #108]	; (8000634 <MX_GPIO_Init+0x2f0>)
 80005c8:	f000 fe36 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80005de:	230e      	movs	r3, #14
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e6:	4619      	mov	r1, r3
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <MX_GPIO_Init+0x2f0>)
 80005ea:	f000 fe25 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	2302      	movs	r3, #2
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000600:	2307      	movs	r3, #7
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x2f4>)
 800060c:	f000 fe14 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000610:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	e00c      	b.n	800063c <MX_GPIO_Init+0x2f8>
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	48001000 	.word	0x48001000
 800062c:	48001400 	.word	0x48001400
 8000630:	48000800 	.word	0x48000800
 8000634:	48000400 	.word	0x48000400
 8000638:	48000c00 	.word	0x48000c00
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4619      	mov	r1, r3
 8000648:	485c      	ldr	r0, [pc, #368]	; (80007bc <MX_GPIO_Init+0x478>)
 800064a:	f000 fdf5 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800064e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000660:	2308      	movs	r3, #8
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	4855      	ldr	r0, [pc, #340]	; (80007c0 <MX_GPIO_Init+0x47c>)
 800066c:	f000 fde4 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000680:	230d      	movs	r3, #13
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	4619      	mov	r1, r3
 800068a:	484e      	ldr	r0, [pc, #312]	; (80007c4 <MX_GPIO_Init+0x480>)
 800068c:	f000 fdd4 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	4619      	mov	r1, r3
 80006aa:	4846      	ldr	r0, [pc, #280]	; (80007c4 <MX_GPIO_Init+0x480>)
 80006ac:	f000 fdc4 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006c2:	230c      	movs	r3, #12
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	4619      	mov	r1, r3
 80006cc:	483d      	ldr	r0, [pc, #244]	; (80007c4 <MX_GPIO_Init+0x480>)
 80006ce:	f000 fdb3 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80006d2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006e4:	230a      	movs	r3, #10
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	4619      	mov	r1, r3
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fda1 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f000 fd93 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000722:	2309      	movs	r3, #9
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	4823      	ldr	r0, [pc, #140]	; (80007bc <MX_GPIO_Init+0x478>)
 800072e:	f000 fd83 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000732:	2304      	movs	r3, #4
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000742:	230c      	movs	r3, #12
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	481b      	ldr	r0, [pc, #108]	; (80007bc <MX_GPIO_Init+0x478>)
 800074e:	f000 fd73 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000752:	2378      	movs	r3, #120	; 0x78
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000762:	2307      	movs	r3, #7
 8000764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	4619      	mov	r1, r3
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_GPIO_Init+0x478>)
 800076e:	f000 fd63 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000772:	2338      	movs	r3, #56	; 0x38
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000782:	2306      	movs	r3, #6
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_GPIO_Init+0x484>)
 800078e:	f000 fd53 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007a2:	2302      	movs	r3, #2
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_GPIO_Init+0x488>)
 80007ae:	f000 fd43 	bl	8001238 <HAL_GPIO_Init>

}
 80007b2:	bf00      	nop
 80007b4:	3738      	adds	r7, #56	; 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	48000c00 	.word	0x48000c00
 80007c0:	48001800 	.word	0x48001800
 80007c4:	48000800 	.word	0x48000800
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48001000 	.word	0x48001000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80007e2:	f000 fa21 	bl	8000c28 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80007e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007ea:	2201      	movs	r2, #1
 80007ec:	2178      	movs	r1, #120	; 0x78
 80007ee:	485b      	ldr	r0, [pc, #364]	; (800095c <SSD1306_Init+0x180>)
 80007f0:	f001 f838 	bl	8001864 <HAL_I2C_IsDeviceReady>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e0a9      	b.n	8000952 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80007fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000802:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000804:	e002      	b.n	800080c <SSD1306_Init+0x30>
		p--;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f9      	bne.n	8000806 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000812:	22ae      	movs	r2, #174	; 0xae
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	; 0x78
 8000818:	f000 fa82 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	; 0x78
 8000822:	f000 fa7d 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000826:	2210      	movs	r2, #16
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	; 0x78
 800082c:	f000 fa78 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000830:	22b0      	movs	r2, #176	; 0xb0
 8000832:	2100      	movs	r1, #0
 8000834:	2078      	movs	r0, #120	; 0x78
 8000836:	f000 fa73 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800083a:	22c8      	movs	r2, #200	; 0xc8
 800083c:	2100      	movs	r1, #0
 800083e:	2078      	movs	r0, #120	; 0x78
 8000840:	f000 fa6e 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2078      	movs	r0, #120	; 0x78
 800084a:	f000 fa69 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800084e:	2210      	movs	r2, #16
 8000850:	2100      	movs	r1, #0
 8000852:	2078      	movs	r0, #120	; 0x78
 8000854:	f000 fa64 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000858:	2240      	movs	r2, #64	; 0x40
 800085a:	2100      	movs	r1, #0
 800085c:	2078      	movs	r0, #120	; 0x78
 800085e:	f000 fa5f 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000862:	2281      	movs	r2, #129	; 0x81
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	; 0x78
 8000868:	f000 fa5a 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	; 0x78
 8000872:	f000 fa55 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000876:	22a1      	movs	r2, #161	; 0xa1
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	; 0x78
 800087c:	f000 fa50 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000880:	22a6      	movs	r2, #166	; 0xa6
 8000882:	2100      	movs	r1, #0
 8000884:	2078      	movs	r0, #120	; 0x78
 8000886:	f000 fa4b 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1:32)
 800088a:	22a8      	movs	r2, #168	; 0xa8
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	; 0x78
 8000890:	f000 fa46 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 8000894:	221f      	movs	r2, #31
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	; 0x78
 800089a:	f000 fa41 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800089e:	22a4      	movs	r2, #164	; 0xa4
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	; 0x78
 80008a4:	f000 fa3c 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008a8:	22d3      	movs	r2, #211	; 0xd3
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	; 0x78
 80008ae:	f000 fa37 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-no offset
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	; 0x78
 80008b8:	f000 fa32 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008bc:	22d5      	movs	r2, #213	; 0xd5
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	; 0x78
 80008c2:	f000 fa2d 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008c6:	22f0      	movs	r2, #240	; 0xf0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	; 0x78
 80008cc:	f000 fa28 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008d0:	22d9      	movs	r2, #217	; 0xd9
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	; 0x78
 80008d6:	f000 fa23 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80008da:	2222      	movs	r2, #34	; 0x22
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	; 0x78
 80008e0:	f000 fa1e 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80008e4:	22da      	movs	r2, #218	; 0xda
 80008e6:	2100      	movs	r1, #0
 80008e8:	2078      	movs	r0, #120	; 0x78
 80008ea:	f000 fa19 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80008ee:	2212      	movs	r2, #18
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	; 0x78
 80008f4:	f000 fa14 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008f8:	22db      	movs	r2, #219	; 0xdb
 80008fa:	2100      	movs	r1, #0
 80008fc:	2078      	movs	r0, #120	; 0x78
 80008fe:	f000 fa0f 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	2078      	movs	r0, #120	; 0x78
 8000908:	f000 fa0a 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800090c:	228d      	movs	r2, #141	; 0x8d
 800090e:	2100      	movs	r1, #0
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f000 fa05 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000916:	2214      	movs	r2, #20
 8000918:	2100      	movs	r1, #0
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f000 fa00 	bl	8000d20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000920:	22af      	movs	r2, #175	; 0xaf
 8000922:	2100      	movs	r1, #0
 8000924:	2078      	movs	r0, #120	; 0x78
 8000926:	f000 f9fb 	bl	8000d20 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800092a:	222e      	movs	r2, #46	; 0x2e
 800092c:	2100      	movs	r1, #0
 800092e:	2078      	movs	r0, #120	; 0x78
 8000930:	f000 f9f6 	bl	8000d20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f843 	bl	80009c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800093a:	f000 f813 	bl	8000964 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <SSD1306_Init+0x184>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SSD1306_Init+0x184>)
 8000946:	2200      	movs	r2, #0
 8000948:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SSD1306_Init+0x184>)
 800094c:	2201      	movs	r2, #1
 800094e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000030 	.word	0x20000030
 8000960:	20000284 	.word	0x20000284

08000964 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e01d      	b.n	80009ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3b50      	subs	r3, #80	; 0x50
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	; 0x78
 800097c:	f000 f9d0 	bl	8000d20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2078      	movs	r0, #120	; 0x78
 8000986:	f000 f9cb 	bl	8000d20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800098a:	2210      	movs	r2, #16
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	; 0x78
 8000990:	f000 f9c6 	bl	8000d20 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	01db      	lsls	r3, r3, #7
 8000998:	4a08      	ldr	r2, [pc, #32]	; (80009bc <SSD1306_UpdateScreen+0x58>)
 800099a:	441a      	add	r2, r3
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	2078      	movs	r0, #120	; 0x78
 80009a2:	f000 f957 	bl	8000c54 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	3301      	adds	r3, #1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	d9de      	bls.n	8000970 <SSD1306_UpdateScreen+0xc>
	}
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000084 	.word	0x20000084

080009c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <SSD1306_Fill+0x14>
 80009d0:	2300      	movs	r3, #0
 80009d2:	e000      	b.n	80009d6 <SSD1306_Fill+0x16>
 80009d4:	23ff      	movs	r3, #255	; 0xff
 80009d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009da:	4619      	mov	r1, r3
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <SSD1306_Fill+0x2c>)
 80009de:	f002 ffaf 	bl	8003940 <memset>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000084 	.word	0x20000084

080009f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	460b      	mov	r3, r1
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	70fb      	strb	r3, [r7, #3]
	if (
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	2b7f      	cmp	r3, #127	; 0x7f
 8000a06:	d848      	bhi.n	8000a9a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	2b1f      	cmp	r3, #31
 8000a0c:	d845      	bhi.n	8000a9a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <SSD1306_DrawPixel+0xb8>)
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2301      	moveq	r3, #1
 8000a1e:	2300      	movne	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d11a      	bne.n	8000a60 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	b298      	uxth	r0, r3
 8000a32:	4603      	mov	r3, r0
 8000a34:	01db      	lsls	r3, r3, #7
 8000a36:	4413      	add	r3, r2
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <SSD1306_DrawPixel+0xbc>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	2101      	movs	r1, #1
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b259      	sxtb	r1, r3
 8000a50:	88fa      	ldrh	r2, [r7, #6]
 8000a52:	4603      	mov	r3, r0
 8000a54:	01db      	lsls	r3, r3, #7
 8000a56:	4413      	add	r3, r2
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <SSD1306_DrawPixel+0xbc>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
 8000a5e:	e01d      	b.n	8000a9c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	08db      	lsrs	r3, r3, #3
 8000a66:	b298      	uxth	r0, r3
 8000a68:	4603      	mov	r3, r0
 8000a6a:	01db      	lsls	r3, r3, #7
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <SSD1306_DrawPixel+0xbc>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	4013      	ands	r3, r2
 8000a88:	b259      	sxtb	r1, r3
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	01db      	lsls	r3, r3, #7
 8000a90:	4413      	add	r3, r2
 8000a92:	b2c9      	uxtb	r1, r1
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SSD1306_DrawPixel+0xbc>)
 8000a96:	54d1      	strb	r1, [r2, r3]
 8000a98:	e000      	b.n	8000a9c <SSD1306_DrawPixel+0xac>
		return;
 8000a9a:	bf00      	nop
	}
}
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000284 	.word	0x20000284
 8000aac:	20000084 	.word	0x20000084

08000ab0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	80fb      	strh	r3, [r7, #6]
 8000abc:	4613      	mov	r3, r2
 8000abe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SSD1306_GotoXY+0x28>)
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <SSD1306_GotoXY+0x28>)
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	8053      	strh	r3, [r2, #2]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000284 	.word	0x20000284

08000adc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000aec:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
	if (
 8000af8:	2b7f      	cmp	r3, #127	; 0x7f
 8000afa:	dc07      	bgt.n	8000b0c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b08:	2b1f      	cmp	r3, #31
 8000b0a:	dd01      	ble.n	8000b10 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e05e      	b.n	8000bce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e04b      	b.n	8000bae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	3b20      	subs	r3, #32
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	7849      	ldrb	r1, [r1, #1]
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	4619      	mov	r1, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	440b      	add	r3, r1
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	e030      	b.n	8000b9c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d010      	beq.n	8000b6c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4413      	add	r3, r2
 8000b54:	b298      	uxth	r0, r3
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000b58:	885a      	ldrh	r2, [r3, #2]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	79ba      	ldrb	r2, [r7, #6]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f7ff ff43 	bl	80009f0 <SSD1306_DrawPixel>
 8000b6a:	e014      	b.n	8000b96 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000b6e:	881a      	ldrh	r2, [r3, #0]
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4413      	add	r3, r2
 8000b76:	b298      	uxth	r0, r3
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000b7a:	885a      	ldrh	r2, [r3, #2]
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4413      	add	r3, r2
 8000b82:	b299      	uxth	r1, r3
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	f7ff ff2d 	bl	80009f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d3c8      	bcc.n	8000b3a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d3ad      	bcc.n	8000b16 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <SSD1306_Putc+0xfc>)
 8000bca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000284 	.word	0x20000284

08000bdc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000bea:	e012      	b.n	8000c12 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	79fa      	ldrb	r2, [r7, #7]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff71 	bl	8000adc <SSD1306_Putc>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d002      	beq.n	8000c0c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	e008      	b.n	8000c1e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1e8      	bne.n	8000bec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <ssd1306_I2C_Init+0x28>)
 8000c30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c32:	e002      	b.n	8000c3a <ssd1306_I2C_Init+0x12>
		p--;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f9      	bne.n	8000c34 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	0003d090 	.word	0x0003d090

08000c54 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b0c7      	sub	sp, #284	; 0x11c
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c62:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000c66:	600a      	str	r2, [r1, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c6e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c72:	4622      	mov	r2, r4
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c7a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c7e:	4602      	mov	r2, r0
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c96:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000c9a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ca8:	e015      	b.n	8000cd6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000caa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cb2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cb6:	6812      	ldr	r2, [r2, #0]
 8000cb8:	441a      	add	r2, r3
 8000cba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	7811      	ldrb	r1, [r2, #0]
 8000cc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cc6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000cca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ccc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000cd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ce0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ce4:	8812      	ldrh	r2, [r2, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d8df      	bhi.n	8000caa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000cea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	f107 020c 	add.w	r2, r7, #12
 8000d08:	200a      	movs	r0, #10
 8000d0a:	9000      	str	r0, [sp, #0]
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <ssd1306_I2C_WriteMulti+0xc8>)
 8000d0e:	f000 fcb5 	bl	800167c <HAL_I2C_Master_Transmit>
}
 8000d12:	bf00      	nop
 8000d14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	20000030 	.word	0x20000030

08000d20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	b299      	uxth	r1, r3
 8000d3e:	f107 020c 	add.w	r2, r7, #12
 8000d42:	230a      	movs	r3, #10
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2302      	movs	r3, #2
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <ssd1306_I2C_Write+0x38>)
 8000d4a:	f000 fc97 	bl	800167c <HAL_I2C_Master_Transmit>
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000030 	.word	0x20000030

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_MspInit+0x44>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x44>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ae      	sub	sp, #184	; 0xb8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2294      	movs	r2, #148	; 0x94
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fdbb 	bl	8003940 <memset>
  if(hi2c->Instance==I2C1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <HAL_I2C_MspInit+0xc0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d143      	bne.n	8000e5c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 f871 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dec:	f7ff fcf0 	bl	80007d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_I2C_MspInit+0xc4>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <HAL_I2C_MspInit+0xc4>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_I2C_MspInit+0xc4>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e10:	2312      	movs	r3, #18
 8000e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e22:	2304      	movs	r3, #4
 8000e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <HAL_I2C_MspInit+0xc8>)
 8000e30:	f000 fa02 	bl	8001238 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB8);
 8000e34:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e38:	f001 f8b2 	bl	8001fa0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB9);
 8000e3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e40:	f001 f8ae 	bl	8001fa0 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0xc4>)
 8000e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_I2C_MspInit+0xc4>)
 8000e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_I2C_MspInit+0xc4>)
 8000e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	37b8      	adds	r7, #184	; 0xb8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005400 	.word	0x40005400
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000400 	.word	0x48000400

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f892 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eec:	f7ff ffea 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f002 fcef 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1a:	f7ff f96f 	bl	80001fc <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f2c:	0800412c 	.word	0x0800412c
  ldr r2, =_sbss
 8000f30:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f34:	20000290 	.word	0x20000290

08000f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>

08000f3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f943 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f80e 	bl	8000f6c <HAL_InitTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e001      	b.n	8000f60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5c:	f7ff fefe 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_InitTick+0x6c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d023      	beq.n	8000fc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_InitTick+0x70>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_InitTick+0x6c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f941 	bl	800121e <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10f      	bne.n	8000fc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d809      	bhi.n	8000fbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f919 	bl	80011e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_InitTick+0x74>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e007      	b.n	8000fcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e004      	b.n	8000fcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e001      	b.n	8000fcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	2000000c 	.word	0x2000000c

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000010 	.word	0x20000010
 8001008:	2000028c 	.word	0x2000028c

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000028c 	.word	0x2000028c

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000010 	.word	0x20000010

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff47 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff5c 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffb0 	bl	800118c <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e166      	b.n	8001516 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8158 	beq.w	8001510 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80b2 	beq.w	8001510 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_GPIO_Init+0x2fc>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	4a60      	ldr	r2, [pc, #384]	; (8001534 <HAL_GPIO_Init+0x2fc>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6613      	str	r3, [r2, #96]	; 0x60
 80013b8:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <HAL_GPIO_Init+0x2fc>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c4:	4a5c      	ldr	r2, [pc, #368]	; (8001538 <HAL_GPIO_Init+0x300>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ee:	d02b      	beq.n	8001448 <HAL_GPIO_Init+0x210>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_GPIO_Init+0x304>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d025      	beq.n	8001444 <HAL_GPIO_Init+0x20c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x308>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d01f      	beq.n	8001440 <HAL_GPIO_Init+0x208>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x30c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d019      	beq.n	800143c <HAL_GPIO_Init+0x204>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x310>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_GPIO_Init+0x200>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x314>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00d      	beq.n	8001434 <HAL_GPIO_Init+0x1fc>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x318>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d007      	beq.n	8001430 <HAL_GPIO_Init+0x1f8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x31c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <HAL_GPIO_Init+0x1f4>
 8001428:	2307      	movs	r3, #7
 800142a:	e00e      	b.n	800144a <HAL_GPIO_Init+0x212>
 800142c:	2308      	movs	r3, #8
 800142e:	e00c      	b.n	800144a <HAL_GPIO_Init+0x212>
 8001430:	2306      	movs	r3, #6
 8001432:	e00a      	b.n	800144a <HAL_GPIO_Init+0x212>
 8001434:	2305      	movs	r3, #5
 8001436:	e008      	b.n	800144a <HAL_GPIO_Init+0x212>
 8001438:	2304      	movs	r3, #4
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x212>
 800143c:	2303      	movs	r3, #3
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x212>
 8001440:	2302      	movs	r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x212>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x212>
 8001448:	2300      	movs	r3, #0
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800145a:	4937      	ldr	r1, [pc, #220]	; (8001538 <HAL_GPIO_Init+0x300>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_GPIO_Init+0x320>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148c:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_GPIO_Init+0x320>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <HAL_GPIO_Init+0x320>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b6:	4a28      	ldr	r2, [pc, #160]	; (8001558 <HAL_GPIO_Init+0x320>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_GPIO_Init+0x320>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_GPIO_Init+0x320>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_GPIO_Init+0x320>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_GPIO_Init+0x320>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	f47f ae91 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48001000 	.word	0x48001000
 800154c:	48001400 	.word	0x48001400
 8001550:	48001800 	.word	0x48001800
 8001554:	48001c00 	.word	0x48001c00
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e081      	b.n	8001672 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fc0e 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2224      	movs	r2, #36	; 0x24
 800158c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e006      	b.n	80015e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d104      	bne.n	80015f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001608:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001618:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69d9      	ldr	r1, [r3, #28]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	461a      	mov	r2, r3
 8001688:	460b      	mov	r3, r1
 800168a:	817b      	strh	r3, [r7, #10]
 800168c:	4613      	mov	r3, r2
 800168e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b20      	cmp	r3, #32
 800169a:	f040 80da 	bne.w	8001852 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_I2C_Master_Transmit+0x30>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e0d3      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1d8>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016b4:	f7ff fcaa 	bl	800100c <HAL_GetTick>
 80016b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2319      	movs	r3, #25
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f9f7 	bl	8001aba <I2C_WaitOnFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0be      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2221      	movs	r2, #33	; 0x21
 80016da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2210      	movs	r2, #16
 80016e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	2bff      	cmp	r3, #255	; 0xff
 8001706:	d90e      	bls.n	8001726 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	22ff      	movs	r2, #255	; 0xff
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	4b51      	ldr	r3, [pc, #324]	; (800185c <HAL_I2C_Master_Transmit+0x1e0>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fb74 	bl	8001e0c <I2C_TransferConfig>
 8001724:	e06c      	b.n	8001800 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	b2da      	uxtb	r2, r3
 8001736:	8979      	ldrh	r1, [r7, #10]
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_I2C_Master_Transmit+0x1e0>)
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 fb63 	bl	8001e0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001746:	e05b      	b.n	8001800 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	6a39      	ldr	r1, [r7, #32]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 f9f4 	bl	8001b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e07b      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d034      	beq.n	8001800 <HAL_I2C_Master_Transmit+0x184>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	2b00      	cmp	r3, #0
 800179c:	d130      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2200      	movs	r2, #0
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f986 	bl	8001aba <I2C_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e04d      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d90e      	bls.n	80017e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	8979      	ldrh	r1, [r7, #10]
 80017d0:	2300      	movs	r3, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fb17 	bl	8001e0c <I2C_TransferConfig>
 80017de:	e00f      	b.n	8001800 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	8979      	ldrh	r1, [r7, #10]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fb06 	bl	8001e0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d19e      	bne.n	8001748 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f9d3 	bl	8001bba <I2C_WaitOnSTOPFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e01a      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2220      	movs	r2, #32
 8001824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_I2C_Master_Transmit+0x1e4>)
 8001832:	400b      	ands	r3, r1
 8001834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001852:	2302      	movs	r3, #2
  }
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	80002000 	.word	0x80002000
 8001860:	fe00e800 	.word	0xfe00e800

08001864 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b20      	cmp	r3, #32
 8001882:	f040 80f1 	bne.w	8001a68 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001894:	d101      	bne.n	800189a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001896:	2302      	movs	r3, #2
 8001898:	e0e7      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_I2C_IsDeviceReady+0x44>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e0e0      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2224      	movs	r2, #36	; 0x24
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_I2C_IsDeviceReady+0x72>
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d4:	e004      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x7c>
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb91 	bl	800100c <HAL_GetTick>
 80018ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b10      	cmp	r3, #16
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001918:	e034      	b.n	8001984 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d01a      	beq.n	8001958 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7ff fb73 	bl	800100c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d302      	bcc.n	8001938 <HAL_I2C_IsDeviceReady+0xd4>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10f      	bne.n	8001958 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f043 0220 	orr.w	r2, r3, #32
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e088      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b20      	cmp	r3, #32
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b10      	cmp	r3, #16
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_I2C_IsDeviceReady+0x12c>
 800198a:	7fbb      	ldrb	r3, [r7, #30]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0c4      	beq.n	800191a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b10      	cmp	r3, #16
 800199c:	d01a      	beq.n	80019d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	2120      	movs	r1, #32
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f886 	bl	8001aba <I2C_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e058      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e04a      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	2120      	movs	r1, #32
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f86b 	bl	8001aba <I2C_WaitOnFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e03d      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2210      	movs	r2, #16
 80019f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2220      	movs	r2, #32
 80019fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d118      	bne.n	8001a38 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a14:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2120      	movs	r1, #32
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f84a 	bl	8001aba <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e01c      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2220      	movs	r2, #32
 8001a36:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	f63f af3b 	bhi.w	80018be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001a68:	2302      	movs	r3, #2
  }
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d103      	bne.n	8001a90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d007      	beq.n	8001aae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	619a      	str	r2, [r3, #24]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aca:	e022      	b.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad2:	d01e      	beq.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad4:	f7ff fa9a 	bl	800100c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d302      	bcc.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d113      	bne.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f043 0220 	orr.w	r2, r3, #32
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d0cd      	beq.n	8001acc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b46:	e02c      	b.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f871 	bl	8001c34 <I2C_IsErrorOccurred>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e02a      	b.n	8001bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b62:	d01e      	beq.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b64:	f7ff fa52 	bl	800100c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d302      	bcc.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d113      	bne.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f043 0220 	orr.w	r2, r3, #32
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e007      	b.n	8001bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d1cb      	bne.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc6:	e028      	b.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f831 	bl	8001c34 <I2C_IsErrorOccurred>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e026      	b.n	8001c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bdc:	f7ff fa16 	bl	800100c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d302      	bcc.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d113      	bne.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e007      	b.n	8001c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d1cf      	bne.n	8001bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d075      	beq.n	8001d4c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2210      	movs	r2, #16
 8001c66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c68:	e056      	b.n	8001d18 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d052      	beq.n	8001d18 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7ff f9cb 	bl	800100c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <I2C_IsErrorOccurred+0x54>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d147      	bne.n	8001d18 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001caa:	d12e      	bne.n	8001d0a <I2C_IsErrorOccurred+0xd6>
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cb2:	d02a      	beq.n	8001d0a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d027      	beq.n	8001d0a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cca:	f7ff f99f 	bl	800100c <HAL_GetTick>
 8001cce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd0:	e01b      	b.n	8001d0a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cd2:	f7ff f99b 	bl	800100c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b19      	cmp	r3, #25
 8001cde:	d914      	bls.n	8001d0a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d1dc      	bne.n	8001cd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d003      	beq.n	8001d2e <I2C_IsErrorOccurred+0xfa>
 8001d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d09d      	beq.n	8001c6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00b      	beq.n	8001d98 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01c      	beq.n	8001dfc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff fe55 	bl	8001a72 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <I2C_IsErrorOccurred+0x1d4>)
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	fe00e800 	.word	0xfe00e800

08001e0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e24:	7a7b      	ldrb	r3, [r7, #9]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	0d5b      	lsrs	r3, r3, #21
 8001e46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <I2C_TransferConfig+0x60>)
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	ea02 0103 	and.w	r1, r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	03ff63ff 	.word	0x03ff63ff

08001e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d138      	bne.n	8001ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e032      	b.n	8001efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6819      	ldr	r1, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d139      	bne.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e033      	b.n	8001f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2224      	movs	r2, #36	; 0x24
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4905      	ldr	r1, [pc, #20]	; (8001fdc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff6:	e00b      	b.n	8002010 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002006:	d102      	bne.n	800200e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200c:	e000      	b.n	8002010 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800200e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d141      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203a:	d131      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002042:	4a46      	ldr	r2, [pc, #280]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800205c:	4b40      	ldr	r3, [pc, #256]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2232      	movs	r2, #50	; 0x32
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a3f      	ldr	r2, [pc, #252]	; (8002164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9b      	lsrs	r3, r3, #18
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002072:	e002      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b01      	subs	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002086:	d102      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f2      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d158      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e057      	b.n	8002150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a6:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020b0:	e04d      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b8:	d141      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c6:	d131      	bne.n	800212c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ce:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2232      	movs	r2, #50	; 0x32
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	0c9b      	lsrs	r3, r3, #18
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fe:	e002      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3b01      	subs	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	d102      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f2      	bne.n	8002100 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d112      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e011      	b.n	8002150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800213c:	e007      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40007000 	.word	0x40007000
 8002160:	20000008 	.word	0x20000008
 8002164:	431bde83 	.word	0x431bde83

08002168 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_PWREx_EnableVddIO2+0x1c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6053      	str	r3, [r2, #4]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40007000 	.word	0x40007000

08002188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	f000 bc08 	b.w	80029ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219c:	4b96      	ldr	r3, [pc, #600]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a6:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80e4 	beq.w	8002386 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4c>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	f040 808b 	bne.w	80022e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	f040 8087 	bne.w	80022e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d4:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_OscConfig+0x64>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e3df      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_RCC_OscConfig+0x7e>
 80021fc:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002204:	e005      	b.n	8002212 <HAL_RCC_OscConfig+0x8a>
 8002206:	4b7c      	ldr	r3, [pc, #496]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002212:	4293      	cmp	r3, r2
 8002214:	d223      	bcs.n	800225e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fd94 	bl	8002d48 <RCC_SetFlashLatencyFromMSIRange>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e3c0      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222a:	4b73      	ldr	r3, [pc, #460]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a72      	ldr	r2, [pc, #456]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002230:	f043 0308 	orr.w	r3, r3, #8
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	496d      	ldr	r1, [pc, #436]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002248:	4b6b      	ldr	r3, [pc, #428]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	4968      	ldr	r1, [pc, #416]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e025      	b.n	80022aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225e:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4960      	ldr	r1, [pc, #384]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	495b      	ldr	r1, [pc, #364]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fd54 	bl	8002d48 <RCC_SetFlashLatencyFromMSIRange>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e380      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022aa:	f000 fcc1 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4950      	ldr	r1, [pc, #320]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80022bc:	5ccb      	ldrb	r3, [r1, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a4e      	ldr	r2, [pc, #312]	; (8002400 <HAL_RCC_OscConfig+0x278>)
 80022c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022ca:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fe4c 	bl	8000f6c <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d052      	beq.n	8002384 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	e364      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d032      	beq.n	8002350 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a42      	ldr	r2, [pc, #264]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fe89 	bl	800100c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fe:	f7fe fe85 	bl	800100c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e34d      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002310:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a35      	ldr	r2, [pc, #212]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4930      	ldr	r1, [pc, #192]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	492b      	ldr	r1, [pc, #172]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
 800234e:	e01a      	b.n	8002386 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002350:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800235c:	f7fe fe56 	bl	800100c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002364:	f7fe fe52 	bl	800100c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e31a      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1dc>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d073      	beq.n	800247a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_OscConfig+0x21c>
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d10e      	bne.n	80023bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d10b      	bne.n	80023bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d063      	beq.n	8002478 <HAL_RCC_OscConfig+0x2f0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d15f      	bne.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e2f7      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x24c>
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e025      	b.n	8002420 <HAL_RCC_OscConfig+0x298>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d114      	bne.n	8002408 <HAL_RCC_OscConfig+0x280>
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a02      	ldr	r2, [pc, #8]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e013      	b.n	8002420 <HAL_RCC_OscConfig+0x298>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	080040e4 	.word	0x080040e4
 8002400:	20000008 	.word	0x20000008
 8002404:	2000000c 	.word	0x2000000c
 8002408:	4ba0      	ldr	r3, [pc, #640]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a9f      	ldr	r2, [pc, #636]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b9d      	ldr	r3, [pc, #628]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a9c      	ldr	r2, [pc, #624]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fdf0 	bl	800100c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fdec 	bl	800100c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e2b4      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002442:	4b92      	ldr	r3, [pc, #584]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x2a8>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fddc 	bl	800100c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fdd8 	bl	800100c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e2a0      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x2d0>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d060      	beq.n	8002548 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d005      	beq.n	8002498 <HAL_RCC_OscConfig+0x310>
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d119      	bne.n	80024c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d116      	bne.n	80024c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	4b7c      	ldr	r3, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_OscConfig+0x328>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e27d      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	4973      	ldr	r1, [pc, #460]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	e040      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d023      	beq.n	8002516 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ce:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6e      	ldr	r2, [pc, #440]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fd97 	bl	800100c <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe fd93 	bl	800100c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e25b      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f4:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	495f      	ldr	r1, [pc, #380]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e018      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800251c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fd73 	bl	800100c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fd6f 	bl	800100c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e237      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d03c      	beq.n	80025ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fd4e 	bl	800100c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe fd4a 	bl	800100c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e212      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ef      	beq.n	8002574 <HAL_RCC_OscConfig+0x3ec>
 8002594:	e01b      	b.n	80025ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259c:	4a3b      	ldr	r2, [pc, #236]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fd31 	bl	800100c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fd2d 	bl	800100c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1f5      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ef      	bne.n	80025ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a6 	beq.w	8002728 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	; 0x58
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x504>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002604:	2301      	movs	r3, #1
 8002606:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCC_OscConfig+0x508>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d118      	bne.n	8002646 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_RCC_OscConfig+0x508>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x508>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002620:	f7fe fcf4 	bl	800100c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe fcf0 	bl	800100c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1b8      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x508>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x4d8>
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800265e:	e029      	b.n	80026b4 <HAL_RCC_OscConfig+0x52c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d115      	bne.n	8002694 <HAL_RCC_OscConfig+0x50c>
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_RCC_OscConfig+0x504>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_RCC_OscConfig+0x504>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002688:	e014      	b.n	80026b4 <HAL_RCC_OscConfig+0x52c>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
 8002694:	4b9d      	ldr	r3, [pc, #628]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	4a9c      	ldr	r2, [pc, #624]	; (800290c <HAL_RCC_OscConfig+0x784>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a4:	4b99      	ldr	r3, [pc, #612]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	4a98      	ldr	r2, [pc, #608]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe fca6 	bl	800100c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe fca2 	bl	800100c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e168      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b8c      	ldr	r3, [pc, #560]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ed      	beq.n	80026c4 <HAL_RCC_OscConfig+0x53c>
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fc8f 	bl	800100c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fc8b 	bl	800100c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e151      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002708:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x784>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ed      	bne.n	80026f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002716:	7ffb      	ldrb	r3, [r7, #31]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b7b      	ldr	r3, [pc, #492]	; (800290c <HAL_RCC_OscConfig+0x784>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a7a      	ldr	r2, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03c      	beq.n	80027ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01c      	beq.n	8002776 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800273c:	4b73      	ldr	r3, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x784>)
 800273e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fc5e 	bl	800100c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002754:	f7fe fc5a 	bl	800100c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e122      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002766:	4b69      	ldr	r3, [pc, #420]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCC_OscConfig+0x5cc>
 8002774:	e01b      	b.n	80027ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277c:	4a63      	ldr	r2, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x784>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe fc41 	bl	800100c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278e:	f7fe fc3d 	bl	800100c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e105      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a0:	4b5a      	ldr	r3, [pc, #360]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80027a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80f9 	beq.w	80029aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	2b02      	cmp	r3, #2
 80027be:	f040 80cf 	bne.w	8002960 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d12c      	bne.n	8002830 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	3b01      	subs	r3, #1
 80027e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d123      	bne.n	8002830 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d11b      	bne.n	8002830 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d113      	bne.n	8002830 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d109      	bne.n	8002830 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d071      	beq.n	8002914 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d068      	beq.n	8002908 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002836:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0ac      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800285c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285e:	f7fe fbd5 	bl	800100c <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fbd1 	bl	800100c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e099      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x784>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x784>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x788>)
 800288a:	4013      	ands	r3, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002894:	3a01      	subs	r2, #1
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800289e:	0212      	lsls	r2, r2, #8
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028a6:	0852      	lsrs	r2, r2, #1
 80028a8:	3a01      	subs	r2, #1
 80028aa:	0552      	lsls	r2, r2, #21
 80028ac:	4311      	orrs	r1, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028b2:	0852      	lsrs	r2, r2, #1
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0652      	lsls	r2, r2, #25
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028be:	06d2      	lsls	r2, r2, #27
 80028c0:	430a      	orrs	r2, r1
 80028c2:	4912      	ldr	r1, [pc, #72]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a0c      	ldr	r2, [pc, #48]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e0:	f7fe fb94 	bl	800100c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fb90 	bl	800100c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e058      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_RCC_OscConfig+0x784>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002906:	e050      	b.n	80029aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e04f      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
 800290c:	40021000 	.word	0x40021000
 8002910:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d144      	bne.n	80029aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a23      	ldr	r2, [pc, #140]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe fb68 	bl	800100c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fb64 	bl	800100c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e02c      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x7b8>
 800295e:	e024      	b.n	80029aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d01f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fb4b 	bl	800100c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fb47 	bl	800100c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e00f      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4905      	ldr	r1, [pc, #20]	; (80029b4 <HAL_RCC_OscConfig+0x82c>)
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_OscConfig+0x830>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	60cb      	str	r3, [r1, #12]
 80029a4:	e001      	b.n	80029aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	feeefffc 	.word	0xfeeefffc

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e11d      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b90      	ldr	r3, [pc, #576]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d910      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b8d      	ldr	r3, [pc, #564]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 020f 	bic.w	r2, r3, #15
 80029ea:	498b      	ldr	r1, [pc, #556]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e105      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d908      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	497b      	ldr	r1, [pc, #492]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d079      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d11e      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0dc      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a56:	f000 f9d1 	bl	8002dfc <RCC_GetSysClockFreqFromPLLSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a70      	ldr	r2, [pc, #448]	; (8002c20 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d946      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a62:	4b6e      	ldr	r3, [pc, #440]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d140      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a6e:	4b6b      	ldr	r3, [pc, #428]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a76:	4a69      	ldr	r2, [pc, #420]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e035      	b.n	8002af0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8c:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d115      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b9      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0ad      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0a5      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ac4:	f000 f8b4 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d90f      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 0203 	bic.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4947      	ldr	r1, [pc, #284]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b02:	f7fe fa83 	bl	800100c <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0a:	f7fe fa7f 	bl	800100c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e077      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 020c 	and.w	r2, r3, #12
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d1eb      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a37      	ldr	r2, [pc, #220]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b42:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d208      	bcs.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	492b      	ldr	r1, [pc, #172]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d210      	bcs.n	8002ba2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 020f 	bic.w	r2, r3, #15
 8002b88:	4923      	ldr	r1, [pc, #140]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_ClockConfig+0x25c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e036      	b.n	8002c10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4918      	ldr	r1, [pc, #96]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4910      	ldr	r1, [pc, #64]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be0:	f000 f826 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCC_ClockConfig+0x260>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <HAL_RCC_ClockConfig+0x268>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x26c>)
 8002bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe f9b1 	bl	8000f6c <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	04c4b400 	.word	0x04c4b400
 8002c24:	080040e4 	.word	0x080040e4
 8002c28:	20000008 	.word	0x20000008
 8002c2c:	2000000c 	.word	0x2000000c

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c48:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d121      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d11e      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c64:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c70:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	e004      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb4:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d134      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d003      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0xac>
 8002cd4:	e005      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd8:	617b      	str	r3, [r7, #20]
      break;
 8002cda:	e005      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cde:	617b      	str	r3, [r7, #20]
      break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	617b      	str	r3, [r7, #20]
      break;
 8002ce6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	fb03 f202 	mul.w	r2, r3, r2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	0e5b      	lsrs	r3, r3, #25
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d28:	69bb      	ldr	r3, [r7, #24]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	080040f4 	.word	0x080040f4
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d60:	f7ff f93e 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002d64:	6178      	str	r0, [r7, #20]
 8002d66:	e014      	b.n	8002d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6593      	str	r3, [r2, #88]	; 0x58
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d80:	f7ff f92e 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d10b      	bne.n	8002db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d913      	bls.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2ba0      	cmp	r3, #160	; 0xa0
 8002da4:	d902      	bls.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da6:	2302      	movs	r3, #2
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	e00d      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dac:	2301      	movs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e00a      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b7f      	cmp	r3, #127	; 0x7f
 8002db6:	d902      	bls.n	8002dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002db8:	2302      	movs	r3, #2
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	e004      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b70      	cmp	r3, #112	; 0x70
 8002dc2:	d101      	bne.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 020f 	bic.w	r2, r3, #15
 8002dd0:	4909      	ldr	r1, [pc, #36]	; (8002df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40022000 	.word	0x40022000

08002dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d00b      	beq.n	8002e2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d825      	bhi.n	8002e64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d008      	beq.n	8002e30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d11f      	bne.n	8002e64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e26:	613b      	str	r3, [r7, #16]
    break;
 8002e28:	e01f      	b.n	8002e6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e2c:	613b      	str	r3, [r7, #16]
    break;
 8002e2e:	e01c      	b.n	8002e6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e005      	b.n	8002e58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	613b      	str	r3, [r7, #16]
    break;
 8002e62:	e002      	b.n	8002e6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
    break;
 8002e68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	3301      	adds	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	fb03 f202 	mul.w	r2, r3, r2
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0e5b      	lsrs	r3, r3, #25
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002eaa:	683b      	ldr	r3, [r7, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	007a1200 	.word	0x007a1200
 8002ec4:	080040f4 	.word	0x080040f4

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d040      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d02a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d825      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d026      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ef4:	2b60      	cmp	r3, #96	; 0x60
 8002ef6:	d821      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d006      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d81d      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d010      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f08:	e018      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a88      	ldr	r2, [pc, #544]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f16:	e015      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fb02 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f28:	e00c      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3320      	adds	r3, #32
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fbed 	bl	8003710 <RCCEx_PLLSAI2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3a:	e003      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	74fb      	strb	r3, [r7, #19]
      break;
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f4a:	4b79      	ldr	r3, [pc, #484]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f50:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f58:	4975      	ldr	r1, [pc, #468]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f60:	e001      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d047      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d030      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d82a      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f86:	d02a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f8c:	d824      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d81e      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fa4:	e018      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fa6:	4b62      	ldr	r3, [pc, #392]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb2:	e015      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fab4 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3320      	adds	r3, #32
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fb9f 	bl	8003710 <RCCEx_PLLSAI2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	74fb      	strb	r3, [r7, #19]
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fe6:	4b52      	ldr	r3, [pc, #328]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	494e      	ldr	r1, [pc, #312]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ffc:	e001      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 809f 	beq.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003010:	2300      	movs	r3, #0
 8003012:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003014:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	4a40      	ldr	r2, [pc, #256]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003046:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003052:	f7fd ffdb 	bl	800100c <HAL_GetTick>
 8003056:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003058:	e009      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fd ffd7 	bl	800100c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d902      	bls.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	74fb      	strb	r3, [r7, #19]
        break;
 800306c:	e005      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ef      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d15b      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01f      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	429a      	cmp	r2, r3
 800309c:	d019      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030aa:	4b21      	ldr	r3, [pc, #132]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030ba:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ca:	4a19      	ldr	r2, [pc, #100]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d016      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fd ff96 	bl	800100c <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	e00b      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fd ff92 	bl	800100c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d902      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	74fb      	strb	r3, [r7, #19]
            break;
 80030fa:	e006      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0ec      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10c      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003128:	e008      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	74bb      	strb	r3, [r7, #18]
 800312e:	e005      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003130:	40021000 	.word	0x40021000
 8003134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313c:	7c7b      	ldrb	r3, [r7, #17]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4ba0      	ldr	r3, [pc, #640]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	4a9f      	ldr	r2, [pc, #636]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800315a:	4b9a      	ldr	r3, [pc, #616]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f023 0203 	bic.w	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	4996      	ldr	r1, [pc, #600]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800317c:	4b91      	ldr	r3, [pc, #580]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 020c 	bic.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	498e      	ldr	r1, [pc, #568]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	4985      	ldr	r1, [pc, #532]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c0:	4b80      	ldr	r3, [pc, #512]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ce:	497d      	ldr	r1, [pc, #500]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031e2:	4b78      	ldr	r3, [pc, #480]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	4974      	ldr	r1, [pc, #464]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003204:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	496c      	ldr	r1, [pc, #432]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003226:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003234:	4963      	ldr	r1, [pc, #396]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003256:	495b      	ldr	r1, [pc, #364]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	4952      	ldr	r1, [pc, #328]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	494a      	ldr	r1, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ae:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	4941      	ldr	r1, [pc, #260]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032d0:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	4939      	ldr	r1, [pc, #228]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f2:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	4930      	ldr	r1, [pc, #192]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003310:	d106      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331c:	60d3      	str	r3, [r2, #12]
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003328:	d10c      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f8f9 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d04d      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003358:	d108      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003366:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800336a:	e012      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003378:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800338a:	490e      	ldr	r1, [pc, #56]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339a:	d106      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
 80033a8:	e020      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b2:	d109      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a02      	ldr	r2, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033be:	60d3      	str	r3, [r2, #12]
 80033c0:	e014      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f8a5 	bl	8003528 <RCCEx_PLLSAI1_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d028      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033f8:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003406:	4947      	ldr	r1, [pc, #284]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003416:	d106      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003418:	4b42      	ldr	r3, [pc, #264]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
 8003424:	e011      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f876 	bl	8003528 <RCCEx_PLLSAI1_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003456:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003466:	492f      	ldr	r1, [pc, #188]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003478:	d10c      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f851 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034a6:	f023 0204 	bic.w	r2, r3, #4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b0:	491c      	ldr	r1, [pc, #112]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ca:	f023 0218 	bic.w	r2, r3, #24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	4913      	ldr	r1, [pc, #76]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f8:	490a      	ldr	r1, [pc, #40]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800350a:	d105      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003516:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003518:	7cbb      	ldrb	r3, [r7, #18]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000

08003528 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003536:	4b72      	ldr	r3, [pc, #456]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0203 	and.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d103      	bne.n	800355a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
       ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d142      	bne.n	80035e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	e03f      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d018      	beq.n	800359a <RCCEx_PLLSAI1_Config+0x72>
 8003568:	2b03      	cmp	r3, #3
 800356a:	d825      	bhi.n	80035b8 <RCCEx_PLLSAI1_Config+0x90>
 800356c:	2b01      	cmp	r3, #1
 800356e:	d002      	beq.n	8003576 <RCCEx_PLLSAI1_Config+0x4e>
 8003570:	2b02      	cmp	r3, #2
 8003572:	d009      	beq.n	8003588 <RCCEx_PLLSAI1_Config+0x60>
 8003574:	e020      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003576:	4b62      	ldr	r3, [pc, #392]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11d      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003586:	e01a      	b.n	80035be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003588:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003598:	e013      	b.n	80035c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800359a:	4b59      	ldr	r3, [pc, #356]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035b6:	e006      	b.n	80035c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e004      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4949      	ldr	r1, [pc, #292]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 8086 	bne.w	80036f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035e8:	4b45      	ldr	r3, [pc, #276]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a44      	ldr	r2, [pc, #272]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fd fd0a 	bl	800100c <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035fa:	e009      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035fc:	f7fd fd06 	bl	800100c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d902      	bls.n	8003610 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	73fb      	strb	r3, [r7, #15]
        break;
 800360e:	e005      	b.n	800361c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ef      	bne.n	80035fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d168      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003628:	4b35      	ldr	r3, [pc, #212]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6892      	ldr	r2, [r2, #8]
 8003634:	0211      	lsls	r1, r2, #8
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68d2      	ldr	r2, [r2, #12]
 800363a:	06d2      	lsls	r2, r2, #27
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6852      	ldr	r2, [r2, #4]
 8003642:	3a01      	subs	r2, #1
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	430a      	orrs	r2, r1
 8003648:	492d      	ldr	r1, [pc, #180]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	610b      	str	r3, [r1, #16]
 800364e:	e02d      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d115      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003656:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6892      	ldr	r2, [r2, #8]
 8003662:	0211      	lsls	r1, r2, #8
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6912      	ldr	r2, [r2, #16]
 8003668:	0852      	lsrs	r2, r2, #1
 800366a:	3a01      	subs	r2, #1
 800366c:	0552      	lsls	r2, r2, #21
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6852      	ldr	r2, [r2, #4]
 8003674:	3a01      	subs	r2, #1
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	430a      	orrs	r2, r1
 800367a:	4921      	ldr	r1, [pc, #132]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367c:	4313      	orrs	r3, r2
 800367e:	610b      	str	r3, [r1, #16]
 8003680:	e014      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	0211      	lsls	r1, r2, #8
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6952      	ldr	r2, [r2, #20]
 8003694:	0852      	lsrs	r2, r2, #1
 8003696:	3a01      	subs	r2, #1
 8003698:	0652      	lsls	r2, r2, #25
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6852      	ldr	r2, [r2, #4]
 80036a0:	3a01      	subs	r2, #1
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	430a      	orrs	r2, r1
 80036a6:	4916      	ldr	r1, [pc, #88]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd fca8 	bl	800100c <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c0:	f7fd fca4 	bl	800100c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
          break;
 80036d2:	e005      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	4904      	ldr	r1, [pc, #16]	; (8003700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	07ff800f 	.word	0x07ff800f
 8003708:	ff9f800f 	.word	0xff9f800f
 800370c:	f9ff800f 	.word	0xf9ff800f

08003710 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800371e:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d103      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
       ||
 800373e:	2b00      	cmp	r3, #0
 8003740:	d142      	bne.n	80037c8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e03f      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d018      	beq.n	8003782 <RCCEx_PLLSAI2_Config+0x72>
 8003750:	2b03      	cmp	r3, #3
 8003752:	d825      	bhi.n	80037a0 <RCCEx_PLLSAI2_Config+0x90>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <RCCEx_PLLSAI2_Config+0x4e>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI2_Config+0x60>
 800375c:	e020      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375e:	4b62      	ldr	r3, [pc, #392]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11d      	bne.n	80037a6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e01a      	b.n	80037a6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e013      	b.n	80037aa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003782:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378e:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379e:	e006      	b.n	80037ae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e004      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80037b6:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4949      	ldr	r1, [pc, #292]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 8086 	bne.w	80038dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a44      	ldr	r2, [pc, #272]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037dc:	f7fd fc16 	bl	800100c <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037e2:	e009      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037e4:	f7fd fc12 	bl	800100c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d902      	bls.n	80037f8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	73fb      	strb	r3, [r7, #15]
        break;
 80037f6:	e005      	b.n	8003804 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ef      	bne.n	80037e4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d168      	bne.n	80038dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6892      	ldr	r2, [r2, #8]
 800381c:	0211      	lsls	r1, r2, #8
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	06d2      	lsls	r2, r2, #27
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6852      	ldr	r2, [r2, #4]
 800382a:	3a01      	subs	r2, #1
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	430a      	orrs	r2, r1
 8003830:	492d      	ldr	r1, [pc, #180]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	614b      	str	r3, [r1, #20]
 8003836:	e02d      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d115      	bne.n	800386a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800383e:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6892      	ldr	r2, [r2, #8]
 800384a:	0211      	lsls	r1, r2, #8
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6912      	ldr	r2, [r2, #16]
 8003850:	0852      	lsrs	r2, r2, #1
 8003852:	3a01      	subs	r2, #1
 8003854:	0552      	lsls	r2, r2, #21
 8003856:	4311      	orrs	r1, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6852      	ldr	r2, [r2, #4]
 800385c:	3a01      	subs	r2, #1
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	430a      	orrs	r2, r1
 8003862:	4921      	ldr	r1, [pc, #132]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003864:	4313      	orrs	r3, r2
 8003866:	614b      	str	r3, [r1, #20]
 8003868:	e014      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	0211      	lsls	r1, r2, #8
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6952      	ldr	r2, [r2, #20]
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	3a01      	subs	r2, #1
 8003880:	0652      	lsls	r2, r2, #25
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6852      	ldr	r2, [r2, #4]
 8003888:	3a01      	subs	r2, #1
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	430a      	orrs	r2, r1
 800388e:	4916      	ldr	r1, [pc, #88]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd fbb4 	bl	800100c <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038a6:	e009      	b.n	80038bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a8:	f7fd fbb0 	bl	800100c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	73fb      	strb	r3, [r7, #15]
          break;
 80038ba:	e005      	b.n	80038c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	4904      	ldr	r1, [pc, #16]	; (80038e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	07ff800f 	.word	0x07ff800f
 80038f0:	ff9f800f 	.word	0xff9f800f
 80038f4:	f9ff800f 	.word	0xf9ff800f

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 f820 	bl	8003950 <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08004124 	.word	0x08004124
 8003934:	08004124 	.word	0x08004124
 8003938:	08004124 	.word	0x08004124
 800393c:	08004128 	.word	0x08004128

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
