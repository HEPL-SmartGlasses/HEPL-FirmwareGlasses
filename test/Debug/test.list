
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005840  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001604  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007000  08007000  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08007000  08007000  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007000  08007000  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08007008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000030  08007038  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08007038  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c10  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002792  00000000  00000000  00030c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000343c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae03  00000000  00000000  00035240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b2d  00000000  00000000  00060043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd08e  00000000  00000000  00074b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  00171c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000030 	.word	0x20000030
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080059e4 	.word	0x080059e4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000034 	.word	0x20000034
 80001f8:	080059e4 	.word	0x080059e4

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 ff63 	bl	80010ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f874 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f934 	bl	8000478 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000210:	f000 f8b6 	bl	8000380 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000214:	f000 f8f2 	bl	80003fc <MX_SPI1_Init>
  MX_FATFS_Init();
 8000218:	f003 fcdc 	bl	8003bd4 <MX_FATFS_Init>
  // Initialize SD card
    // some variables for FatFs
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations
    char* filename = "/map.txt";
 800021c:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <main+0xdc>)
 800021e:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
  //  uint8_t buf_rx[1] = {0x00};
  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
  //  HAL_SPI_TransmitReceive(&hspi2, buf_tx, buf_rx, 1, 2);
  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);

    fres = f_mount(&FatFs, "", 1); // 1 = mount now
 8000222:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000226:	2201      	movs	r2, #1
 8000228:	492c      	ldr	r1, [pc, #176]	; (80002dc <main+0xe0>)
 800022a:	4618      	mov	r0, r3
 800022c:	f005 f94e 	bl	80054cc <f_mount>
 8000230:	4603      	mov	r3, r0
 8000232:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
    fres = f_mount(&FatFs, "", 1); // 1 = mount now
 8000236:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800023a:	2201      	movs	r2, #1
 800023c:	4927      	ldr	r1, [pc, #156]	; (80002dc <main+0xe0>)
 800023e:	4618      	mov	r0, r3
 8000240:	f005 f944 	bl	80054cc <f_mount>
 8000244:	4603      	mov	r3, r0
 8000246:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
    if (fres != FR_OK)
 800024a:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 800024e:	2b00      	cmp	r3, #0
 8000250:	d00b      	beq.n	800026a <main+0x6e>
    {
        #ifdef DEBUG
  	  SSD1306_GotoXY (0,0);
 8000252:	2100      	movs	r1, #0
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fcb3 	bl	8000bc0 <SSD1306_GotoXY>
  	  SSD1306_Puts ("ErrSD-Mnt", &Font_11x18, 1); // error mounting
 800025a:	2201      	movs	r2, #1
 800025c:	4920      	ldr	r1, [pc, #128]	; (80002e0 <main+0xe4>)
 800025e:	4821      	ldr	r0, [pc, #132]	; (80002e4 <main+0xe8>)
 8000260:	f000 fd44 	bl	8000cec <SSD1306_Puts>
  	  SSD1306_UpdateScreen(); //display
 8000264:	f000 fc06 	bl	8000a74 <SSD1306_UpdateScreen>
        #endif
  	  while(1);
 8000268:	e7fe      	b.n	8000268 <main+0x6c>
  //  }
  //  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
  //  free_sectors = free_clusters * getFreeFs->csize;
  //  #endif

    fres = f_open(&fil, filename, FA_READ);
 800026a:	463b      	mov	r3, r7
 800026c:	2201      	movs	r2, #1
 800026e:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8000272:	4618      	mov	r0, r3
 8000274:	f005 f970 	bl	8005558 <f_open>
 8000278:	4603      	mov	r3, r0
 800027a:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
    fres = f_open(&fil, filename, FA_READ);
 800027e:	463b      	mov	r3, r7
 8000280:	2201      	movs	r2, #1
 8000282:	f8d7 1464 	ldr.w	r1, [r7, #1124]	; 0x464
 8000286:	4618      	mov	r0, r3
 8000288:	f005 f966 	bl	8005558 <f_open>
 800028c:	4603      	mov	r3, r0
 800028e:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
    if (fres != FR_OK) {
 8000292:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00b      	beq.n	80002b2 <main+0xb6>
        #ifdef DEBUG
  	  SSD1306_GotoXY (0,0);
 800029a:	2100      	movs	r1, #0
 800029c:	2000      	movs	r0, #0
 800029e:	f000 fc8f 	bl	8000bc0 <SSD1306_GotoXY>
  	  SSD1306_Puts ("ErrSD-OpF", &Font_11x18, 1); // error opening file
 80002a2:	2201      	movs	r2, #1
 80002a4:	490e      	ldr	r1, [pc, #56]	; (80002e0 <main+0xe4>)
 80002a6:	4810      	ldr	r0, [pc, #64]	; (80002e8 <main+0xec>)
 80002a8:	f000 fd20 	bl	8000cec <SSD1306_Puts>
  	  SSD1306_UpdateScreen();
 80002ac:	f000 fbe2 	bl	8000a74 <SSD1306_UpdateScreen>
   	  #endif
  	  while(1);
 80002b0:	e7fe      	b.n	80002b0 <main+0xb4>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_Init();
 80002b2:	f000 fb1b 	bl	80008ec <SSD1306_Init>
	  SSD1306_GotoXY (0,21);
 80002b6:	2115      	movs	r1, #21
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 fc81 	bl	8000bc0 <SSD1306_GotoXY>
	  SSD1306_Puts ("HELLO WORLD :)", &Font_7x10, 1);
 80002be:	2201      	movs	r2, #1
 80002c0:	490a      	ldr	r1, [pc, #40]	; (80002ec <main+0xf0>)
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <main+0xf4>)
 80002c4:	f000 fd12 	bl	8000cec <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80002c8:	f000 fbd4 	bl	8000a74 <SSD1306_UpdateScreen>

	  HAL_Delay (2000);
 80002cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d0:	f000 ff72 	bl	80011b8 <HAL_Delay>
	  SSD1306_Init();
 80002d4:	e7ed      	b.n	80002b2 <main+0xb6>
 80002d6:	bf00      	nop
 80002d8:	080059fc 	.word	0x080059fc
 80002dc:	08005a08 	.word	0x08005a08
 80002e0:	20000008 	.word	0x20000008
 80002e4:	08005a0c 	.word	0x08005a0c
 80002e8:	08005a18 	.word	0x08005a18
 80002ec:	20000000 	.word	0x20000000
 80002f0:	08005a24 	.word	0x08005a24

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2244      	movs	r2, #68	; 0x44
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f005 fb66 	bl	80059d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000316:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031a:	f001 ff4b 	bl	80021b4 <HAL_PWREx_ControlVoltageScaling>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000324:	f000 fadc 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000328:	2310      	movs	r3, #16
 800032a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4618      	mov	r0, r3
 8000342:	f001 ffeb 	bl	800231c <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800034c:	f000 fac8 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	463b      	mov	r3, r7
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f002 fbf1 	bl	8002b50 <HAL_RCC_ClockConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000374:	f000 fab4 	bl	80008e0 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3758      	adds	r7, #88	; 0x58
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_I2C1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x74>)
 800038c:	2204      	movs	r2, #4
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000392:	22f0      	movs	r2, #240	; 0xf0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000398:	2201      	movs	r2, #1
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ba:	480e      	ldr	r0, [pc, #56]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003bc:	f001 f998 	bl	80016f0 <HAL_I2C_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003c6:	f000 fa8b 	bl	80008e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ca:	2100      	movs	r1, #0
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003ce:	f001 fe19 	bl	8002004 <HAL_I2CEx_ConfigAnalogFilter>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d8:	f000 fa82 	bl	80008e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003dc:	2100      	movs	r1, #0
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003e0:	f001 fe5b 	bl	800209a <HAL_I2CEx_ConfigDigitalFilter>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 fa79 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000004c 	.word	0x2000004c
 80003f8:	40005400 	.word	0x40005400

080003fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_SPI1_Init+0x74>)
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_SPI1_Init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_SPI1_Init+0x74>)
 8000408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_SPI1_Init+0x74>)
 8000416:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800041a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_SPI1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_SPI1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_SPI1_Init+0x74>)
 800042a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_SPI1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_SPI1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_SPI1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_SPI1_Init+0x74>)
 800044a:	2207      	movs	r2, #7
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_SPI1_Init+0x74>)
 8000456:	2208      	movs	r2, #8
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_SPI1_Init+0x74>)
 800045c:	f003 fb16 	bl	8003a8c <HAL_SPI_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000466:	f000 fa3b 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200000a0 	.word	0x200000a0
 8000474:	40013000 	.word	0x40013000

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	; 0x38
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048e:	4bb2      	ldr	r3, [pc, #712]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4ab1      	ldr	r2, [pc, #708]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4baf      	ldr	r3, [pc, #700]	; (8000758 <MX_GPIO_Init+0x2e0>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	623b      	str	r3, [r7, #32]
 80004a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4bac      	ldr	r3, [pc, #688]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4aab      	ldr	r2, [pc, #684]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4ba9      	ldr	r3, [pc, #676]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	61fb      	str	r3, [r7, #28]
 80004bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	4ba6      	ldr	r3, [pc, #664]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4aa5      	ldr	r2, [pc, #660]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4ba3      	ldr	r3, [pc, #652]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	61bb      	str	r3, [r7, #24]
 80004d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	4ba0      	ldr	r3, [pc, #640]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a9f      	ldr	r2, [pc, #636]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b9d      	ldr	r3, [pc, #628]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b9a      	ldr	r3, [pc, #616]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a99      	ldr	r2, [pc, #612]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b97      	ldr	r3, [pc, #604]	; (8000758 <MX_GPIO_Init+0x2e0>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b94      	ldr	r3, [pc, #592]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a93      	ldr	r2, [pc, #588]	; (8000758 <MX_GPIO_Init+0x2e0>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b91      	ldr	r3, [pc, #580]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051e:	4b8e      	ldr	r3, [pc, #568]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a8d      	ldr	r2, [pc, #564]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b8b      	ldr	r3, [pc, #556]	; (8000758 <MX_GPIO_Init+0x2e0>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0308 	and.w	r3, r3, #8
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000536:	4b88      	ldr	r3, [pc, #544]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a87      	ldr	r2, [pc, #540]	; (8000758 <MX_GPIO_Init+0x2e0>)
 800053c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b85      	ldr	r3, [pc, #532]	; (8000758 <MX_GPIO_Init+0x2e0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800054e:	f001 fed5 	bl	80022fc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000552:	230c      	movs	r3, #12
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000562:	230d      	movs	r3, #13
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	4619      	mov	r1, r3
 800056c:	487b      	ldr	r0, [pc, #492]	; (800075c <MX_GPIO_Init+0x2e4>)
 800056e:	f000 ff2d 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000572:	2307      	movs	r3, #7
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000576:	2312      	movs	r3, #18
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000582:	2304      	movs	r3, #4
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	4619      	mov	r1, r3
 800058c:	4874      	ldr	r0, [pc, #464]	; (8000760 <MX_GPIO_Init+0x2e8>)
 800058e:	f000 ff1d 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80005a2:	230d      	movs	r3, #13
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005aa:	4619      	mov	r1, r3
 80005ac:	486c      	ldr	r0, [pc, #432]	; (8000760 <MX_GPIO_Init+0x2e8>)
 80005ae:	f000 ff0d 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005b2:	233f      	movs	r3, #63	; 0x3f
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005b6:	230b      	movs	r3, #11
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	4619      	mov	r1, r3
 80005c4:	4867      	ldr	r0, [pc, #412]	; (8000764 <MX_GPIO_Init+0x2ec>)
 80005c6:	f000 ff01 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ca:	2301      	movs	r3, #1
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005da:	2301      	movs	r3, #1
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f000 fef0 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80005ec:	230a      	movs	r3, #10
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005f0:	230b      	movs	r3, #11
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f000 fee3 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000616:	2302      	movs	r3, #2
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	4619      	mov	r1, r3
 8000620:	4851      	ldr	r0, [pc, #324]	; (8000768 <MX_GPIO_Init+0x2f0>)
 8000622:	f000 fed3 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800062a:	230b      	movs	r3, #11
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	4619      	mov	r1, r3
 8000638:	484b      	ldr	r0, [pc, #300]	; (8000768 <MX_GPIO_Init+0x2f0>)
 800063a:	f000 fec7 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800063e:	2344      	movs	r3, #68	; 0x44
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000642:	2303      	movs	r3, #3
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064e:	4619      	mov	r1, r3
 8000650:	4845      	ldr	r0, [pc, #276]	; (8000768 <MX_GPIO_Init+0x2f0>)
 8000652:	f000 febb 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000656:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000668:	2301      	movs	r3, #1
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	483a      	ldr	r0, [pc, #232]	; (800075c <MX_GPIO_Init+0x2e4>)
 8000674:	f000 feaa 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000678:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800068a:	2303      	movs	r3, #3
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	4619      	mov	r1, r3
 8000694:	4831      	ldr	r0, [pc, #196]	; (800075c <MX_GPIO_Init+0x2e4>)
 8000696:	f000 fe99 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006ac:	2301      	movs	r3, #1
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	482c      	ldr	r0, [pc, #176]	; (8000768 <MX_GPIO_Init+0x2f0>)
 80006b8:	f000 fe88 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80006bc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80006ce:	230d      	movs	r3, #13
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4619      	mov	r1, r3
 80006d8:	4823      	ldr	r0, [pc, #140]	; (8000768 <MX_GPIO_Init+0x2f0>)
 80006da:	f000 fe77 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80006f0:	230e      	movs	r3, #14
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	481b      	ldr	r0, [pc, #108]	; (8000768 <MX_GPIO_Init+0x2f0>)
 80006fc:	f000 fe66 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000712:	2307      	movs	r3, #7
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_GPIO_Init+0x2f4>)
 800071e:	f000 fe55 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000722:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0x2f4>)
 8000740:	f000 fe44 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000744:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	e00c      	b.n	8000770 <MX_GPIO_Init+0x2f8>
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	48001000 	.word	0x48001000
 8000760:	48001400 	.word	0x48001400
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400
 800076c:	48000c00 	.word	0x48000c00
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000772:	2308      	movs	r3, #8
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4853      	ldr	r0, [pc, #332]	; (80008cc <MX_GPIO_Init+0x454>)
 800077e:	f000 fe25 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000792:	230d      	movs	r3, #13
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	484c      	ldr	r0, [pc, #304]	; (80008d0 <MX_GPIO_Init+0x458>)
 800079e:	f000 fe15 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	4844      	ldr	r0, [pc, #272]	; (80008d0 <MX_GPIO_Init+0x458>)
 80007be:	f000 fe05 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007d4:	230c      	movs	r3, #12
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	483c      	ldr	r0, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x458>)
 80007e0:	f000 fdf4 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80007e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007f6:	230a      	movs	r3, #10
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 fde2 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fdd4 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000824:	2301      	movs	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000834:	2309      	movs	r3, #9
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4825      	ldr	r0, [pc, #148]	; (80008d4 <MX_GPIO_Init+0x45c>)
 8000840:	f000 fdc4 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000844:	2304      	movs	r3, #4
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000854:	230c      	movs	r3, #12
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	481d      	ldr	r0, [pc, #116]	; (80008d4 <MX_GPIO_Init+0x45c>)
 8000860:	f000 fdb4 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000864:	2378      	movs	r3, #120	; 0x78
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000874:	2307      	movs	r3, #7
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	4815      	ldr	r0, [pc, #84]	; (80008d4 <MX_GPIO_Init+0x45c>)
 8000880:	f000 fda4 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000884:	2338      	movs	r3, #56	; 0x38
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000894:	2306      	movs	r3, #6
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_GPIO_Init+0x460>)
 80008a0:	f000 fd94 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a4:	2301      	movs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008b4:	2302      	movs	r3, #2
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_GPIO_Init+0x464>)
 80008c0:	f000 fd84 	bl	80013cc <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3738      	adds	r7, #56	; 0x38
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	48001800 	.word	0x48001800
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48000c00 	.word	0x48000c00
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48001000 	.word	0x48001000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008f2:	f000 fa21 	bl	8000d38 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008fa:	2201      	movs	r2, #1
 80008fc:	2178      	movs	r1, #120	; 0x78
 80008fe:	485b      	ldr	r0, [pc, #364]	; (8000a6c <SSD1306_Init+0x180>)
 8000900:	f001 f87a 	bl	80019f8 <HAL_I2C_IsDeviceReady>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800090a:	2300      	movs	r3, #0
 800090c:	e0a9      	b.n	8000a62 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800090e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000912:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000914:	e002      	b.n	800091c <SSD1306_Init+0x30>
		p--;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3b01      	subs	r3, #1
 800091a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f9      	bne.n	8000916 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000922:	22ae      	movs	r2, #174	; 0xae
 8000924:	2100      	movs	r1, #0
 8000926:	2078      	movs	r0, #120	; 0x78
 8000928:	f000 fa82 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800092c:	2220      	movs	r2, #32
 800092e:	2100      	movs	r1, #0
 8000930:	2078      	movs	r0, #120	; 0x78
 8000932:	f000 fa7d 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000936:	2210      	movs	r2, #16
 8000938:	2100      	movs	r1, #0
 800093a:	2078      	movs	r0, #120	; 0x78
 800093c:	f000 fa78 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000940:	22b0      	movs	r2, #176	; 0xb0
 8000942:	2100      	movs	r1, #0
 8000944:	2078      	movs	r0, #120	; 0x78
 8000946:	f000 fa73 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800094a:	22c8      	movs	r2, #200	; 0xc8
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	; 0x78
 8000950:	f000 fa6e 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	; 0x78
 800095a:	f000 fa69 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800095e:	2210      	movs	r2, #16
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	; 0x78
 8000964:	f000 fa64 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000968:	2240      	movs	r2, #64	; 0x40
 800096a:	2100      	movs	r1, #0
 800096c:	2078      	movs	r0, #120	; 0x78
 800096e:	f000 fa5f 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000972:	2281      	movs	r2, #129	; 0x81
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	; 0x78
 8000978:	f000 fa5a 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	; 0x78
 8000982:	f000 fa55 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000986:	22a1      	movs	r2, #161	; 0xa1
 8000988:	2100      	movs	r1, #0
 800098a:	2078      	movs	r0, #120	; 0x78
 800098c:	f000 fa50 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000990:	22a6      	movs	r2, #166	; 0xa6
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	; 0x78
 8000996:	f000 fa4b 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1:32)
 800099a:	22a8      	movs	r2, #168	; 0xa8
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	; 0x78
 80009a0:	f000 fa46 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 80009a4:	221f      	movs	r2, #31
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	; 0x78
 80009aa:	f000 fa41 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009ae:	22a4      	movs	r2, #164	; 0xa4
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	; 0x78
 80009b4:	f000 fa3c 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009b8:	22d3      	movs	r2, #211	; 0xd3
 80009ba:	2100      	movs	r1, #0
 80009bc:	2078      	movs	r0, #120	; 0x78
 80009be:	f000 fa37 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-no offset
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2078      	movs	r0, #120	; 0x78
 80009c8:	f000 fa32 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009cc:	22d5      	movs	r2, #213	; 0xd5
 80009ce:	2100      	movs	r1, #0
 80009d0:	2078      	movs	r0, #120	; 0x78
 80009d2:	f000 fa2d 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009d6:	22f0      	movs	r2, #240	; 0xf0
 80009d8:	2100      	movs	r1, #0
 80009da:	2078      	movs	r0, #120	; 0x78
 80009dc:	f000 fa28 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009e0:	22d9      	movs	r2, #217	; 0xd9
 80009e2:	2100      	movs	r1, #0
 80009e4:	2078      	movs	r0, #120	; 0x78
 80009e6:	f000 fa23 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009ea:	2222      	movs	r2, #34	; 0x22
 80009ec:	2100      	movs	r1, #0
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f000 fa1e 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009f4:	22da      	movs	r2, #218	; 0xda
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	; 0x78
 80009fa:	f000 fa19 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009fe:	2212      	movs	r2, #18
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	; 0x78
 8000a04:	f000 fa14 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a08:	22db      	movs	r2, #219	; 0xdb
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	; 0x78
 8000a0e:	f000 fa0f 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 fa0a 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a1c:	228d      	movs	r2, #141	; 0x8d
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	; 0x78
 8000a22:	f000 fa05 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a26:	2214      	movs	r2, #20
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f000 fa00 	bl	8000e30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a30:	22af      	movs	r2, #175	; 0xaf
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	; 0x78
 8000a36:	f000 f9fb 	bl	8000e30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a3a:	222e      	movs	r2, #46	; 0x2e
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2078      	movs	r0, #120	; 0x78
 8000a40:	f000 f9f6 	bl	8000e30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 f843 	bl	8000ad0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a4a:	f000 f813 	bl	8000a74 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SSD1306_Init+0x184>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SSD1306_Init+0x184>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SSD1306_Init+0x184>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000004c 	.word	0x2000004c
 8000a70:	20000304 	.word	0x20000304

08000a74 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e01d      	b.n	8000abc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	3b50      	subs	r3, #80	; 0x50
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	; 0x78
 8000a8c:	f000 f9d0 	bl	8000e30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f000 f9cb 	bl	8000e30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	; 0x78
 8000aa0:	f000 f9c6 	bl	8000e30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	01db      	lsls	r3, r3, #7
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <SSD1306_UpdateScreen+0x58>)
 8000aaa:	441a      	add	r2, r3
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	2078      	movs	r0, #120	; 0x78
 8000ab2:	f000 f957 	bl	8000d64 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d9de      	bls.n	8000a80 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000104 	.word	0x20000104

08000ad0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <SSD1306_Fill+0x14>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e000      	b.n	8000ae6 <SSD1306_Fill+0x16>
 8000ae4:	23ff      	movs	r3, #255	; 0xff
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	4619      	mov	r1, r3
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <SSD1306_Fill+0x2c>)
 8000aee:	f004 ff71 	bl	80059d4 <memset>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000104 	.word	0x20000104

08000b00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	80bb      	strh	r3, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	70fb      	strb	r3, [r7, #3]
	if (
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	2b7f      	cmp	r3, #127	; 0x7f
 8000b16:	d848      	bhi.n	8000baa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	2b1f      	cmp	r3, #31
 8000b1c:	d845      	bhi.n	8000baa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <SSD1306_DrawPixel+0xb8>)
 8000b20:	791b      	ldrb	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d11a      	bne.n	8000b70 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b3a:	88fa      	ldrh	r2, [r7, #6]
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	b298      	uxth	r0, r3
 8000b42:	4603      	mov	r3, r0
 8000b44:	01db      	lsls	r3, r3, #7
 8000b46:	4413      	add	r3, r2
 8000b48:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <SSD1306_DrawPixel+0xbc>)
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	b25a      	sxtb	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	2101      	movs	r1, #1
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b259      	sxtb	r1, r3
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	4603      	mov	r3, r0
 8000b64:	01db      	lsls	r3, r3, #7
 8000b66:	4413      	add	r3, r2
 8000b68:	b2c9      	uxtb	r1, r1
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <SSD1306_DrawPixel+0xbc>)
 8000b6c:	54d1      	strb	r1, [r2, r3]
 8000b6e:	e01d      	b.n	8000bac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	b298      	uxth	r0, r3
 8000b78:	4603      	mov	r3, r0
 8000b7a:	01db      	lsls	r3, r3, #7
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <SSD1306_DrawPixel+0xbc>)
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	b25a      	sxtb	r2, r3
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4013      	ands	r3, r2
 8000b98:	b259      	sxtb	r1, r3
 8000b9a:	88fa      	ldrh	r2, [r7, #6]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	01db      	lsls	r3, r3, #7
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SSD1306_DrawPixel+0xbc>)
 8000ba6:	54d1      	strb	r1, [r2, r3]
 8000ba8:	e000      	b.n	8000bac <SSD1306_DrawPixel+0xac>
		return;
 8000baa:	bf00      	nop
	}
}
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000304 	.word	0x20000304
 8000bbc:	20000104 	.word	0x20000104

08000bc0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SSD1306_GotoXY+0x28>)
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <SSD1306_GotoXY+0x28>)
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	8053      	strh	r3, [r2, #2]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20000304 	.word	0x20000304

08000bec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
	if (
 8000c08:	2b7f      	cmp	r3, #127	; 0x7f
 8000c0a:	dc07      	bgt.n	8000c1c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000c0e:	885b      	ldrh	r3, [r3, #2]
 8000c10:	461a      	mov	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	dd01      	ble.n	8000c20 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e05e      	b.n	8000cde <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e04b      	b.n	8000cbe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3b20      	subs	r3, #32
 8000c2e:	6839      	ldr	r1, [r7, #0]
 8000c30:	7849      	ldrb	r1, [r1, #1]
 8000c32:	fb01 f303 	mul.w	r3, r1, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	e030      	b.n	8000cac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d010      	beq.n	8000c7c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4413      	add	r3, r2
 8000c64:	b298      	uxth	r0, r3
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000c68:	885a      	ldrh	r2, [r3, #2]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f7ff ff43 	bl	8000b00 <SSD1306_DrawPixel>
 8000c7a:	e014      	b.n	8000ca6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4413      	add	r3, r2
 8000c86:	b298      	uxth	r0, r3
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000c8a:	885a      	ldrh	r2, [r3, #2]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	b299      	uxth	r1, r3
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf0c      	ite	eq
 8000c9a:	2301      	moveq	r3, #1
 8000c9c:	2300      	movne	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f7ff ff2d 	bl	8000b00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d3c8      	bcc.n	8000c4a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d3ad      	bcc.n	8000c26 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <SSD1306_Putc+0xfc>)
 8000cda:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000304 	.word	0x20000304

08000cec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cfa:	e012      	b.n	8000d22 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff71 	bl	8000bec <SSD1306_Putc>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d002      	beq.n	8000d1c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	e008      	b.n	8000d2e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1e8      	bne.n	8000cfc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <ssd1306_I2C_Init+0x28>)
 8000d40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d42:	e002      	b.n	8000d4a <ssd1306_I2C_Init+0x12>
		p--;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f9      	bne.n	8000d44 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	0003d090 	.word	0x0003d090

08000d64 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b0c7      	sub	sp, #284	; 0x11c
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d72:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d76:	600a      	str	r2, [r1, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d7e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d82:	4622      	mov	r2, r4
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d8a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d8e:	4602      	mov	r2, r0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000da6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000daa:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000db8:	e015      	b.n	8000de6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000dba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dbe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dc2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	441a      	add	r2, r3
 8000dca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dce:	3301      	adds	r3, #1
 8000dd0:	7811      	ldrb	r1, [r2, #0]
 8000dd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dd6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000dda:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ddc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000de0:	3301      	adds	r3, #1
 8000de2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000de6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000df0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d8df      	bhi.n	8000dba <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dfe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b299      	uxth	r1, r3
 8000e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	200a      	movs	r0, #10
 8000e1a:	9000      	str	r0, [sp, #0]
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <ssd1306_I2C_WriteMulti+0xc8>)
 8000e1e:	f000 fcf7 	bl	8001810 <HAL_I2C_Master_Transmit>
}
 8000e22:	bf00      	nop
 8000e24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	2000004c 	.word	0x2000004c

08000e30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	b299      	uxth	r1, r3
 8000e4e:	f107 020c 	add.w	r2, r7, #12
 8000e52:	230a      	movs	r3, #10
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2302      	movs	r3, #2
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <ssd1306_I2C_Write+0x38>)
 8000e5a:	f000 fcd9 	bl	8001810 <HAL_I2C_Master_Transmit>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000004c 	.word	0x2000004c

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ae      	sub	sp, #184	; 0xb8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2294      	movs	r2, #148	; 0x94
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 fd7d 	bl	80059d4 <memset>
  if(hi2c->Instance==I2C1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <HAL_I2C_MspInit+0xc0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d143      	bne.n	8000f6c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ee4:	2340      	movs	r3, #64	; 0x40
 8000ee6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 f8b3 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff fcf0 	bl	80008e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f32:	2304      	movs	r3, #4
 8000f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f40:	f000 fa44 	bl	80013cc <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB8);
 8000f44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f48:	f001 f8f4 	bl	8002134 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB9);
 8000f4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f50:	f001 f8f0 	bl	8002134 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	37b8      	adds	r7, #184	; 0xb8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400

08000f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_SPI_MspInit+0x7c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d128      	bne.n	8000ff4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_SPI_MspInit+0x80>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_SPI_MspInit+0x80>)
 8000fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fac:	6613      	str	r3, [r2, #96]	; 0x60
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_SPI_MspInit+0x80>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_SPI_MspInit+0x80>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_SPI_MspInit+0x80>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fd2:	23f0      	movs	r3, #240	; 0xf0
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f000 f9ec 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40013000 	.word	0x40013000
 8001000:	40021000 	.word	0x40021000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f892 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fc6f 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff f8a5 	bl	80001fc <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80010c0:	08007008 	.word	0x08007008
  ldr r2, =_sbss
 80010c4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80010c8:	2000034c 	.word	0x2000034c

080010cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_IRQHandler>

080010ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f943 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f80e 	bl	8001100 <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	e001      	b.n	80010f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f0:	f7ff febc 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_InitTick+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d023      	beq.n	800115c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_InitTick+0x70>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_InitTick+0x6c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f941 	bl	80013b2 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10f      	bne.n	8001156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d809      	bhi.n	8001150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f919 	bl	800137a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_InitTick+0x74>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e007      	b.n	8001160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e004      	b.n	8001160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e001      	b.n	8001160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000018 	.word	0x20000018
 8001170:	20000010 	.word	0x20000010
 8001174:	20000014 	.word	0x20000014

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000018 	.word	0x20000018
 800119c:	2000030c 	.word	0x2000030c

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000030c 	.word	0x2000030c

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff47 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff5c 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffb0 	bl	8001320 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	e166      	b.n	80016aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8158 	beq.w	80016a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d005      	beq.n	800140c <HAL_GPIO_Init+0x40>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d130      	bne.n	800146e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001442:	2201      	movs	r2, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	f003 0201 	and.w	r2, r3, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b03      	cmp	r3, #3
 8001478:	d017      	beq.n	80014aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d123      	bne.n	80014fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	6939      	ldr	r1, [r7, #16]
 80014fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0203 	and.w	r2, r3, #3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80b2 	beq.w	80016a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_GPIO_Init+0x2fc>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	4a60      	ldr	r2, [pc, #384]	; (80016c8 <HAL_GPIO_Init+0x2fc>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6613      	str	r3, [r2, #96]	; 0x60
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_GPIO_Init+0x2fc>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001558:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_GPIO_Init+0x300>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001582:	d02b      	beq.n	80015dc <HAL_GPIO_Init+0x210>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d025      	beq.n	80015d8 <HAL_GPIO_Init+0x20c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_GPIO_Init+0x308>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d01f      	beq.n	80015d4 <HAL_GPIO_Init+0x208>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a50      	ldr	r2, [pc, #320]	; (80016d8 <HAL_GPIO_Init+0x30c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d019      	beq.n	80015d0 <HAL_GPIO_Init+0x204>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <HAL_GPIO_Init+0x310>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d013      	beq.n	80015cc <HAL_GPIO_Init+0x200>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a4e      	ldr	r2, [pc, #312]	; (80016e0 <HAL_GPIO_Init+0x314>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00d      	beq.n	80015c8 <HAL_GPIO_Init+0x1fc>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a4d      	ldr	r2, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x318>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_Init+0x1f8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <HAL_GPIO_Init+0x31c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d101      	bne.n	80015c0 <HAL_GPIO_Init+0x1f4>
 80015bc:	2307      	movs	r3, #7
 80015be:	e00e      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015c0:	2308      	movs	r3, #8
 80015c2:	e00c      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015c4:	2306      	movs	r3, #6
 80015c6:	e00a      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015c8:	2305      	movs	r3, #5
 80015ca:	e008      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015cc:	2304      	movs	r3, #4
 80015ce:	e006      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e004      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_GPIO_Init+0x212>
 80015dc:	2300      	movs	r3, #0
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ee:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_GPIO_Init+0x300>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_GPIO_Init+0x320>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001620:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_GPIO_Init+0x320>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_GPIO_Init+0x320>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164a:	4a28      	ldr	r2, [pc, #160]	; (80016ec <HAL_GPIO_Init+0x320>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_GPIO_Init+0x320>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_GPIO_Init+0x320>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_GPIO_Init+0x320>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <HAL_GPIO_Init+0x320>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f47f ae91 	bne.w	80013dc <HAL_GPIO_Init+0x10>
  }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	48000400 	.word	0x48000400
 80016d4:	48000800 	.word	0x48000800
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	48001000 	.word	0x48001000
 80016e0:	48001400 	.word	0x48001400
 80016e4:	48001800 	.word	0x48001800
 80016e8:	48001c00 	.word	0x48001c00
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e081      	b.n	8001806 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fbcc 	bl	8000eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	; 0x24
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001740:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001750:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e006      	b.n	8001778 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001776:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d104      	bne.n	800178a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001788:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69d9      	ldr	r1, [r3, #28]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	460b      	mov	r3, r1
 800181e:	817b      	strh	r3, [r7, #10]
 8001820:	4613      	mov	r3, r2
 8001822:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b20      	cmp	r3, #32
 800182e:	f040 80da 	bne.w	80019e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Master_Transmit+0x30>
 800183c:	2302      	movs	r3, #2
 800183e:	e0d3      	b.n	80019e8 <HAL_I2C_Master_Transmit+0x1d8>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001848:	f7ff fcaa 	bl	80011a0 <HAL_GetTick>
 800184c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2319      	movs	r3, #25
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9f7 	bl	8001c4e <I2C_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0be      	b.n	80019e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2221      	movs	r2, #33	; 0x21
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2210      	movs	r2, #16
 8001876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2bff      	cmp	r3, #255	; 0xff
 800189a:	d90e      	bls.n	80018ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fb74 	bl	8001fa0 <I2C_TransferConfig>
 80018b8:	e06c      	b.n	8001994 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	8979      	ldrh	r1, [r7, #10]
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fb63 	bl	8001fa0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018da:	e05b      	b.n	8001994 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	6a39      	ldr	r1, [r7, #32]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f9f4 	bl	8001cce <I2C_WaitOnTXISFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e07b      	b.n	80019e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d034      	beq.n	8001994 <HAL_I2C_Master_Transmit+0x184>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	d130      	bne.n	8001994 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	2200      	movs	r2, #0
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f986 	bl	8001c4e <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e04d      	b.n	80019e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	d90e      	bls.n	8001974 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	22ff      	movs	r2, #255	; 0xff
 800195a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	b2da      	uxtb	r2, r3
 8001962:	8979      	ldrh	r1, [r7, #10]
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 fb17 	bl	8001fa0 <I2C_TransferConfig>
 8001972:	e00f      	b.n	8001994 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	b2da      	uxtb	r2, r3
 8001984:	8979      	ldrh	r1, [r7, #10]
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fb06 	bl	8001fa0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d19e      	bne.n	80018dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f9d3 	bl	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e01a      	b.n	80019e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2220      	movs	r2, #32
 80019b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80019c6:	400b      	ands	r3, r1
 80019c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	80002000 	.word	0x80002000
 80019f4:	fe00e800 	.word	0xfe00e800

080019f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	460b      	mov	r3, r1
 8001a06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b20      	cmp	r3, #32
 8001a16:	f040 80f1 	bne.w	8001bfc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e0e7      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2C_IsDeviceReady+0x44>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e0e0      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_IsDeviceReady+0x72>
 8001a5a:	897b      	ldrh	r3, [r7, #10]
 8001a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a68:	e004      	b.n	8001a74 <HAL_I2C_IsDeviceReady+0x7c>
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a70:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb91 	bl	80011a0 <HAL_GetTick>
 8001a7e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	bf0c      	ite	eq
 8001a8e:	2301      	moveq	r3, #1
 8001a90:	2300      	movne	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001aac:	e034      	b.n	8001b18 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d01a      	beq.n	8001aec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ab6:	f7ff fb73 	bl	80011a0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <HAL_I2C_IsDeviceReady+0xd4>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10f      	bne.n	8001aec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e088      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_I2C_IsDeviceReady+0x12c>
 8001b1e:	7fbb      	ldrb	r3, [r7, #30]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0c4      	beq.n	8001aae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d01a      	beq.n	8001b68 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f886 	bl	8001c4e <I2C_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e058      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2220      	movs	r2, #32
 8001b52:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e04a      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f86b 	bl	8001c4e <I2C_WaitOnFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e03d      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2210      	movs	r2, #16
 8001b88:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d118      	bne.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ba8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f84a 	bl	8001c4e <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e01c      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	f63f af3b 	bhi.w	8001a52 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d103      	bne.n	8001c24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d007      	beq.n	8001c42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	619a      	str	r2, [r3, #24]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c5e:	e022      	b.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c66:	d01e      	beq.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c68:	f7ff fa9a 	bl	80011a0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d302      	bcc.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d113      	bne.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0220 	orr.w	r2, r3, #32
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d0cd      	beq.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cda:	e02c      	b.n	8001d36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f871 	bl	8001dc8 <I2C_IsErrorOccurred>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e02a      	b.n	8001d46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d01e      	beq.n	8001d36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7ff fa52 	bl	80011a0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d302      	bcc.n	8001d0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d113      	bne.n	8001d36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f043 0220 	orr.w	r2, r3, #32
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e007      	b.n	8001d46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d1cb      	bne.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5a:	e028      	b.n	8001dae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f831 	bl	8001dc8 <I2C_IsErrorOccurred>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e026      	b.n	8001dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d70:	f7ff fa16 	bl	80011a0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d302      	bcc.n	8001d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d113      	bne.n	8001dae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f043 0220 	orr.w	r2, r3, #32
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d1cf      	bne.n	8001d5c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d075      	beq.n	8001ee0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dfc:	e056      	b.n	8001eac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d052      	beq.n	8001eac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f9cb 	bl	80011a0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_IsErrorOccurred+0x54>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d147      	bne.n	8001eac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3e:	d12e      	bne.n	8001e9e <I2C_IsErrorOccurred+0xd6>
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e46:	d02a      	beq.n	8001e9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d027      	beq.n	8001e9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e5e:	f7ff f99f 	bl	80011a0 <HAL_GetTick>
 8001e62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e64:	e01b      	b.n	8001e9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e66:	f7ff f99b 	bl	80011a0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b19      	cmp	r3, #25
 8001e72:	d914      	bls.n	8001e9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f043 0220 	orr.w	r2, r3, #32
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d1dc      	bne.n	8001e66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d003      	beq.n	8001ec2 <I2C_IsErrorOccurred+0xfa>
 8001eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d09d      	beq.n	8001dfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01c      	beq.n	8001f90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fe55 	bl	8001c06 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <I2C_IsErrorOccurred+0x1d4>)
 8001f68:	400b      	ands	r3, r1
 8001f6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	fe00e800 	.word	0xfe00e800

08001fa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	817b      	strh	r3, [r7, #10]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fb8:	7a7b      	ldrb	r3, [r7, #9]
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	0d5b      	lsrs	r3, r3, #21
 8001fda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <I2C_TransferConfig+0x60>)
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	ea02 0103 	and.w	r1, r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	03ff63ff 	.word	0x03ff63ff

08002004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	d138      	bne.n	800208c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002024:	2302      	movs	r3, #2
 8002026:	e032      	b.n	800208e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d139      	bne.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e033      	b.n	8002126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2224      	movs	r2, #36	; 0x24
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6613      	str	r3, [r2, #96]	; 0x60
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800214a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4905      	ldr	r1, [pc, #20]	; (8002170 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000

08002174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002184:	d102      	bne.n	800218c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800218a:	e00b      	b.n	80021a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800218e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219a:	d102      	bne.n	80021a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800219c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a0:	e000      	b.n	80021a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40007000 	.word	0x40007000

080021b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d141      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	d131      	bne.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d0:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d6:	4a46      	ldr	r2, [pc, #280]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e0:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e8:	4a41      	ldr	r2, [pc, #260]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021f0:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2232      	movs	r2, #50	; 0x32
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002206:	e002      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3b01      	subs	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d102      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f2      	bne.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d158      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e057      	b.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002244:	e04d      	b.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224c:	d141      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225a:	d131      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002274:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2232      	movs	r2, #50	; 0x32
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9b      	lsrs	r3, r3, #18
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	e002      	b.n	800229a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b01      	subs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d102      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f2      	bne.n	8002294 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ba:	d112      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e011      	b.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022d0:	e007      	b.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40007000 	.word	0x40007000
 80022f4:	20000010 	.word	0x20000010
 80022f8:	431bde83 	.word	0x431bde83

080022fc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6053      	str	r3, [r2, #4]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007000 	.word	0x40007000

0800231c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f000 bc08 	b.w	8002b40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002330:	4b96      	ldr	r3, [pc, #600]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233a:	4b94      	ldr	r3, [pc, #592]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80e4 	beq.w	800251a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_RCC_OscConfig+0x4c>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	f040 808b 	bne.w	8002476 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b01      	cmp	r3, #1
 8002364:	f040 8087 	bne.w	8002476 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002368:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_OscConfig+0x64>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e3df      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_RCC_OscConfig+0x7e>
 8002390:	4b7e      	ldr	r3, [pc, #504]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002398:	e005      	b.n	80023a6 <HAL_RCC_OscConfig+0x8a>
 800239a:	4b7c      	ldr	r3, [pc, #496]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d223      	bcs.n	80023f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd94 	bl	8002edc <RCC_SetFlashLatencyFromMSIRange>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e3c0      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023be:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b70      	ldr	r3, [pc, #448]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	496d      	ldr	r1, [pc, #436]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023dc:	4b6b      	ldr	r3, [pc, #428]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	4968      	ldr	r1, [pc, #416]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e025      	b.n	800243e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f2:	4b66      	ldr	r3, [pc, #408]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a65      	ldr	r2, [pc, #404]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b63      	ldr	r3, [pc, #396]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4960      	ldr	r1, [pc, #384]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002410:	4b5e      	ldr	r3, [pc, #376]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	495b      	ldr	r1, [pc, #364]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fd54 	bl	8002edc <RCC_SetFlashLatencyFromMSIRange>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e380      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243e:	f000 fcc1 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4950      	ldr	r1, [pc, #320]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a4e      	ldr	r2, [pc, #312]	; (8002594 <HAL_RCC_OscConfig+0x278>)
 800245c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800245e:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fe4c 	bl	8001100 <HAL_InitTick>
 8002468:	4603      	mov	r3, r0
 800246a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d052      	beq.n	8002518 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	e364      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d032      	beq.n	80024e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a42      	ldr	r2, [pc, #264]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800248a:	f7fe fe89 	bl	80011a0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002492:	f7fe fe85 	bl	80011a0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e34d      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a35      	ldr	r2, [pc, #212]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4930      	ldr	r1, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ce:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	492b      	ldr	r1, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
 80024e2:	e01a      	b.n	800251a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fe56 	bl	80011a0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f8:	f7fe fe52 	bl	80011a0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e31a      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1dc>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d073      	beq.n	800260e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x21c>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d10e      	bne.n	8002550 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d10b      	bne.n	8002550 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d063      	beq.n	800260c <HAL_RCC_OscConfig+0x2f0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d15f      	bne.n	800260c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e2f7      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x24c>
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e025      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002570:	d114      	bne.n	800259c <HAL_RCC_OscConfig+0x280>
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a02      	ldr	r2, [pc, #8]	; (800258c <HAL_RCC_OscConfig+0x270>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e013      	b.n	80025b4 <HAL_RCC_OscConfig+0x298>
 800258c:	40021000 	.word	0x40021000
 8002590:	08006f40 	.word	0x08006f40
 8002594:	20000010 	.word	0x20000010
 8002598:	20000014 	.word	0x20000014
 800259c:	4ba0      	ldr	r3, [pc, #640]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a9f      	ldr	r2, [pc, #636]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b9d      	ldr	r3, [pc, #628]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a9c      	ldr	r2, [pc, #624]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fdf0 	bl	80011a0 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fdec 	bl	80011a0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e2b4      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d6:	4b92      	ldr	r3, [pc, #584]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2a8>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fddc 	bl	80011a0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fdd8 	bl	80011a0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e2a0      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x2d0>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d060      	beq.n	80026dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x310>
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d119      	bne.n	800265a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d116      	bne.n	800265a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262c:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_OscConfig+0x328>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e27d      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	4973      	ldr	r1, [pc, #460]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002658:	e040      	b.n	80026dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d023      	beq.n	80026aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002662:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fd97 	bl	80011a0 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002676:	f7fe fd93 	bl	80011a0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e25b      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	495f      	ldr	r1, [pc, #380]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
 80026a8:	e018      	b.n	80026dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b5d      	ldr	r3, [pc, #372]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5c      	ldr	r2, [pc, #368]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80026b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fd73 	bl	80011a0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026be:	f7fe fd6f 	bl	80011a0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e237      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d03c      	beq.n	8002762 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01c      	beq.n	800272a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f0:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80026f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f6:	4a4a      	ldr	r2, [pc, #296]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fd4e 	bl	80011a0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe fd4a 	bl	80011a0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e212      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800271c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ef      	beq.n	8002708 <HAL_RCC_OscConfig+0x3ec>
 8002728:	e01b      	b.n	8002762 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800272c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002730:	4a3b      	ldr	r2, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fe fd31 	bl	80011a0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7fe fd2d 	bl	80011a0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1f5      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ef      	bne.n	8002742 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80a6 	beq.w	80028bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10d      	bne.n	800279c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	6593      	str	r3, [r2, #88]	; 0x58
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002798:	2301      	movs	r3, #1
 800279a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x508>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d118      	bne.n	80027da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x508>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x508>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fcf4 	bl	80011a0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe fcf0 	bl	80011a0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1b8      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x508>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4d8>
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f2:	e029      	b.n	8002848 <HAL_RCC_OscConfig+0x52c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d115      	bne.n	8002828 <HAL_RCC_OscConfig+0x50c>
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_RCC_OscConfig+0x504>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x52c>
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
 8002828:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	4a9c      	ldr	r2, [pc, #624]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a98      	ldr	r2, [pc, #608]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d016      	beq.n	800287e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fca6 	bl	80011a0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fca2 	bl	80011a0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e168      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286e:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ed      	beq.n	8002858 <HAL_RCC_OscConfig+0x53c>
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe fc8f 	bl	80011a0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fc8b 	bl	80011a0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e151      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ed      	bne.n	8002886 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028aa:	7ffb      	ldrb	r3, [r7, #31]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03c      	beq.n	8002942 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01c      	beq.n	800290a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d0:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80028d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028d6:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe fc5e 	bl	80011a0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e8:	f7fe fc5a 	bl	80011a0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e122      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028fa:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80028fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ef      	beq.n	80028e8 <HAL_RCC_OscConfig+0x5cc>
 8002908:	e01b      	b.n	8002942 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 800290c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002910:	4a63      	ldr	r2, [pc, #396]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fc41 	bl	80011a0 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002922:	f7fe fc3d 	bl	80011a0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e105      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ef      	bne.n	8002922 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80f9 	beq.w	8002b3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	2b02      	cmp	r3, #2
 8002952:	f040 80cf 	bne.w	8002af4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0203 	and.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	429a      	cmp	r2, r3
 8002968:	d12c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	3b01      	subs	r3, #1
 8002976:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d123      	bne.n	80029c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d11b      	bne.n	80029c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d113      	bne.n	80029c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	3b01      	subs	r3, #1
 80029aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d109      	bne.n	80029c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	3b01      	subs	r3, #1
 80029be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d071      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d068      	beq.n	8002a9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ca:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029d6:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0ac      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f2:	f7fe fbd5 	bl	80011a0 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7fe fbd1 	bl	80011a0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e099      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x788>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a32:	0212      	lsls	r2, r2, #8
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0552      	lsls	r2, r2, #21
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0652      	lsls	r2, r2, #25
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a52:	06d2      	lsls	r2, r2, #27
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4912      	ldr	r1, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a74:	f7fe fb94 	bl	80011a0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fb90 	bl	80011a0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e058      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_OscConfig+0x784>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9a:	e050      	b.n	8002b3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04f      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d144      	bne.n	8002b3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002acc:	f7fe fb68 	bl	80011a0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fb64 	bl	80011a0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e02c      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x7b8>
 8002af2:	e024      	b.n	8002b3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d01f      	beq.n	8002b3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fb4b 	bl	80011a0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fb47 	bl	80011a0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4905      	ldr	r1, [pc, #20]	; (8002b48 <HAL_RCC_OscConfig+0x82c>)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x830>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
 8002b38:	e001      	b.n	8002b3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	feeefffc 	.word	0xfeeefffc

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e11d      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b90      	ldr	r3, [pc, #576]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	498b      	ldr	r1, [pc, #556]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b89      	ldr	r3, [pc, #548]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e105      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d908      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	497b      	ldr	r1, [pc, #492]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d079      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d11e      	bne.n	8002c18 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	4b75      	ldr	r3, [pc, #468]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0dc      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bea:	f000 f9d1 	bl	8002f90 <RCC_GetSysClockFreqFromPLLSource>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_RCC_ClockConfig+0x264>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d946      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bf6:	4b6e      	ldr	r3, [pc, #440]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d140      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c02:	4b6b      	ldr	r3, [pc, #428]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c0a:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e035      	b.n	8002c84 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c20:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b9      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0ad      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0a5      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c58:	f000 f8b4 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_RCC_ClockConfig+0x264>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d90f      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c64:	4b52      	ldr	r3, [pc, #328]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c78:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c84:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 0203 	bic.w	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4947      	ldr	r1, [pc, #284]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c96:	f7fe fa83 	bl	80011a0 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9e:	f7fe fa7f 	bl	80011a0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e077      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 020c 	and.w	r2, r3, #12
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d1eb      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ccc:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a37      	ldr	r2, [pc, #220]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d010      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d208      	bcs.n	8002d06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	492b      	ldr	r1, [pc, #172]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d06:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d210      	bcs.n	8002d36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 020f 	bic.w	r2, r3, #15
 8002d1c:	4923      	ldr	r1, [pc, #140]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e036      	b.n	8002da4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4918      	ldr	r1, [pc, #96]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4910      	ldr	r1, [pc, #64]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d74:	f000 f826 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <HAL_RCC_ClockConfig+0x268>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_RCC_ClockConfig+0x26c>)
 8002d92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe f9b1 	bl	8001100 <HAL_InitTick>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	04c4b400 	.word	0x04c4b400
 8002db8:	08006f40 	.word	0x08006f40
 8002dbc:	20000010 	.word	0x20000010
 8002dc0:	20000014 	.word	0x20000014

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d121      	bne.n	8002e36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d11e      	bne.n	8002e36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e005      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e20:	4a2b      	ldr	r2, [pc, #172]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	e004      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d134      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d003      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0xac>
 8002e68:	e005      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	e005      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e72:	617b      	str	r3, [r7, #20]
      break;
 8002e74:	e002      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	617b      	str	r3, [r7, #20]
      break;
 8002e7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3301      	adds	r3, #1
 8002e88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	fb03 f202 	mul.w	r2, r3, r2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	0e5b      	lsrs	r3, r3, #25
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	3301      	adds	r3, #1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08006f50 	.word	0x08006f50
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	007a1200 	.word	0x007a1200

08002edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef4:	f7ff f93e 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002ef8:	6178      	str	r0, [r7, #20]
 8002efa:	e014      	b.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f14:	f7ff f92e 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002f18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d10b      	bne.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	d913      	bls.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2ba0      	cmp	r3, #160	; 0xa0
 8002f38:	d902      	bls.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e00d      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e00a      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b7f      	cmp	r3, #127	; 0x7f
 8002f4a:	d902      	bls.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e004      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b70      	cmp	r3, #112	; 0x70
 8002f56:	d101      	bne.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 020f 	bic.w	r2, r3, #15
 8002f64:	4909      	ldr	r1, [pc, #36]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40022000 	.word	0x40022000

08002f90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d00b      	beq.n	8002fbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d825      	bhi.n	8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d008      	beq.n	8002fc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d11f      	bne.n	8002ff8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fba:	613b      	str	r3, [r7, #16]
    break;
 8002fbc:	e01f      	b.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002fc0:	613b      	str	r3, [r7, #16]
    break;
 8002fc2:	e01c      	b.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e005      	b.n	8002fec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
    break;
 8002ff6:	e002      	b.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
    break;
 8002ffc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	3301      	adds	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	fb03 f202 	mul.w	r2, r3, r2
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0e5b      	lsrs	r3, r3, #25
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800303e:	683b      	ldr	r3, [r7, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200
 8003058:	08006f50 	.word	0x08006f50

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003064:	2300      	movs	r3, #0
 8003066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003068:	2300      	movs	r3, #0
 800306a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d040      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d02a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d825      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003084:	2b60      	cmp	r3, #96	; 0x60
 8003086:	d026      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d821      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d006      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d81d      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d010      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800309c:	e018      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a88      	ldr	r2, [pc, #544]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030aa:	e015      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fb02 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030bc:	e00c      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3320      	adds	r3, #32
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fbed 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ce:	e003      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	74fb      	strb	r3, [r7, #19]
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030de:	4b79      	ldr	r3, [pc, #484]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030e4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ec:	4975      	ldr	r1, [pc, #468]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030f4:	e001      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d047      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d030      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d82a      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800311a:	d02a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800311c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003120:	d824      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d81e      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d010      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003138:	e018      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800313a:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003146:	e015      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fab4 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003158:	e00c      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3320      	adds	r3, #32
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fb9f 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800316a:	e003      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	74fb      	strb	r3, [r7, #19]
      break;
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800317a:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	494e      	ldr	r1, [pc, #312]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003190:	e001      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 809f 	beq.w	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3a      	ldr	r2, [pc, #232]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e6:	f7fd ffdb 	bl	80011a0 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ec:	e009      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fd ffd7 	bl	80011a0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d15b      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01f      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d019      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800325e:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd ff96 	bl	80011a0 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003276:	e00b      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fd ff92 	bl	80011a0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d902      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	74fb      	strb	r3, [r7, #19]
            break;
 800328e:	e006      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ec      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10c      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	74bb      	strb	r3, [r7, #18]
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d0:	7c7b      	ldrb	r3, [r7, #17]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4ba0      	ldr	r3, [pc, #640]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a9f      	ldr	r2, [pc, #636]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ee:	4b9a      	ldr	r3, [pc, #616]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	4996      	ldr	r1, [pc, #600]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003310:	4b91      	ldr	r3, [pc, #580]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 020c 	bic.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	498e      	ldr	r1, [pc, #568]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003332:	4b89      	ldr	r3, [pc, #548]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	4985      	ldr	r1, [pc, #532]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003354:	4b80      	ldr	r3, [pc, #512]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003362:	497d      	ldr	r1, [pc, #500]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003376:	4b78      	ldr	r3, [pc, #480]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	4974      	ldr	r1, [pc, #464]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003398:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	496c      	ldr	r1, [pc, #432]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c8:	4963      	ldr	r1, [pc, #396]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033dc:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ea:	495b      	ldr	r1, [pc, #364]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fe:	4b56      	ldr	r3, [pc, #344]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	4952      	ldr	r1, [pc, #328]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003420:	4b4d      	ldr	r3, [pc, #308]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	494a      	ldr	r1, [pc, #296]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003442:	4b45      	ldr	r3, [pc, #276]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	4941      	ldr	r1, [pc, #260]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003464:	4b3c      	ldr	r3, [pc, #240]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	4939      	ldr	r1, [pc, #228]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d028      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003486:	4b34      	ldr	r3, [pc, #208]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003494:	4930      	ldr	r1, [pc, #192]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a6:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b0:	60d3      	str	r3, [r2, #12]
 80034b2:	e011      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f8f9 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d04d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ec:	d108      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034fe:	e012      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351e:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352e:	d106      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a08      	ldr	r2, [pc, #32]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
 800353c:	e020      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003546:	d109      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a02      	ldr	r2, [pc, #8]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	60d3      	str	r3, [r2, #12]
 8003554:	e014      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f8a5 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d028      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800358c:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359a:	4947      	ldr	r1, [pc, #284]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035aa:	d106      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
 80035b8:	e011      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c2:	d10c      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f876 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01e      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ea:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fa:	492f      	ldr	r1, [pc, #188]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f851 	bl	80036bc <RCCEx_PLLSAI1_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800363a:	f023 0204 	bic.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003644:	491c      	ldr	r1, [pc, #112]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800365e:	f023 0218 	bic.w	r2, r3, #24
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	4913      	ldr	r1, [pc, #76]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800367e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368c:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800369e:	d105      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ca:	4b72      	ldr	r3, [pc, #456]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036d6:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d103      	bne.n	80036ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d142      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e03f      	b.n	8003774 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d018      	beq.n	800372e <RCCEx_PLLSAI1_Config+0x72>
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d825      	bhi.n	800374c <RCCEx_PLLSAI1_Config+0x90>
 8003700:	2b01      	cmp	r3, #1
 8003702:	d002      	beq.n	800370a <RCCEx_PLLSAI1_Config+0x4e>
 8003704:	2b02      	cmp	r3, #2
 8003706:	d009      	beq.n	800371c <RCCEx_PLLSAI1_Config+0x60>
 8003708:	e020      	b.n	800374c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800370a:	4b62      	ldr	r3, [pc, #392]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11d      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371a:	e01a      	b.n	8003752 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800371c:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e013      	b.n	8003756 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800372e:	4b59      	ldr	r3, [pc, #356]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800374a:	e006      	b.n	800375a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e004      	b.n	800375c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800375a:	bf00      	nop
    }

    if(status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003762:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4949      	ldr	r1, [pc, #292]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 8086 	bne.w	8003888 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800377c:	4b45      	ldr	r3, [pc, #276]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a44      	ldr	r2, [pc, #272]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003788:	f7fd fd0a 	bl	80011a0 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378e:	e009      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003790:	f7fd fd06 	bl	80011a0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	73fb      	strb	r3, [r7, #15]
        break;
 80037a2:	e005      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ef      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d168      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d113      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	06d2      	lsls	r2, r2, #27
 80037d0:	4311      	orrs	r1, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6852      	ldr	r2, [r2, #4]
 80037d6:	3a01      	subs	r2, #1
 80037d8:	0112      	lsls	r2, r2, #4
 80037da:	430a      	orrs	r2, r1
 80037dc:	492d      	ldr	r1, [pc, #180]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	610b      	str	r3, [r1, #16]
 80037e2:	e02d      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d115      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ea:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	4b2b      	ldr	r3, [pc, #172]	; (800389c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	0211      	lsls	r1, r2, #8
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6912      	ldr	r2, [r2, #16]
 80037fc:	0852      	lsrs	r2, r2, #1
 80037fe:	3a01      	subs	r2, #1
 8003800:	0552      	lsls	r2, r2, #21
 8003802:	4311      	orrs	r1, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6852      	ldr	r2, [r2, #4]
 8003808:	3a01      	subs	r2, #1
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	430a      	orrs	r2, r1
 800380e:	4921      	ldr	r1, [pc, #132]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	610b      	str	r3, [r1, #16]
 8003814:	e014      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	0211      	lsls	r1, r2, #8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6952      	ldr	r2, [r2, #20]
 8003828:	0852      	lsrs	r2, r2, #1
 800382a:	3a01      	subs	r2, #1
 800382c:	0652      	lsls	r2, r2, #25
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6852      	ldr	r2, [r2, #4]
 8003834:	3a01      	subs	r2, #1
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	430a      	orrs	r2, r1
 800383a:	4916      	ldr	r1, [pc, #88]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fca8 	bl	80011a0 <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003854:	f7fd fca4 	bl	80011a0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
          break;
 8003866:	e005      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	4904      	ldr	r1, [pc, #16]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	07ff800f 	.word	0x07ff800f
 800389c:	ff9f800f 	.word	0xff9f800f
 80038a0:	f9ff800f 	.word	0xf9ff800f

080038a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00e      	beq.n	80038dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038be:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d103      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d142      	bne.n	800395c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e03f      	b.n	800395c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d018      	beq.n	8003916 <RCCEx_PLLSAI2_Config+0x72>
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d825      	bhi.n	8003934 <RCCEx_PLLSAI2_Config+0x90>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d002      	beq.n	80038f2 <RCCEx_PLLSAI2_Config+0x4e>
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d009      	beq.n	8003904 <RCCEx_PLLSAI2_Config+0x60>
 80038f0:	e020      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038f2:	4b62      	ldr	r3, [pc, #392]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11d      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003902:	e01a      	b.n	800393a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003904:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003914:	e013      	b.n	800393e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003922:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003932:	e006      	b.n	8003942 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e004      	b.n	8003944 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800393a:	bf00      	nop
 800393c:	e002      	b.n	8003944 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003942:	bf00      	nop
    }

    if(status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4949      	ldr	r1, [pc, #292]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 8086 	bne.w	8003a70 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003964:	4b45      	ldr	r3, [pc, #276]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a44      	ldr	r2, [pc, #272]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fc16 	bl	80011a0 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003976:	e009      	b.n	800398c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003978:	f7fd fc12 	bl	80011a0 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d902      	bls.n	800398c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	73fb      	strb	r3, [r7, #15]
        break;
 800398a:	e005      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ef      	bne.n	8003978 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d168      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d113      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1dc>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	0211      	lsls	r1, r2, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	06d2      	lsls	r2, r2, #27
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6852      	ldr	r2, [r2, #4]
 80039be:	3a01      	subs	r2, #1
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	430a      	orrs	r2, r1
 80039c4:	492d      	ldr	r1, [pc, #180]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	614b      	str	r3, [r1, #20]
 80039ca:	e02d      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d115      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1e0>)
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	0211      	lsls	r1, r2, #8
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6912      	ldr	r2, [r2, #16]
 80039e4:	0852      	lsrs	r2, r2, #1
 80039e6:	3a01      	subs	r2, #1
 80039e8:	0552      	lsls	r2, r2, #21
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6852      	ldr	r2, [r2, #4]
 80039f0:	3a01      	subs	r2, #1
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	430a      	orrs	r2, r1
 80039f6:	4921      	ldr	r1, [pc, #132]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	614b      	str	r3, [r1, #20]
 80039fc:	e014      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6892      	ldr	r2, [r2, #8]
 8003a0a:	0211      	lsls	r1, r2, #8
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6952      	ldr	r2, [r2, #20]
 8003a10:	0852      	lsrs	r2, r2, #1
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0652      	lsls	r2, r2, #25
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6852      	ldr	r2, [r2, #4]
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	430a      	orrs	r2, r1
 8003a22:	4916      	ldr	r1, [pc, #88]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd fbb4 	bl	80011a0 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a3c:	f7fd fbb0 	bl	80011a0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ef      	beq.n	8003a3c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	4904      	ldr	r1, [pc, #16]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	07ff800f 	.word	0x07ff800f
 8003a84:	ff9f800f 	.word	0xff9f800f
 8003a88:	f9ff800f 	.word	0xf9ff800f

08003a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e095      	b.n	8003bca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aae:	d009      	beq.n	8003ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
 8003ab6:	e005      	b.n	8003ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd fa4e 	bl	8000f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b04:	d902      	bls.n	8003b0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e002      	b.n	8003b12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b1a:	d007      	beq.n	8003b2c <HAL_SPI_Init+0xa0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	ea42 0103 	orr.w	r1, r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	f003 0204 	and.w	r2, r3, #4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003bd8:	4904      	ldr	r1, [pc, #16]	; (8003bec <MX_FATFS_Init+0x18>)
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <MX_FATFS_Init+0x1c>)
 8003bdc:	f001 fec6 	bl	800596c <FATFS_LinkDriver>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <MX_FATFS_Init+0x20>)
 8003be6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000314 	.word	0x20000314
 8003bf0:	2000001c 	.word	0x2000001c
 8003bf4:	20000310 	.word	0x20000310

08003bf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003bfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <USER_initialize+0x24>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <USER_initialize+0x24>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000019 	.word	0x20000019

08003c30 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <USER_status+0x24>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <USER_status+0x24>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000019 	.word	0x20000019

08003c58 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003c68:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	4603      	mov	r3, r0
 8003c84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003c86:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	603a      	str	r2, [r7, #0]
 8003c9e:	71fb      	strb	r3, [r7, #7]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
    return res;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <disk_status+0x30>)
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	79fa      	ldrb	r2, [r7, #7]
 8003cd0:	4905      	ldr	r1, [pc, #20]	; (8003ce8 <disk_status+0x30>)
 8003cd2:	440a      	add	r2, r1
 8003cd4:	7a12      	ldrb	r2, [r2, #8]
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4798      	blx	r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000340 	.word	0x20000340

08003cec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <disk_initialize+0x48>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <disk_initialize+0x48>)
 8003d08:	2101      	movs	r1, #1
 8003d0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <disk_initialize+0x48>)
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	79fa      	ldrb	r2, [r7, #7]
 8003d1a:	4906      	ldr	r1, [pc, #24]	; (8003d34 <disk_initialize+0x48>)
 8003d1c:	440a      	add	r2, r1
 8003d1e:	7a12      	ldrb	r2, [r2, #8]
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000340 	.word	0x20000340

08003d38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <disk_read+0x3c>)
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	689c      	ldr	r4, [r3, #8]
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <disk_read+0x3c>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	7a18      	ldrb	r0, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	47a0      	blx	r4
 8003d64:	4603      	mov	r3, r0
 8003d66:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd90      	pop	{r4, r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000340 	.word	0x20000340

08003d78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <disk_write+0x3c>)
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68dc      	ldr	r4, [r3, #12]
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <disk_write+0x3c>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	7a18      	ldrb	r0, [r3, #8]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	47a0      	blx	r4
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd90      	pop	{r4, r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000340 	.word	0x20000340

08003db8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	b21a      	sxth	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b21b      	sxth	r3, r3
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b21b      	sxth	r3, r3
 8003dd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003dda:	89fb      	ldrh	r3, [r7, #14]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3303      	adds	r3, #3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	3202      	adds	r2, #2
 8003e00:	7812      	ldrb	r2, [r2, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	3201      	adds	r2, #1
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	887a      	ldrh	r2, [r7, #2]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	887b      	ldrh	r3, [r7, #2]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	1c53      	adds	r3, r2, #1
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	6179      	str	r1, [r7, #20]
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f1      	bne.n	8003ed6 <mem_cpy+0x1a>
	}
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003efe:	b480      	push	{r7}
 8003f00:	b087      	sub	sp, #28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	617a      	str	r2, [r7, #20]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f3      	bne.n	8003f0e <mem_set+0x10>
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	61ba      	str	r2, [r7, #24]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	1acb      	subs	r3, r1, r3
 8003f60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <mem_cmp+0x40>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0eb      	beq.n	8003f4c <mem_cmp+0x18>

	return r;
 8003f74:	697b      	ldr	r3, [r7, #20]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003f8c:	e002      	b.n	8003f94 <chk_chr+0x12>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3301      	adds	r3, #1
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <chk_chr+0x26>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d1f2      	bne.n	8003f8e <chk_chr+0xc>
	return *str;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	781b      	ldrb	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e029      	b.n	8004020 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <chk_lock+0xb4>)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	4413      	add	r3, r2
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01d      	beq.n	8004016 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003fda:	4a24      	ldr	r2, [pc, #144]	; (800406c <chk_lock+0xb4>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d116      	bne.n	800401a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003fec:	4a1f      	ldr	r2, [pc, #124]	; (800406c <chk_lock+0xb4>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d10c      	bne.n	800401a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004000:	4a1a      	ldr	r2, [pc, #104]	; (800406c <chk_lock+0xb4>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	4413      	add	r3, r2
 8004008:	3308      	adds	r3, #8
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004010:	429a      	cmp	r2, r3
 8004012:	d102      	bne.n	800401a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004014:	e007      	b.n	8004026 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3301      	adds	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d9d2      	bls.n	8003fcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d109      	bne.n	8004040 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <chk_lock+0x80>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d101      	bne.n	800403c <chk_lock+0x84>
 8004038:	2300      	movs	r3, #0
 800403a:	e010      	b.n	800405e <chk_lock+0xa6>
 800403c:	2312      	movs	r3, #18
 800403e:	e00e      	b.n	800405e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <chk_lock+0xa0>
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <chk_lock+0xb4>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	4413      	add	r3, r2
 800404e:	330c      	adds	r3, #12
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004056:	d101      	bne.n	800405c <chk_lock+0xa4>
 8004058:	2310      	movs	r3, #16
 800405a:	e000      	b.n	800405e <chk_lock+0xa6>
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	20000320 	.word	0x20000320

08004070 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	e002      	b.n	8004082 <enq_lock+0x12>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d806      	bhi.n	8004096 <enq_lock+0x26>
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <enq_lock+0x40>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	4413      	add	r3, r2
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f2      	bne.n	800407c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b02      	cmp	r3, #2
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000320 	.word	0x20000320

080040b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e01f      	b.n	8004104 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80040c4:	4a41      	ldr	r2, [pc, #260]	; (80041cc <inc_lock+0x118>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	4413      	add	r3, r2
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d113      	bne.n	80040fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80040d6:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <inc_lock+0x118>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d109      	bne.n	80040fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80040ea:	4a38      	ldr	r2, [pc, #224]	; (80041cc <inc_lock+0x118>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4413      	add	r3, r2
 80040f2:	3308      	adds	r3, #8
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d006      	beq.n	800410c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d9dc      	bls.n	80040c4 <inc_lock+0x10>
 800410a:	e000      	b.n	800410e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800410c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d132      	bne.n	800417a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e002      	b.n	8004120 <inc_lock+0x6c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3301      	adds	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d806      	bhi.n	8004134 <inc_lock+0x80>
 8004126:	4a29      	ldr	r2, [pc, #164]	; (80041cc <inc_lock+0x118>)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4413      	add	r3, r2
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f2      	bne.n	800411a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d101      	bne.n	800413e <inc_lock+0x8a>
 800413a:	2300      	movs	r3, #0
 800413c:	e040      	b.n	80041c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4922      	ldr	r1, [pc, #136]	; (80041cc <inc_lock+0x118>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	440b      	add	r3, r1
 800414a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	491e      	ldr	r1, [pc, #120]	; (80041cc <inc_lock+0x118>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	440b      	add	r3, r1
 8004158:	3304      	adds	r3, #4
 800415a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	491a      	ldr	r1, [pc, #104]	; (80041cc <inc_lock+0x118>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	440b      	add	r3, r1
 8004168:	3308      	adds	r3, #8
 800416a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <inc_lock+0x118>)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4413      	add	r3, r2
 8004174:	330c      	adds	r3, #12
 8004176:	2200      	movs	r2, #0
 8004178:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <inc_lock+0xe0>
 8004180:	4a12      	ldr	r2, [pc, #72]	; (80041cc <inc_lock+0x118>)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	330c      	adds	r3, #12
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <inc_lock+0xe0>
 8004190:	2300      	movs	r3, #0
 8004192:	e015      	b.n	80041c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <inc_lock+0xf8>
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <inc_lock+0x118>)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	4413      	add	r3, r2
 80041a2:	330c      	adds	r3, #12
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	e001      	b.n	80041b0 <inc_lock+0xfc>
 80041ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041b0:	4906      	ldr	r1, [pc, #24]	; (80041cc <inc_lock+0x118>)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	440b      	add	r3, r1
 80041b8:	330c      	adds	r3, #12
 80041ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	20000320 	.word	0x20000320

080041d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e010      	b.n	8004200 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80041de:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <clear_lock+0x44>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d105      	bne.n	80041fa <clear_lock+0x2a>
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <clear_lock+0x44>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	4413      	add	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d9eb      	bls.n	80041de <clear_lock+0xe>
	}
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	20000320 	.word	0x20000320

08004218 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	78db      	ldrb	r3, [r3, #3]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d034      	beq.n	8004296 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7858      	ldrb	r0, [r3, #1]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800423c:	2301      	movs	r3, #1
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	f7ff fd9a 	bl	8003d78 <disk_write>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <sync_window+0x38>
			res = FR_DISK_ERR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e022      	b.n	8004296 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	1ad2      	subs	r2, r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	429a      	cmp	r2, r3
 8004264:	d217      	bcs.n	8004296 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	789b      	ldrb	r3, [r3, #2]
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e010      	b.n	8004290 <sync_window+0x78>
					wsect += fs->fsize;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7858      	ldrb	r0, [r3, #1]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004282:	2301      	movs	r3, #1
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	f7ff fd77 	bl	8003d78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3b01      	subs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d8eb      	bhi.n	800426e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d01b      	beq.n	80042f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffad 	bl	8004218 <sync_window>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d113      	bne.n	80042f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7858      	ldrb	r0, [r3, #1]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80042d2:	2301      	movs	r3, #1
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	f7ff fd2f 	bl	8003d38 <disk_read>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	3b02      	subs	r3, #2
 8004308:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	3b02      	subs	r3, #2
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d301      	bcc.n	800431a <clust2sect+0x20>
 8004316:	2300      	movs	r3, #0
 8004318:	e008      	b.n	800432c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	895b      	ldrh	r3, [r3, #10]
 800431e:	461a      	mov	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	fb03 f202 	mul.w	r2, r3, r2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	4413      	add	r3, r2
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d904      	bls.n	8004358 <get_fat+0x20>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <get_fat+0x26>
		val = 1;	/* Internal error */
 8004358:	2301      	movs	r3, #1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e08f      	b.n	800447e <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d062      	beq.n	8004432 <get_fat+0xfa>
 800436c:	2b03      	cmp	r3, #3
 800436e:	dc7c      	bgt.n	800446a <get_fat+0x132>
 8004370:	2b01      	cmp	r3, #1
 8004372:	d002      	beq.n	800437a <get_fat+0x42>
 8004374:	2b02      	cmp	r3, #2
 8004376:	d042      	beq.n	80043fe <get_fat+0xc6>
 8004378:	e077      	b.n	800446a <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	0a5b      	lsrs	r3, r3, #9
 8004390:	4413      	add	r3, r2
 8004392:	4619      	mov	r1, r3
 8004394:	6938      	ldr	r0, [r7, #16]
 8004396:	f7ff ff83 	bl	80042a0 <move_window>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d167      	bne.n	8004470 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	60fa      	str	r2, [r7, #12]
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043b2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	0a5b      	lsrs	r3, r3, #9
 80043bc:	4413      	add	r3, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	6938      	ldr	r0, [r7, #16]
 80043c2:	f7ff ff6d 	bl	80042a0 <move_window>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d153      	bne.n	8004474 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <get_fat+0xbc>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	e002      	b.n	80043fa <get_fat+0xc2>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fa:	617b      	str	r3, [r7, #20]
			break;
 80043fc:	e03f      	b.n	800447e <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	4413      	add	r3, r2
 8004408:	4619      	mov	r1, r3
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f7ff ff48 	bl	80042a0 <move_window>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d130      	bne.n	8004478 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004424:	4413      	add	r3, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fcc6 	bl	8003db8 <ld_word>
 800442c:	4603      	mov	r3, r0
 800442e:	617b      	str	r3, [r7, #20]
			break;
 8004430:	e025      	b.n	800447e <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	09db      	lsrs	r3, r3, #7
 800443a:	4413      	add	r3, r2
 800443c:	4619      	mov	r1, r3
 800443e:	6938      	ldr	r0, [r7, #16]
 8004440:	f7ff ff2e 	bl	80042a0 <move_window>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d118      	bne.n	800447c <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004458:	4413      	add	r3, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fcc4 	bl	8003de8 <ld_dword>
 8004460:	4603      	mov	r3, r0
 8004462:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004466:	617b      	str	r3, [r7, #20]
			break;
 8004468:	e009      	b.n	800447e <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e006      	b.n	800447e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004470:	bf00      	nop
 8004472:	e004      	b.n	800447e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800447c:	bf00      	nop
		}
	}

	return val;
 800447e:	697b      	ldr	r3, [r7, #20]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004494:	2302      	movs	r3, #2
 8004496:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b01      	cmp	r3, #1
 800449c:	f240 80d2 	bls.w	8004644 <put_fat+0x1bc>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f080 80cc 	bcs.w	8004644 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	f000 8096 	beq.w	80045e2 <put_fat+0x15a>
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	f300 80cd 	bgt.w	8004656 <put_fat+0x1ce>
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <put_fat+0x3e>
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d06e      	beq.n	80045a2 <put_fat+0x11a>
 80044c4:	e0c7      	b.n	8004656 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4413      	add	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	0a5b      	lsrs	r3, r3, #9
 80044dc:	4413      	add	r3, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fedd 	bl	80042a0 <move_window>
 80044e6:	4603      	mov	r3, r0
 80044e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044ea:	7ffb      	ldrb	r3, [r7, #31]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 80ab 	bne.w	8004648 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	61b9      	str	r1, [r7, #24]
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	4413      	add	r3, r2
 8004504:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <put_fat+0xa4>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b25b      	sxtb	r3, r3
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	b25a      	sxtb	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	b25b      	sxtb	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	b25b      	sxtb	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e001      	b.n	8004530 <put_fat+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	0a5b      	lsrs	r3, r3, #9
 8004542:	4413      	add	r3, r2
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff feaa 	bl	80042a0 <move_window>
 800454c:	4603      	mov	r3, r0
 800454e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004550:	7ffb      	ldrb	r3, [r7, #31]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d17a      	bne.n	800464c <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	4413      	add	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <put_fat+0xf0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e00e      	b.n	8004596 <put_fat+0x10e>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b25b      	sxtb	r3, r3
 800457e:	f023 030f 	bic.w	r3, r3, #15
 8004582:	b25a      	sxtb	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	b25b      	sxtb	r3, r3
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	b25b      	sxtb	r3, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	b25b      	sxtb	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	70da      	strb	r2, [r3, #3]
			break;
 80045a0:	e059      	b.n	8004656 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	0a1b      	lsrs	r3, r3, #8
 80045aa:	4413      	add	r3, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fe76 	bl	80042a0 <move_window>
 80045b4:	4603      	mov	r3, r0
 80045b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045b8:	7ffb      	ldrb	r3, [r7, #31]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d148      	bne.n	8004650 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80045cc:	4413      	add	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	b292      	uxth	r2, r2
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fc2a 	bl	8003e2e <st_word>
			fs->wflag = 1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	70da      	strb	r2, [r3, #3]
			break;
 80045e0:	e039      	b.n	8004656 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	09db      	lsrs	r3, r3, #7
 80045ea:	4413      	add	r3, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff fe56 	bl	80042a0 <move_window>
 80045f4:	4603      	mov	r3, r0
 80045f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045f8:	7ffb      	ldrb	r3, [r7, #31]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12a      	bne.n	8004654 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004612:	4413      	add	r3, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fbe7 	bl	8003de8 <ld_dword>
 800461a:	4603      	mov	r3, r0
 800461c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004620:	4323      	orrs	r3, r4
 8004622:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004632:	4413      	add	r3, r2
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fc14 	bl	8003e64 <st_dword>
			fs->wflag = 1;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	70da      	strb	r2, [r3, #3]
			break;
 8004642:	e008      	b.n	8004656 <put_fat+0x1ce>
		}
	}
 8004644:	bf00      	nop
 8004646:	e006      	b.n	8004656 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004648:	bf00      	nop
 800464a:	e004      	b.n	8004656 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800464c:	bf00      	nop
 800464e:	e002      	b.n	8004656 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004650:	bf00      	nop
 8004652:	e000      	b.n	8004656 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004654:	bf00      	nop
	return res;
 8004656:	7ffb      	ldrb	r3, [r7, #31]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3724      	adds	r7, #36	; 0x24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}

08004660 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d904      	bls.n	8004686 <remove_chain+0x26>
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d301      	bcc.n	800468a <remove_chain+0x2a>
 8004686:	2302      	movs	r3, #2
 8004688:	e04b      	b.n	8004722 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	69b8      	ldr	r0, [r7, #24]
 8004698:	f7ff fef6 	bl	8004488 <put_fat>
 800469c:	4603      	mov	r3, r0
 800469e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <remove_chain+0x4a>
 80046a6:	7ffb      	ldrb	r3, [r7, #31]
 80046a8:	e03b      	b.n	8004722 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fe43 	bl	8004338 <get_fat>
 80046b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d031      	beq.n	800471e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <remove_chain+0x64>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e02e      	b.n	8004722 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d101      	bne.n	80046d0 <remove_chain+0x70>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e028      	b.n	8004722 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80046d0:	2200      	movs	r2, #0
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	69b8      	ldr	r0, [r7, #24]
 80046d6:	f7ff fed7 	bl	8004488 <put_fat>
 80046da:	4603      	mov	r3, r0
 80046dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80046de:	7ffb      	ldrb	r3, [r7, #31]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <remove_chain+0x88>
 80046e4:	7ffb      	ldrb	r3, [r7, #31]
 80046e6:	e01c      	b.n	8004722 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	3b02      	subs	r3, #2
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d20b      	bcs.n	800470e <remove_chain+0xae>
			fs->free_clst++;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	791b      	ldrb	r3, [r3, #4]
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3c6      	bcc.n	80046aa <remove_chain+0x4a>
 800471c:	e000      	b.n	8004720 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800471e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <create_chain+0x2c>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	429a      	cmp	r2, r3
 8004754:	d31b      	bcc.n	800478e <create_chain+0x64>
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e018      	b.n	800478e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fdea 	bl	8004338 <get_fat>
 8004764:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d801      	bhi.n	8004770 <create_chain+0x46>
 800476c:	2301      	movs	r3, #1
 800476e:	e070      	b.n	8004852 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d101      	bne.n	800477c <create_chain+0x52>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e06a      	b.n	8004852 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d201      	bcs.n	800478a <create_chain+0x60>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	e063      	b.n	8004852 <create_chain+0x128>
		scl = clst;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3301      	adds	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d307      	bcc.n	80047b2 <create_chain+0x88>
				ncl = 2;
 80047a2:	2302      	movs	r3, #2
 80047a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d901      	bls.n	80047b2 <create_chain+0x88>
 80047ae:	2300      	movs	r3, #0
 80047b0:	e04f      	b.n	8004852 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80047b2:	69f9      	ldr	r1, [r7, #28]
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fdbf 	bl	8004338 <get_fat>
 80047ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d003      	beq.n	80047d0 <create_chain+0xa6>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d101      	bne.n	80047d4 <create_chain+0xaa>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	e03e      	b.n	8004852 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1da      	bne.n	8004792 <create_chain+0x68>
 80047dc:	2300      	movs	r3, #0
 80047de:	e038      	b.n	8004852 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80047e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	69f9      	ldr	r1, [r7, #28]
 80047e8:	6938      	ldr	r0, [r7, #16]
 80047ea:	f7ff fe4d 	bl	8004488 <put_fat>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <create_chain+0xe2>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d006      	beq.n	800480c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	6938      	ldr	r0, [r7, #16]
 8004804:	f7ff fe40 	bl	8004488 <put_fat>
 8004808:	4603      	mov	r3, r0
 800480a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <create_chain+0x116>
		fs->last_clst = ncl;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	3b02      	subs	r3, #2
 8004822:	429a      	cmp	r2, r3
 8004824:	d804      	bhi.n	8004830 <create_chain+0x106>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	791b      	ldrb	r3, [r3, #4]
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	b2da      	uxtb	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	711a      	strb	r2, [r3, #4]
 800483e:	e007      	b.n	8004850 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <create_chain+0x122>
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e000      	b.n	800484e <create_chain+0x124>
 800484c:	2301      	movs	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004850:	69fb      	ldr	r3, [r7, #28]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004870:	d204      	bcs.n	800487c <dir_sdi+0x22>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <dir_sdi+0x26>
		return FR_INT_ERR;
 800487c:	2302      	movs	r3, #2
 800487e:	e063      	b.n	8004948 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <dir_sdi+0x46>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	8912      	ldrh	r2, [r2, #8]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d301      	bcc.n	80048b6 <dir_sdi+0x5c>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e048      	b.n	8004948 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	61da      	str	r2, [r3, #28]
 80048be:	e029      	b.n	8004914 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	895b      	ldrh	r3, [r3, #10]
 80048c4:	025b      	lsls	r3, r3, #9
 80048c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80048c8:	e019      	b.n	80048fe <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6979      	ldr	r1, [r7, #20]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fd32 	bl	8004338 <get_fat>
 80048d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d101      	bne.n	80048e2 <dir_sdi+0x88>
 80048de:	2301      	movs	r3, #1
 80048e0:	e032      	b.n	8004948 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d904      	bls.n	80048f2 <dir_sdi+0x98>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d301      	bcc.n	80048f6 <dir_sdi+0x9c>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e028      	b.n	8004948 <dir_sdi+0xee>
			ofs -= csz;
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	429a      	cmp	r2, r3
 8004904:	d2e1      	bcs.n	80048ca <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004906:	6979      	ldr	r1, [r7, #20]
 8004908:	6938      	ldr	r0, [r7, #16]
 800490a:	f7ff fcf6 	bl	80042fa <clust2sect>
 800490e:	4602      	mov	r2, r0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <dir_sdi+0xcc>
 8004922:	2302      	movs	r3, #2
 8004924:	e010      	b.n	8004948 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004940:	441a      	add	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	3320      	adds	r3, #32
 8004966:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <dir_next+0x28>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004976:	d301      	bcc.n	800497c <dir_next+0x2c>
 8004978:	2304      	movs	r3, #4
 800497a:	e0aa      	b.n	8004ad2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	2b00      	cmp	r3, #0
 8004984:	f040 8098 	bne.w	8004ab8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	8912      	ldrh	r2, [r2, #8]
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f0c0 8088 	bcc.w	8004ab8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	61da      	str	r2, [r3, #28]
 80049ae:	2304      	movs	r3, #4
 80049b0:	e08f      	b.n	8004ad2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0a5b      	lsrs	r3, r3, #9
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	8952      	ldrh	r2, [r2, #10]
 80049ba:	3a01      	subs	r2, #1
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d17a      	bne.n	8004ab8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7ff fcb4 	bl	8004338 <get_fat>
 80049d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d801      	bhi.n	80049dc <dir_next+0x8c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e07a      	b.n	8004ad2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d101      	bne.n	80049e8 <dir_next+0x98>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e074      	b.n	8004ad2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d358      	bcc.n	8004aa4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
 80049fe:	2304      	movs	r3, #4
 8004a00:	e067      	b.n	8004ad2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7ff fe8d 	bl	800472a <create_chain>
 8004a10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <dir_next+0xcc>
 8004a18:	2307      	movs	r3, #7
 8004a1a:	e05a      	b.n	8004ad2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <dir_next+0xd6>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e055      	b.n	8004ad2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d101      	bne.n	8004a32 <dir_next+0xe2>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e04f      	b.n	8004ad2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fbf0 	bl	8004218 <sync_window>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <dir_next+0xf2>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e047      	b.n	8004ad2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3330      	adds	r3, #48	; 0x30
 8004a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fa56 	bl	8003efe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	6979      	ldr	r1, [r7, #20]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fc4e 	bl	80042fa <clust2sect>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a64:	e012      	b.n	8004a8c <dir_next+0x13c>
						fs->wflag = 1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fbd3 	bl	8004218 <sync_window>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <dir_next+0x12c>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e02a      	b.n	8004ad2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	895b      	ldrh	r3, [r3, #10]
 8004a90:	461a      	mov	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d3e6      	bcc.n	8004a66 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fc24 	bl	80042fa <clust2sect>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004aea:	2100      	movs	r1, #0
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff feb4 	bl	800485a <dir_sdi>
 8004af2:	4603      	mov	r3, r0
 8004af4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d12b      	bne.n	8004b54 <dir_alloc+0x7a>
		n = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4619      	mov	r1, r3
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fbca 	bl	80042a0 <move_window>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11d      	bne.n	8004b52 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2be5      	cmp	r3, #229	; 0xe5
 8004b1e:	d004      	beq.n	8004b2a <dir_alloc+0x50>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d102      	bne.n	8004b3e <dir_alloc+0x64>
 8004b38:	e00c      	b.n	8004b54 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004b3e:	2101      	movs	r1, #1
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff05 	bl	8004950 <dir_next>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0d7      	beq.n	8004b00 <dir_alloc+0x26>
 8004b50:	e000      	b.n	8004b54 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004b52:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d101      	bne.n	8004b5e <dir_alloc+0x84>
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	75fb      	strb	r3, [r7, #23]
	return res;
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	331a      	adds	r3, #26
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff f91e 	bl	8003db8 <ld_word>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d109      	bne.n	8004b9c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff f913 	bl	8003db8 <ld_word>
 8004b92:	4603      	mov	r3, r0
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	331a      	adds	r3, #26
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	b292      	uxth	r2, r2
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff f936 	bl	8003e2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d109      	bne.n	8004bde <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f103 0214 	add.w	r2, r3, #20
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7ff f928 	bl	8003e2e <st_word>
	}
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff fe2f 	bl	800485a <dir_sdi>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <dir_find+0x24>
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
 8004c08:	e03e      	b.n	8004c88 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6938      	ldr	r0, [r7, #16]
 8004c12:	f7ff fb45 	bl	80042a0 <move_window>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d12f      	bne.n	8004c80 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <dir_find+0x4e>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	75fb      	strb	r3, [r7, #23]
 8004c32:	e028      	b.n	8004c86 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	330b      	adds	r3, #11
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	330b      	adds	r3, #11
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <dir_find+0x86>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a18      	ldr	r0, [r3, #32]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3324      	adds	r3, #36	; 0x24
 8004c5e:	220b      	movs	r2, #11
 8004c60:	4619      	mov	r1, r3
 8004c62:	f7ff f967 	bl	8003f34 <mem_cmp>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe6e 	bl	8004950 <dir_next>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0c5      	beq.n	8004c0a <dir_find+0x24>
 8004c7e:	e002      	b.n	8004c86 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c84:	bf00      	nop

	return res;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff1a 	bl	8004ada <dir_alloc>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11c      	bne.n	8004cea <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f7ff faf2 	bl	80042a0 <move_window>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d111      	bne.n	8004cea <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff f915 	bl	8003efe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a18      	ldr	r0, [r3, #32]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	220b      	movs	r2, #11
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7ff f8ec 	bl	8003ebc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3324      	adds	r3, #36	; 0x24
 8004d08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004d0a:	220b      	movs	r2, #11
 8004d0c:	2120      	movs	r1, #32
 8004d0e:	68b8      	ldr	r0, [r7, #8]
 8004d10:	f7ff f8f5 	bl	8003efe <mem_set>
	si = i = 0; ni = 8;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	61fa      	str	r2, [r7, #28]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004d2e:	7efb      	ldrb	r3, [r7, #27]
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d94e      	bls.n	8004dd2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004d34:	7efb      	ldrb	r3, [r7, #27]
 8004d36:	2b2f      	cmp	r3, #47	; 0x2f
 8004d38:	d006      	beq.n	8004d48 <create_name+0x54>
 8004d3a:	7efb      	ldrb	r3, [r7, #27]
 8004d3c:	2b5c      	cmp	r3, #92	; 0x5c
 8004d3e:	d110      	bne.n	8004d62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004d40:	e002      	b.n	8004d48 <create_name+0x54>
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b2f      	cmp	r3, #47	; 0x2f
 8004d52:	d0f6      	beq.n	8004d42 <create_name+0x4e>
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b5c      	cmp	r3, #92	; 0x5c
 8004d5e:	d0f0      	beq.n	8004d42 <create_name+0x4e>
			break;
 8004d60:	e038      	b.n	8004dd4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004d62:	7efb      	ldrb	r3, [r7, #27]
 8004d64:	2b2e      	cmp	r3, #46	; 0x2e
 8004d66:	d003      	beq.n	8004d70 <create_name+0x7c>
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d30c      	bcc.n	8004d8a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b0b      	cmp	r3, #11
 8004d74:	d002      	beq.n	8004d7c <create_name+0x88>
 8004d76:	7efb      	ldrb	r3, [r7, #27]
 8004d78:	2b2e      	cmp	r3, #46	; 0x2e
 8004d7a:	d001      	beq.n	8004d80 <create_name+0x8c>
 8004d7c:	2306      	movs	r3, #6
 8004d7e:	e044      	b.n	8004e0a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004d80:	2308      	movs	r3, #8
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	230b      	movs	r3, #11
 8004d86:	617b      	str	r3, [r7, #20]
			continue;
 8004d88:	e022      	b.n	8004dd0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004d8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da04      	bge.n	8004d9c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004d92:	7efb      	ldrb	r3, [r7, #27]
 8004d94:	3b80      	subs	r3, #128	; 0x80
 8004d96:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <create_name+0x120>)
 8004d98:	5cd3      	ldrb	r3, [r2, r3]
 8004d9a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004d9c:	7efb      	ldrb	r3, [r7, #27]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	481d      	ldr	r0, [pc, #116]	; (8004e18 <create_name+0x124>)
 8004da2:	f7ff f8ee 	bl	8003f82 <chk_chr>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <create_name+0xbc>
 8004dac:	2306      	movs	r3, #6
 8004dae:	e02c      	b.n	8004e0a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004db0:	7efb      	ldrb	r3, [r7, #27]
 8004db2:	2b60      	cmp	r3, #96	; 0x60
 8004db4:	d905      	bls.n	8004dc2 <create_name+0xce>
 8004db6:	7efb      	ldrb	r3, [r7, #27]
 8004db8:	2b7a      	cmp	r3, #122	; 0x7a
 8004dba:	d802      	bhi.n	8004dc2 <create_name+0xce>
 8004dbc:	7efb      	ldrb	r3, [r7, #27]
 8004dbe:	3b20      	subs	r3, #32
 8004dc0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	613a      	str	r2, [r7, #16]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4413      	add	r3, r2
 8004dcc:	7efa      	ldrb	r2, [r7, #27]
 8004dce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004dd0:	e7a6      	b.n	8004d20 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004dd2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	441a      	add	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <create_name+0xf4>
 8004de4:	2306      	movs	r3, #6
 8004de6:	e010      	b.n	8004e0a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2be5      	cmp	r3, #229	; 0xe5
 8004dee:	d102      	bne.n	8004df6 <create_name+0x102>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2205      	movs	r2, #5
 8004df4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004df6:	7efb      	ldrb	r3, [r7, #27]
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d801      	bhi.n	8004e00 <create_name+0x10c>
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	e000      	b.n	8004e02 <create_name+0x10e>
 8004e00:	2200      	movs	r2, #0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	330b      	adds	r3, #11
 8004e06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004e08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	08006f80 	.word	0x08006f80
 8004e18:	08005a34 	.word	0x08005a34

08004e1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004e30:	e002      	b.n	8004e38 <follow_path+0x1c>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8004e3e:	d0f8      	beq.n	8004e32 <follow_path+0x16>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b5c      	cmp	r3, #92	; 0x5c
 8004e46:	d0f4      	beq.n	8004e32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b1f      	cmp	r3, #31
 8004e54:	d80a      	bhi.n	8004e6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2280      	movs	r2, #128	; 0x80
 8004e5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fcfa 	bl	800485a <dir_sdi>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
 8004e6a:	e043      	b.n	8004ef4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff3f 	bl	8004cf4 <create_name>
 8004e76:	4603      	mov	r3, r0
 8004e78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d134      	bne.n	8004eea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff feb0 	bl	8004be6 <dir_find>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d127      	bne.n	8004eee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004e9e:	7afb      	ldrb	r3, [r7, #11]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d122      	bne.n	8004eee <follow_path+0xd2>
 8004ea8:	2305      	movs	r3, #5
 8004eaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004eac:	e01f      	b.n	8004eee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004eae:	7afb      	ldrb	r3, [r7, #11]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11c      	bne.n	8004ef2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	799b      	ldrb	r3, [r3, #6]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004ec4:	2305      	movs	r3, #5
 8004ec6:	75fb      	strb	r3, [r7, #23]
 8004ec8:	e014      	b.n	8004ef4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	4413      	add	r3, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fe43 	bl	8004b68 <ld_clust>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004ee8:	e7c0      	b.n	8004e6c <follow_path+0x50>
			if (res != FR_OK) break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <follow_path+0xd8>
				break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ef2:	bf00      	nop
			}
		}
	}

	return res;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b087      	sub	sp, #28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d031      	beq.n	8004f78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e002      	b.n	8004f22 <get_ldnumber+0x24>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d903      	bls.n	8004f32 <get_ldnumber+0x34>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b3a      	cmp	r3, #58	; 0x3a
 8004f30:	d1f4      	bne.n	8004f1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b3a      	cmp	r3, #58	; 0x3a
 8004f38:	d11c      	bne.n	8004f74 <get_ldnumber+0x76>
			tp = *path;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	60fa      	str	r2, [r7, #12]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	3b30      	subs	r3, #48	; 0x30
 8004f4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b09      	cmp	r3, #9
 8004f50:	d80e      	bhi.n	8004f70 <get_ldnumber+0x72>
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10a      	bne.n	8004f70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <get_ldnumber+0x72>
					vol = (int)i;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3301      	adds	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	e002      	b.n	8004f7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004f78:	693b      	ldr	r3, [r7, #16]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	70da      	strb	r2, [r3, #3]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff f97c 	bl	80042a0 <move_window>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <check_fs+0x2a>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	e038      	b.n	8005024 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3330      	adds	r3, #48	; 0x30
 8004fb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fefc 	bl	8003db8 <ld_word>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <check_fs+0x48>
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e029      	b.n	8005024 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fd6:	2be9      	cmp	r3, #233	; 0xe9
 8004fd8:	d009      	beq.n	8004fee <check_fs+0x66>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fe0:	2beb      	cmp	r3, #235	; 0xeb
 8004fe2:	d11e      	bne.n	8005022 <check_fs+0x9a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004fea:	2b90      	cmp	r3, #144	; 0x90
 8004fec:	d119      	bne.n	8005022 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3330      	adds	r3, #48	; 0x30
 8004ff2:	3336      	adds	r3, #54	; 0x36
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fef7 	bl	8003de8 <ld_dword>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <check_fs+0xa4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <check_fs+0x82>
 8005006:	2300      	movs	r3, #0
 8005008:	e00c      	b.n	8005024 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3330      	adds	r3, #48	; 0x30
 800500e:	3352      	adds	r3, #82	; 0x52
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fee9 	bl	8003de8 <ld_dword>
 8005016:	4603      	mov	r3, r0
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <check_fs+0xa8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <check_fs+0x9a>
 800501e:	2300      	movs	r3, #0
 8005020:	e000      	b.n	8005024 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005022:	2302      	movs	r3, #2
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	00544146 	.word	0x00544146
 8005030:	33544146 	.word	0x33544146

08005034 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b096      	sub	sp, #88	; 0x58
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ff58 	bl	8004efe <get_ldnumber>
 800504e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	da01      	bge.n	800505a <find_volume+0x26>
 8005056:	230b      	movs	r3, #11
 8005058:	e22d      	b.n	80054b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800505a:	4aa1      	ldr	r2, [pc, #644]	; (80052e0 <find_volume+0x2ac>)
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <find_volume+0x3a>
 800506a:	230c      	movs	r3, #12
 800506c:	e223      	b.n	80054b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005072:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01a      	beq.n	80050ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fe15 	bl	8003cb8 <disk_status>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10c      	bne.n	80050ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <find_volume+0x82>
 80050a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80050b2:	230a      	movs	r3, #10
 80050b4:	e1ff      	b.n	80054b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80050b6:	2300      	movs	r3, #0
 80050b8:	e1fd      	b.n	80054b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80050c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fe0d 	bl	8003cec <disk_initialize>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80050d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80050e4:	2303      	movs	r3, #3
 80050e6:	e1e6      	b.n	80054b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <find_volume+0xca>
 80050ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80050fa:	230a      	movs	r3, #10
 80050fc:	e1db      	b.n	80054b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005102:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005106:	f7ff ff3f 	bl	8004f88 <check_fs>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005114:	2b02      	cmp	r3, #2
 8005116:	d149      	bne.n	80051ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005118:	2300      	movs	r3, #0
 800511a:	643b      	str	r3, [r7, #64]	; 0x40
 800511c:	e01e      	b.n	800515c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800512c:	4413      	add	r3, r2
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	3304      	adds	r3, #4
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <find_volume+0x114>
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	3308      	adds	r3, #8
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fe52 	bl	8003de8 <ld_dword>
 8005144:	4602      	mov	r2, r0
 8005146:	e000      	b.n	800514a <find_volume+0x116>
 8005148:	2200      	movs	r2, #0
 800514a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	3358      	adds	r3, #88	; 0x58
 8005150:	443b      	add	r3, r7
 8005152:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005158:	3301      	adds	r3, #1
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
 800515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515e:	2b03      	cmp	r3, #3
 8005160:	d9dd      	bls.n	800511e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005162:	2300      	movs	r3, #0
 8005164:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <find_volume+0x13e>
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	3b01      	subs	r3, #1
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	3358      	adds	r3, #88	; 0x58
 8005178:	443b      	add	r3, r7
 800517a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800517e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <find_volume+0x15e>
 8005186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800518a:	f7ff fefd 	bl	8004f88 <check_fs>
 800518e:	4603      	mov	r3, r0
 8005190:	e000      	b.n	8005194 <find_volume+0x160>
 8005192:	2303      	movs	r3, #3
 8005194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800519c:	2b01      	cmp	r3, #1
 800519e:	d905      	bls.n	80051ac <find_volume+0x178>
 80051a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a2:	3301      	adds	r3, #1
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
 80051a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d9e2      	bls.n	8005172 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80051ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d101      	bne.n	80051b8 <find_volume+0x184>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e17e      	b.n	80054b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80051b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d901      	bls.n	80051c4 <find_volume+0x190>
 80051c0:	230d      	movs	r3, #13
 80051c2:	e178      	b.n	80054b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	3330      	adds	r3, #48	; 0x30
 80051c8:	330b      	adds	r3, #11
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fdf4 	bl	8003db8 <ld_word>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d6:	d001      	beq.n	80051dc <find_volume+0x1a8>
 80051d8:	230d      	movs	r3, #13
 80051da:	e16c      	b.n	80054b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	3330      	adds	r3, #48	; 0x30
 80051e0:	3316      	adds	r3, #22
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fde8 	bl	8003db8 <ld_word>
 80051e8:	4603      	mov	r3, r0
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80051ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <find_volume+0x1cc>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	3330      	adds	r3, #48	; 0x30
 80051f6:	3324      	adds	r3, #36	; 0x24
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe fdf5 	bl	8003de8 <ld_dword>
 80051fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005204:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	789b      	ldrb	r3, [r3, #2]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d005      	beq.n	8005224 <find_volume+0x1f0>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	789b      	ldrb	r3, [r3, #2]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d001      	beq.n	8005224 <find_volume+0x1f0>
 8005220:	230d      	movs	r3, #13
 8005222:	e148      	b.n	80054b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	789b      	ldrb	r3, [r3, #2]
 8005228:	461a      	mov	r2, r3
 800522a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b29a      	uxth	r2, r3
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	895b      	ldrh	r3, [r3, #10]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <find_volume+0x224>
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	895b      	ldrh	r3, [r3, #10]
 800524a:	461a      	mov	r2, r3
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	895b      	ldrh	r3, [r3, #10]
 8005250:	3b01      	subs	r3, #1
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <find_volume+0x228>
 8005258:	230d      	movs	r3, #13
 800525a:	e12c      	b.n	80054b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	3330      	adds	r3, #48	; 0x30
 8005260:	3311      	adds	r3, #17
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fda8 	bl	8003db8 <ld_word>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	891b      	ldrh	r3, [r3, #8]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <find_volume+0x24e>
 800527e:	230d      	movs	r3, #13
 8005280:	e119      	b.n	80054b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	3330      	adds	r3, #48	; 0x30
 8005286:	3313      	adds	r3, #19
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fd95 	bl	8003db8 <ld_word>
 800528e:	4603      	mov	r3, r0
 8005290:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <find_volume+0x272>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	3330      	adds	r3, #48	; 0x30
 800529c:	3320      	adds	r3, #32
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fda2 	bl	8003de8 <ld_dword>
 80052a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	3330      	adds	r3, #48	; 0x30
 80052aa:	330e      	adds	r3, #14
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fe fd83 	bl	8003db8 <ld_word>
 80052b2:	4603      	mov	r3, r0
 80052b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80052b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <find_volume+0x28c>
 80052bc:	230d      	movs	r3, #13
 80052be:	e0fa      	b.n	80054b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80052c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	4413      	add	r3, r2
 80052c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c8:	8912      	ldrh	r2, [r2, #8]
 80052ca:	0912      	lsrs	r2, r2, #4
 80052cc:	b292      	uxth	r2, r2
 80052ce:	4413      	add	r3, r2
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80052d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d204      	bcs.n	80052e4 <find_volume+0x2b0>
 80052da:	230d      	movs	r3, #13
 80052dc:	e0eb      	b.n	80054b6 <find_volume+0x482>
 80052de:	bf00      	nop
 80052e0:	20000318 	.word	0x20000318
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80052e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ec:	8952      	ldrh	r2, [r2, #10]
 80052ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <find_volume+0x2ca>
 80052fa:	230d      	movs	r3, #13
 80052fc:	e0db      	b.n	80054b6 <find_volume+0x482>
		fmt = FS_FAT32;
 80052fe:	2303      	movs	r3, #3
 8005300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800530a:	4293      	cmp	r3, r2
 800530c:	d802      	bhi.n	8005314 <find_volume+0x2e0>
 800530e:	2302      	movs	r3, #2
 8005310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	f640 72f5 	movw	r2, #4085	; 0xff5
 800531a:	4293      	cmp	r3, r2
 800531c:	d802      	bhi.n	8005324 <find_volume+0x2f0>
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	1c9a      	adds	r2, r3, #2
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005330:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005332:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005336:	441a      	add	r2, r3
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800533c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	441a      	add	r2, r3
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800534a:	2b03      	cmp	r3, #3
 800534c:	d11e      	bne.n	800538c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	3330      	adds	r3, #48	; 0x30
 8005352:	332a      	adds	r3, #42	; 0x2a
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe fd2f 	bl	8003db8 <ld_word>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <find_volume+0x330>
 8005360:	230d      	movs	r3, #13
 8005362:	e0a8      	b.n	80054b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	891b      	ldrh	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <find_volume+0x33c>
 800536c:	230d      	movs	r3, #13
 800536e:	e0a2      	b.n	80054b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	3330      	adds	r3, #48	; 0x30
 8005374:	332c      	adds	r3, #44	; 0x2c
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fd36 	bl	8003de8 <ld_dword>
 800537c:	4602      	mov	r2, r0
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	647b      	str	r3, [r7, #68]	; 0x44
 800538a:	e01f      	b.n	80053cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	891b      	ldrh	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <find_volume+0x364>
 8005394:	230d      	movs	r3, #13
 8005396:	e08e      	b.n	80054b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	441a      	add	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80053a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d103      	bne.n	80053b4 <find_volume+0x380>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	e00a      	b.n	80053ca <find_volume+0x396>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	4613      	mov	r3, r2
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	4413      	add	r3, r2
 80053be:	085a      	lsrs	r2, r3, #1
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80053d6:	0a5b      	lsrs	r3, r3, #9
 80053d8:	429a      	cmp	r2, r3
 80053da:	d201      	bcs.n	80053e0 <find_volume+0x3ac>
 80053dc:	230d      	movs	r3, #13
 80053de:	e06a      	b.n	80054b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	611a      	str	r2, [r3, #16]
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80053f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d149      	bne.n	8005492 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	3330      	adds	r3, #48	; 0x30
 8005402:	3330      	adds	r3, #48	; 0x30
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fcd7 	bl	8003db8 <ld_word>
 800540a:	4603      	mov	r3, r0
 800540c:	2b01      	cmp	r3, #1
 800540e:	d140      	bne.n	8005492 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005412:	3301      	adds	r3, #1
 8005414:	4619      	mov	r1, r3
 8005416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005418:	f7fe ff42 	bl	80042a0 <move_window>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d137      	bne.n	8005492 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	2200      	movs	r2, #0
 8005426:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	3330      	adds	r3, #48	; 0x30
 800542c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe fcc1 	bl	8003db8 <ld_word>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800543e:	429a      	cmp	r2, r3
 8005440:	d127      	bne.n	8005492 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	3330      	adds	r3, #48	; 0x30
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fcce 	bl	8003de8 <ld_dword>
 800544c:	4603      	mov	r3, r0
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <find_volume+0x48c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d11e      	bne.n	8005492 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	3330      	adds	r3, #48	; 0x30
 8005458:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fcc3 	bl	8003de8 <ld_dword>
 8005462:	4603      	mov	r3, r0
 8005464:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <find_volume+0x490>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d113      	bne.n	8005492 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	3330      	adds	r3, #48	; 0x30
 800546e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe fcb8 	bl	8003de8 <ld_dword>
 8005478:	4602      	mov	r2, r0
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	3330      	adds	r3, #48	; 0x30
 8005482:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fcae 	bl	8003de8 <ld_dword>
 800548c:	4602      	mov	r2, r0
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005498:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <find_volume+0x494>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <find_volume+0x494>)
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <find_volume+0x494>)
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80054ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054b0:	f7fe fe8e 	bl	80041d0 <clear_lock>
#endif
	return FR_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3758      	adds	r7, #88	; 0x58
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	41615252 	.word	0x41615252
 80054c4:	61417272 	.word	0x61417272
 80054c8:	2000031c 	.word	0x2000031c

080054cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80054de:	f107 0310 	add.w	r3, r7, #16
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fd0b 	bl	8004efe <get_ldnumber>
 80054e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	da01      	bge.n	80054f4 <f_mount+0x28>
 80054f0:	230b      	movs	r3, #11
 80054f2:	e02b      	b.n	800554c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80054f4:	4a17      	ldr	r2, [pc, #92]	; (8005554 <f_mount+0x88>)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005504:	69b8      	ldr	r0, [r7, #24]
 8005506:	f7fe fe63 	bl	80041d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	490d      	ldr	r1, [pc, #52]	; (8005554 <f_mount+0x88>)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <f_mount+0x66>
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <f_mount+0x6a>
 8005532:	2300      	movs	r3, #0
 8005534:	e00a      	b.n	800554c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005536:	f107 010c 	add.w	r1, r7, #12
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	2200      	movs	r2, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fd77 	bl	8005034 <find_volume>
 8005546:	4603      	mov	r3, r0
 8005548:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800554a:	7dfb      	ldrb	r3, [r7, #23]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000318 	.word	0x20000318

08005558 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b098      	sub	sp, #96	; 0x60
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <f_open+0x18>
 800556c:	2309      	movs	r3, #9
 800556e:	e1ad      	b.n	80058cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005576:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005578:	79fa      	ldrb	r2, [r7, #7]
 800557a:	f107 0110 	add.w	r1, r7, #16
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fd56 	bl	8005034 <find_volume>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800558e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 8191 	bne.w	80058ba <f_open+0x362>
		dj.obj.fs = fs;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	f107 0314 	add.w	r3, r7, #20
 80055a2:	4611      	mov	r1, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fc39 	bl	8004e1c <follow_path>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80055b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11a      	bne.n	80055ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80055b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da03      	bge.n	80055ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80055c2:	2306      	movs	r3, #6
 80055c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80055c8:	e011      	b.n	80055ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fce8 	bl	8003fb8 <chk_lock>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	f003 031c 	and.w	r3, r3, #28
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d07f      	beq.n	80056f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80055f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005604:	2b04      	cmp	r3, #4
 8005606:	d10e      	bne.n	8005626 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005608:	f7fe fd32 	bl	8004070 <enq_lock>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d006      	beq.n	8005620 <f_open+0xc8>
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fb3a 	bl	8004c90 <dir_register>
 800561c:	4603      	mov	r3, r0
 800561e:	e000      	b.n	8005622 <f_open+0xca>
 8005620:	2312      	movs	r3, #18
 8005622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	f043 0308 	orr.w	r3, r3, #8
 800562c:	71fb      	strb	r3, [r7, #7]
 800562e:	e010      	b.n	8005652 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005630:	7ebb      	ldrb	r3, [r7, #26]
 8005632:	f003 0311 	and.w	r3, r3, #17
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <f_open+0xea>
					res = FR_DENIED;
 800563a:	2307      	movs	r3, #7
 800563c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005640:	e007      	b.n	8005652 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <f_open+0xfa>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005656:	2b00      	cmp	r3, #0
 8005658:	d168      	bne.n	800572c <f_open+0x1d4>
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d063      	beq.n	800572c <f_open+0x1d4>
				dw = GET_FATTIME();
 8005664:	f7fe fac8 	bl	8003bf8 <get_fattime>
 8005668:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	330e      	adds	r3, #14
 800566e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fbf7 	bl	8003e64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	3316      	adds	r3, #22
 800567a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fbf1 	bl	8003e64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	330b      	adds	r3, #11
 8005686:	2220      	movs	r2, #32
 8005688:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fa69 	bl	8004b68 <ld_clust>
 8005696:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800569c:	2200      	movs	r2, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fa81 	bl	8004ba6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	331c      	adds	r3, #28
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fbda 	bl	8003e64 <st_dword>
					fs->wflag = 1;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2201      	movs	r2, #1
 80056b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d037      	beq.n	800572c <f_open+0x1d4>
						dw = fs->winsect;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	2200      	movs	r2, #0
 80056c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe ffc8 	bl	8004660 <remove_chain>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80056d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d126      	bne.n	800572c <f_open+0x1d4>
							res = move_window(fs, dw);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fddc 	bl	80042a0 <move_window>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f2:	3a01      	subs	r2, #1
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e019      	b.n	800572c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80056f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d115      	bne.n	800572c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005700:	7ebb      	ldrb	r3, [r7, #26]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <f_open+0x1ba>
					res = FR_NO_FILE;
 800570a:	2304      	movs	r3, #4
 800570c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005710:	e00c      	b.n	800572c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <f_open+0x1d4>
 800571c:	7ebb      	ldrb	r3, [r7, #26]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <f_open+0x1d4>
						res = FR_DENIED;
 8005726:	2307      	movs	r3, #7
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800572c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005730:	2b00      	cmp	r3, #0
 8005732:	d128      	bne.n	8005786 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005744:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800574e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	f107 0314 	add.w	r3, r7, #20
 800576a:	4611      	mov	r1, r2
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fca1 	bl	80040b4 <inc_lock>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <f_open+0x22e>
 8005780:	2302      	movs	r3, #2
 8005782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 8095 	bne.w	80058ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff f9e6 	bl	8004b68 <ld_clust>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	331c      	adds	r3, #28
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fb1e 	bl	8003de8 <ld_dword>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	88da      	ldrh	r2, [r3, #6]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	79fa      	ldrb	r2, [r7, #7]
 80057ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3330      	adds	r3, #48	; 0x30
 80057e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fb88 	bl	8003efe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d060      	beq.n	80058ba <f_open+0x362>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05c      	beq.n	80058ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	895b      	ldrh	r3, [r3, #10]
 800580c:	025b      	lsls	r3, r3, #9
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	657b      	str	r3, [r7, #84]	; 0x54
 800581c:	e016      	b.n	800584c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fd88 	bl	8004338 <get_fat>
 8005828:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800582a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800582c:	2b01      	cmp	r3, #1
 800582e:	d802      	bhi.n	8005836 <f_open+0x2de>
 8005830:	2302      	movs	r3, #2
 8005832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d102      	bne.n	8005844 <f_open+0x2ec>
 800583e:	2301      	movs	r3, #1
 8005840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	657b      	str	r3, [r7, #84]	; 0x54
 800584c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <f_open+0x304>
 8005854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005858:	429a      	cmp	r2, r3
 800585a:	d8e0      	bhi.n	800581e <f_open+0x2c6>
				}
				fp->clust = clst;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005860:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005866:	2b00      	cmp	r3, #0
 8005868:	d127      	bne.n	80058ba <f_open+0x362>
 800586a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	2b00      	cmp	r3, #0
 8005872:	d022      	beq.n	80058ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fd3e 	bl	80042fa <clust2sect>
 800587e:	6478      	str	r0, [r7, #68]	; 0x44
 8005880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <f_open+0x336>
						res = FR_INT_ERR;
 8005886:	2302      	movs	r3, #2
 8005888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800588c:	e015      	b.n	80058ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800588e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005890:	0a5a      	lsrs	r2, r3, #9
 8005892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	7858      	ldrb	r0, [r3, #1]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1a      	ldr	r2, [r3, #32]
 80058a8:	2301      	movs	r3, #1
 80058aa:	f7fe fa45 	bl	8003d38 <disk_read>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <f_open+0x362>
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80058ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <f_open+0x370>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80058c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3760      	adds	r7, #96	; 0x60
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 80058ec:	7a5b      	ldrb	r3, [r3, #9]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d131      	bne.n	8005958 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80058f4:	4b1c      	ldr	r3, [pc, #112]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 80058f6:	7a5b      	ldrb	r3, [r3, #9]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 80058fe:	2100      	movs	r1, #0
 8005900:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005902:	4b19      	ldr	r3, [pc, #100]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 8005904:	7a5b      	ldrb	r3, [r3, #9]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4a17      	ldr	r2, [pc, #92]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 8005914:	7a5b      	ldrb	r3, [r3, #9]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 800591c:	4413      	add	r3, r2
 800591e:	79fa      	ldrb	r2, [r7, #7]
 8005920:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 8005924:	7a5b      	ldrb	r3, [r3, #9]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	b2d1      	uxtb	r1, r2
 800592c:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <FATFS_LinkDriverEx+0x94>)
 800592e:	7251      	strb	r1, [r2, #9]
 8005930:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005932:	7dbb      	ldrb	r3, [r7, #22]
 8005934:	3330      	adds	r3, #48	; 0x30
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	3301      	adds	r3, #1
 8005940:	223a      	movs	r2, #58	; 0x3a
 8005942:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	3302      	adds	r3, #2
 8005948:	222f      	movs	r2, #47	; 0x2f
 800594a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	3303      	adds	r3, #3
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000340 	.word	0x20000340

0800596c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005976:	2200      	movs	r2, #0
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ffaa 	bl	80058d4 <FATFS_LinkDriverEx>
 8005980:	4603      	mov	r3, r0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	; (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	; (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	; (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 f820 	bl	80059e4 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08007000 	.word	0x08007000
 80059c8:	08007000 	.word	0x08007000
 80059cc:	08007000 	.word	0x08007000
 80059d0:	08007004 	.word	0x08007004

080059d4 <memset>:
 80059d4:	4402      	add	r2, r0
 80059d6:	4603      	mov	r3, r0
 80059d8:	4293      	cmp	r3, r2
 80059da:	d100      	bne.n	80059de <memset+0xa>
 80059dc:	4770      	bx	lr
 80059de:	f803 1b01 	strb.w	r1, [r3], #1
 80059e2:	e7f9      	b.n	80059d8 <memset+0x4>

080059e4 <_init>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	bf00      	nop
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr

080059f0 <_fini>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	bf00      	nop
 80059f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f6:	bc08      	pop	{r3}
 80059f8:	469e      	mov	lr, r3
 80059fa:	4770      	bx	lr
