
Glassware-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008630  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001284  080087bc  080087bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a40  08009a40  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a48  08009a48  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a48  08009a48  00019a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08009a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  2000002c  08009a7c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08009a7c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015832  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1b  00000000  00000000  0003588e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  000386b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00039950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b43  00000000  00000000  0003aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198b4  00000000  00000000  0005f5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d349b  00000000  00000000  00078e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c33a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d24  00000000  00000000  0014c38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000002c 	.word	0x2000002c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080087a4 	.word	0x080087a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000030 	.word	0x20000030
 80001c8:	080087a4 	.word	0x080087a4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <SELECT+0x18>)
 80004da:	f001 ffbd 	bl	8002458 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f001 fd36 	bl	8001f50 <HAL_Delay>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	48000400 	.word	0x48000400

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <DESELECT+0x18>)
 80004f6:	f001 ffaf 	bl	8002458 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 fd28 	bl	8001f50 <HAL_Delay>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	48000400 	.word	0x48000400

08000508 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000512:	bf00      	nop
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <SPI_TxByte+0x30>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b02      	cmp	r3, #2
 8000520:	d1f8      	bne.n	8000514 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	2201      	movs	r2, #1
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <SPI_TxByte+0x30>)
 800052a:	f003 ff4a 	bl	80043c2 <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000188 	.word	0x20000188

0800053c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000548:	bf00      	nop
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <SPI_TxBuffer+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b02      	cmp	r3, #2
 8000556:	d1f8      	bne.n	800054a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <SPI_TxBuffer+0x30>)
 8000560:	f003 ff2f 	bl	80043c2 <HAL_SPI_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000188 	.word	0x20000188

08000570 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057a:	bf00      	nop
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <SPI_RxByte+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	2b02      	cmp	r3, #2
 8000588:	d1f8      	bne.n	800057c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058a:	1dba      	adds	r2, r7, #6
 800058c:	1df9      	adds	r1, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <SPI_RxByte+0x34>)
 8000596:	f004 f882 	bl	800469e <HAL_SPI_TransmitReceive>

	return data;
 800059a:	79bb      	ldrb	r3, [r7, #6]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000188 	.word	0x20000188

080005a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b0:	f7ff ffde 	bl	8000570 <SPI_RxByte>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <SD_ReadyWait+0x30>)
 80005cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d2:	f7ff ffcd 	bl	8000570 <SPI_RxByte>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d003      	beq.n	80005e8 <SD_ReadyWait+0x24>
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <SD_ReadyWait+0x30>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f4      	bne.n	80005d2 <SD_ReadyWait+0xe>

	return res;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000045a 	.word	0x2000045a

080005f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005fe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000602:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000604:	f7ff ff72 	bl	80004ec <DESELECT>
	for(int i = 0; i < 10; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e005      	b.n	800061a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	f7ff ff7a 	bl	8000508 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	3301      	adds	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b09      	cmp	r3, #9
 800061e:	ddf6      	ble.n	800060e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000620:	f7ff ff56 	bl	80004d0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000638:	2395      	movs	r3, #149	; 0x95
 800063a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800063c:	463b      	mov	r3, r7
 800063e:	2106      	movs	r1, #6
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff7b 	bl	800053c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000646:	e002      	b.n	800064e <SD_PowerOn+0x56>
	{
		cnt--;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3b01      	subs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800064e:	f7ff ff8f 	bl	8000570 <SPI_RxByte>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d002      	beq.n	800065e <SD_PowerOn+0x66>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f4      	bne.n	8000648 <SD_PowerOn+0x50>
	}

	DESELECT();
 800065e:	f7ff ff45 	bl	80004ec <DESELECT>
	SPI_TxByte(0XFF);
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	f7ff ff50 	bl	8000508 <SPI_TxByte>

	PowerFlag = 1;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <SD_PowerOn+0x80>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000049 	.word	0x20000049

0800067c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <SD_PowerOff+0x14>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000049 	.word	0x20000049

08000694 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <SD_CheckPower+0x14>)
 800069a:	781b      	ldrb	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000049 	.word	0x20000049

080006ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SD_RxDataBlock+0x58>)
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006bc:	f7ff ff58 	bl	8000570 <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	d103      	bne.n	80006d2 <SD_RxDataBlock+0x26>
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <SD_RxDataBlock+0x58>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f4      	bne.n	80006bc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2bfe      	cmp	r3, #254	; 0xfe
 80006d6:	d001      	beq.n	80006dc <SD_RxDataBlock+0x30>
 80006d8:	2300      	movs	r3, #0
 80006da:	e00f      	b.n	80006fc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff60 	bl	80005a8 <SPI_RxBytePtr>
	} while(len--);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	603a      	str	r2, [r7, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f4      	bne.n	80006dc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006f2:	f7ff ff3d 	bl	8000570 <SPI_RxByte>
	SPI_RxByte();
 80006f6:	f7ff ff3b 	bl	8000570 <SPI_RxByte>

	return TRUE;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000458 	.word	0x20000458

08000708 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000718:	f7ff ff54 	bl	80005c4 <SD_ReadyWait>
 800071c:	4603      	mov	r3, r0
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d001      	beq.n	8000726 <SD_TxDataBlock+0x1e>
 8000722:	2300      	movs	r3, #0
 8000724:	e02f      	b.n	8000786 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff feed 	bl	8000508 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	2bfd      	cmp	r3, #253	; 0xfd
 8000732:	d020      	beq.n	8000776 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff feff 	bl	800053c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800073e:	f7ff ff17 	bl	8000570 <SPI_RxByte>
		SPI_RxByte();
 8000742:	f7ff ff15 	bl	8000570 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000746:	e00b      	b.n	8000760 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000748:	f7ff ff12 	bl	8000570 <SPI_RxByte>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	2b05      	cmp	r3, #5
 8000758:	d006      	beq.n	8000768 <SD_TxDataBlock+0x60>
			i++;
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	3301      	adds	r3, #1
 800075e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	2b40      	cmp	r3, #64	; 0x40
 8000764:	d9f0      	bls.n	8000748 <SD_TxDataBlock+0x40>
 8000766:	e000      	b.n	800076a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000768:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800076a:	bf00      	nop
 800076c:	f7ff ff00 	bl	8000570 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0fa      	beq.n	800076c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	2b05      	cmp	r3, #5
 800077e:	d101      	bne.n	8000784 <SD_TxDataBlock+0x7c>
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	6039      	str	r1, [r7, #0]
 8000798:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079a:	f7ff ff13 	bl	80005c4 <SD_ReadyWait>
 800079e:	4603      	mov	r3, r0
 80007a0:	2bff      	cmp	r3, #255	; 0xff
 80007a2:	d001      	beq.n	80007a8 <SD_SendCmd+0x1a>
 80007a4:	23ff      	movs	r3, #255	; 0xff
 80007a6:	e042      	b.n	800082e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff feac 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fea6 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fea0 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe9a 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe95 	bl	8000508 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b40      	cmp	r3, #64	; 0x40
 80007e2:	d102      	bne.n	80007ea <SD_SendCmd+0x5c>
 80007e4:	2395      	movs	r3, #149	; 0x95
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e007      	b.n	80007fa <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b48      	cmp	r3, #72	; 0x48
 80007ee:	d102      	bne.n	80007f6 <SD_SendCmd+0x68>
 80007f0:	2387      	movs	r3, #135	; 0x87
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e001      	b.n	80007fa <SD_SendCmd+0x6c>
	else crc = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe83 	bl	8000508 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b4c      	cmp	r3, #76	; 0x4c
 8000806:	d101      	bne.n	800080c <SD_SendCmd+0x7e>
 8000808:	f7ff feb2 	bl	8000570 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800080c:	230a      	movs	r3, #10
 800080e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000810:	f7ff feae 	bl	8000570 <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da05      	bge.n	800082c <SD_SendCmd+0x9e>
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	3b01      	subs	r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f1      	bne.n	8000810 <SD_SendCmd+0x82>

	return res;
 800082c:	7b7b      	ldrb	r3, [r7, #13]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SD_disk_initialize+0x14>
 8000848:	2301      	movs	r3, #1
 800084a:	e0d1      	b.n	80009f0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <SD_disk_initialize+0x1c0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <SD_disk_initialize+0x2a>
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <SD_disk_initialize+0x1c0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	e0c6      	b.n	80009f0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000862:	f7ff fec9 	bl	80005f8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000866:	f7ff fe33 	bl	80004d0 <SELECT>

	/* check disk type */
	type = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800086e:	2100      	movs	r1, #0
 8000870:	2040      	movs	r0, #64	; 0x40
 8000872:	f7ff ff8c 	bl	800078e <SD_SendCmd>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 80a1 	bne.w	80009c0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800087e:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <SD_disk_initialize+0x1c4>)
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000886:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088a:	2048      	movs	r0, #72	; 0x48
 800088c:	f7ff ff7f 	bl	800078e <SD_SendCmd>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d155      	bne.n	8000942 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e00c      	b.n	80008b6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800089c:	7bfc      	ldrb	r4, [r7, #15]
 800089e:	f7ff fe67 	bl	8000570 <SPI_RxByte>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	f104 0310 	add.w	r3, r4, #16
 80008aa:	443b      	add	r3, r7
 80008ac:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3301      	adds	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d9ef      	bls.n	800089c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d17e      	bne.n	80009c0 <SD_disk_initialize+0x188>
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	2baa      	cmp	r3, #170	; 0xaa
 80008c6:	d17b      	bne.n	80009c0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008c8:	2100      	movs	r1, #0
 80008ca:	2077      	movs	r0, #119	; 0x77
 80008cc:	f7ff ff5f 	bl	800078e <SD_SendCmd>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d807      	bhi.n	80008e6 <SD_disk_initialize+0xae>
 80008d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008da:	2069      	movs	r0, #105	; 0x69
 80008dc:	f7ff ff57 	bl	800078e <SD_SendCmd>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008e6:	4b45      	ldr	r3, [pc, #276]	; (80009fc <SD_disk_initialize+0x1c4>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ec      	bne.n	80008c8 <SD_disk_initialize+0x90>
 80008ee:	e000      	b.n	80008f2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f2:	4b42      	ldr	r3, [pc, #264]	; (80009fc <SD_disk_initialize+0x1c4>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d062      	beq.n	80009c0 <SD_disk_initialize+0x188>
 80008fa:	2100      	movs	r1, #0
 80008fc:	207a      	movs	r0, #122	; 0x7a
 80008fe:	f7ff ff46 	bl	800078e <SD_SendCmd>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d15b      	bne.n	80009c0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e00c      	b.n	8000928 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800090e:	7bfc      	ldrb	r4, [r7, #15]
 8000910:	f7ff fe2e 	bl	8000570 <SPI_RxByte>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	f104 0310 	add.w	r3, r4, #16
 800091c:	443b      	add	r3, r7
 800091e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	3301      	adds	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9ef      	bls.n	800090e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800092e:	7a3b      	ldrb	r3, [r7, #8]
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SD_disk_initialize+0x104>
 8000938:	230c      	movs	r3, #12
 800093a:	e000      	b.n	800093e <SD_disk_initialize+0x106>
 800093c:	2304      	movs	r3, #4
 800093e:	73bb      	strb	r3, [r7, #14]
 8000940:	e03e      	b.n	80009c0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000942:	2100      	movs	r1, #0
 8000944:	2077      	movs	r0, #119	; 0x77
 8000946:	f7ff ff22 	bl	800078e <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d808      	bhi.n	8000962 <SD_disk_initialize+0x12a>
 8000950:	2100      	movs	r1, #0
 8000952:	2069      	movs	r0, #105	; 0x69
 8000954:	f7ff ff1b 	bl	800078e <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d801      	bhi.n	8000962 <SD_disk_initialize+0x12a>
 800095e:	2302      	movs	r3, #2
 8000960:	e000      	b.n	8000964 <SD_disk_initialize+0x12c>
 8000962:	2301      	movs	r3, #1
 8000964:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000966:	7bbb      	ldrb	r3, [r7, #14]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d10e      	bne.n	800098a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800096c:	2100      	movs	r1, #0
 800096e:	2077      	movs	r0, #119	; 0x77
 8000970:	f7ff ff0d 	bl	800078e <SD_SendCmd>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d80e      	bhi.n	8000998 <SD_disk_initialize+0x160>
 800097a:	2100      	movs	r1, #0
 800097c:	2069      	movs	r0, #105	; 0x69
 800097e:	f7ff ff06 	bl	800078e <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <SD_disk_initialize+0x160>
 8000988:	e00c      	b.n	80009a4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098a:	2100      	movs	r1, #0
 800098c:	2041      	movs	r0, #65	; 0x41
 800098e:	f7ff fefe 	bl	800078e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <SD_disk_initialize+0x1c4>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1e2      	bne.n	8000966 <SD_disk_initialize+0x12e>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <SD_disk_initialize+0x1c4>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <SD_disk_initialize+0x184>
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	2050      	movs	r0, #80	; 0x50
 80009b2:	f7ff feec 	bl	800078e <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SD_disk_initialize+0x188>
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <SD_disk_initialize+0x1c8>)
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009c6:	f7ff fd91 	bl	80004ec <DESELECT>
	SPI_RxByte();
 80009ca:	f7ff fdd1 	bl	8000570 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e001      	b.n	80009ea <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009e6:	f7ff fe49 	bl	800067c <SD_PowerOff>
	}

	return Stat;
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <SD_disk_initialize+0x1c0>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000458 	.word	0x20000458
 8000a00:	20000048 	.word	0x20000048

08000a04 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SD_disk_status+0x14>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e002      	b.n	8000a1e <SD_disk_status+0x1a>
	return Stat;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SD_disk_status+0x28>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000000 	.word	0x20000000

08000a30 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <SD_disk_read+0x1c>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <SD_disk_read+0x20>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	e051      	b.n	8000af4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <SD_disk_read+0xcc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SD_disk_read+0x32>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e048      	b.n	8000af4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SD_disk_read+0xd0>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <SD_disk_read+0x44>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a74:	f7ff fd2c 	bl	80004d0 <SELECT>

	if (count == 1)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d111      	bne.n	8000aa2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2051      	movs	r0, #81	; 0x51
 8000a82:	f7ff fe84 	bl	800078e <SD_SendCmd>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d129      	bne.n	8000ae0 <SD_disk_read+0xb0>
 8000a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f7ff fe0b 	bl	80006ac <SD_RxDataBlock>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d021      	beq.n	8000ae0 <SD_disk_read+0xb0>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	e01e      	b.n	8000ae0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2052      	movs	r0, #82	; 0x52
 8000aa6:	f7ff fe72 	bl	800078e <SD_SendCmd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d117      	bne.n	8000ae0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab4:	68b8      	ldr	r0, [r7, #8]
 8000ab6:	f7ff fdf9 	bl	80006ac <SD_RxDataBlock>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <SD_disk_read+0xa6>
				buff += 512;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ac6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1ed      	bne.n	8000ab0 <SD_disk_read+0x80>
 8000ad4:	e000      	b.n	8000ad8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ad6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	204c      	movs	r0, #76	; 0x4c
 8000adc:	f7ff fe57 	bl	800078e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae0:	f7ff fd04 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000ae4:	f7ff fd44 	bl	8000570 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000048 	.word	0x20000048

08000b04 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_write+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_write+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e06b      	b.n	8000bfc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <SD_disk_write+0x100>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_write+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e062      	b.n	8000bfc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <SD_disk_write+0x100>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SD_disk_write+0x44>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e059      	b.n	8000bfc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <SD_disk_write+0x104>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <SD_disk_write+0x56>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	025b      	lsls	r3, r3, #9
 8000b58:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b5a:	f7ff fcb9 	bl	80004d0 <SELECT>

	if (count == 1)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d110      	bne.n	8000b86 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	2058      	movs	r0, #88	; 0x58
 8000b68:	f7ff fe11 	bl	800078e <SD_SendCmd>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d13a      	bne.n	8000be8 <SD_disk_write+0xe4>
 8000b72:	21fe      	movs	r1, #254	; 0xfe
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f7ff fdc7 	bl	8000708 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d033      	beq.n	8000be8 <SD_disk_write+0xe4>
			count = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	e030      	b.n	8000be8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <SD_disk_write+0x104>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2077      	movs	r0, #119	; 0x77
 8000b96:	f7ff fdfa 	bl	800078e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	2057      	movs	r0, #87	; 0x57
 8000b9e:	f7ff fdf6 	bl	800078e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2059      	movs	r0, #89	; 0x59
 8000ba6:	f7ff fdf2 	bl	800078e <SD_SendCmd>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11b      	bne.n	8000be8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb0:	21fc      	movs	r1, #252	; 0xfc
 8000bb2:	68b8      	ldr	r0, [r7, #8]
 8000bb4:	f7ff fda8 	bl	8000708 <SD_TxDataBlock>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00a      	beq.n	8000bd4 <SD_disk_write+0xd0>
				buff += 512;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1ee      	bne.n	8000bb0 <SD_disk_write+0xac>
 8000bd2:	e000      	b.n	8000bd6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bd6:	21fd      	movs	r1, #253	; 0xfd
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fd95 	bl	8000708 <SD_TxDataBlock>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <SD_disk_write+0xe4>
			{
				count = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000be8:	f7ff fc80 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000bec:	f7ff fcc0 	bl	8000570 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000048 	.word	0x20000048

08000c0c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	603a      	str	r2, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SD_disk_ioctl+0x1e>
 8000c26:	2304      	movs	r3, #4
 8000c28:	e115      	b.n	8000e56 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d124      	bne.n	8000c80 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d012      	beq.n	8000c64 <SD_disk_ioctl+0x58>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	dc1a      	bgt.n	8000c78 <SD_disk_ioctl+0x6c>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <SD_disk_ioctl+0x40>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d006      	beq.n	8000c58 <SD_disk_ioctl+0x4c>
 8000c4a:	e015      	b.n	8000c78 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c4c:	f7ff fd16 	bl	800067c <SD_PowerOff>
			res = RES_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c56:	e0fc      	b.n	8000e52 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c58:	f7ff fcce 	bl	80005f8 <SD_PowerOn>
			res = RES_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c62:	e0f6      	b.n	8000e52 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	1c5c      	adds	r4, r3, #1
 8000c68:	f7ff fd14 	bl	8000694 <SD_CheckPower>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c76:	e0ec      	b.n	8000e52 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c7e:	e0e8      	b.n	8000e52 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c80:	4b77      	ldr	r3, [pc, #476]	; (8000e60 <SD_disk_ioctl+0x254>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SD_disk_ioctl+0x86>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e0e1      	b.n	8000e56 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c92:	f7ff fc1d 	bl	80004d0 <SELECT>

		switch (ctrl)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2b0d      	cmp	r3, #13
 8000c9a:	f200 80cb 	bhi.w	8000e34 <SD_disk_ioctl+0x228>
 8000c9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <SD_disk_ioctl+0x98>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000d9f 	.word	0x08000d9f
 8000ca8:	08000cdd 	.word	0x08000cdd
 8000cac:	08000d8f 	.word	0x08000d8f
 8000cb0:	08000e35 	.word	0x08000e35
 8000cb4:	08000e35 	.word	0x08000e35
 8000cb8:	08000e35 	.word	0x08000e35
 8000cbc:	08000e35 	.word	0x08000e35
 8000cc0:	08000e35 	.word	0x08000e35
 8000cc4:	08000e35 	.word	0x08000e35
 8000cc8:	08000e35 	.word	0x08000e35
 8000ccc:	08000e35 	.word	0x08000e35
 8000cd0:	08000db1 	.word	0x08000db1
 8000cd4:	08000dd5 	.word	0x08000dd5
 8000cd8:	08000df9 	.word	0x08000df9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2049      	movs	r0, #73	; 0x49
 8000ce0:	f7ff fd55 	bl	800078e <SD_SendCmd>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 80a8 	bne.w	8000e3c <SD_disk_ioctl+0x230>
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcda 	bl	80006ac <SD_RxDataBlock>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 809e 	beq.w	8000e3c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d00:	7b3b      	ldrb	r3, [r7, #12]
 8000d02:	099b      	lsrs	r3, r3, #6
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10e      	bne.n	8000d28 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0a:	7d7b      	ldrb	r3, [r7, #21]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	7d3b      	ldrb	r3, [r7, #20]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d1e:	8bfb      	ldrh	r3, [r7, #30]
 8000d20:	029a      	lsls	r2, r3, #10
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e02e      	b.n	8000d86 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d28:	7c7b      	ldrb	r3, [r7, #17]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	7dbb      	ldrb	r3, [r7, #22]
 8000d32:	09db      	lsrs	r3, r3, #7
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	7d7b      	ldrb	r3, [r7, #21]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 0306 	and.w	r3, r3, #6
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d50:	7d3b      	ldrb	r3, [r7, #20]
 8000d52:	099b      	lsrs	r3, r3, #6
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	7cbb      	ldrb	r3, [r7, #18]
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	3301      	adds	r3, #1
 8000d76:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d78:	8bfa      	ldrh	r2, [r7, #30]
 8000d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7e:	3b09      	subs	r3, #9
 8000d80:	409a      	lsls	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d8c:	e056      	b.n	8000e3c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d9c:	e055      	b.n	8000e4a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d9e:	f7ff fc11 	bl	80005c4 <SD_ReadyWait>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2bff      	cmp	r3, #255	; 0xff
 8000da6:	d14b      	bne.n	8000e40 <SD_disk_ioctl+0x234>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dae:	e047      	b.n	8000e40 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	; 0x49
 8000db4:	f7ff fceb 	bl	800078e <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d142      	bne.n	8000e44 <SD_disk_ioctl+0x238>
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	6a38      	ldr	r0, [r7, #32]
 8000dc2:	f7ff fc73 	bl	80006ac <SD_RxDataBlock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03b      	beq.n	8000e44 <SD_disk_ioctl+0x238>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dd2:	e037      	b.n	8000e44 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	204a      	movs	r0, #74	; 0x4a
 8000dd8:	f7ff fcd9 	bl	800078e <SD_SendCmd>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d132      	bne.n	8000e48 <SD_disk_ioctl+0x23c>
 8000de2:	2110      	movs	r1, #16
 8000de4:	6a38      	ldr	r0, [r7, #32]
 8000de6:	f7ff fc61 	bl	80006ac <SD_RxDataBlock>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02b      	beq.n	8000e48 <SD_disk_ioctl+0x23c>
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000df6:	e027      	b.n	8000e48 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	207a      	movs	r0, #122	; 0x7a
 8000dfc:	f7ff fcc7 	bl	800078e <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d116      	bne.n	8000e34 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e0c:	e00b      	b.n	8000e26 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e0e:	6a3c      	ldr	r4, [r7, #32]
 8000e10:	1c63      	adds	r3, r4, #1
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	f7ff fbac 	bl	8000570 <SPI_RxByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d9ef      	bls.n	8000e0e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e34:	2304      	movs	r3, #4
 8000e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3a:	e006      	b.n	8000e4a <SD_disk_ioctl+0x23e>
			break;
 8000e3c:	bf00      	nop
 8000e3e:	e004      	b.n	8000e4a <SD_disk_ioctl+0x23e>
			break;
 8000e40:	bf00      	nop
 8000e42:	e002      	b.n	8000e4a <SD_disk_ioctl+0x23e>
			break;
 8000e44:	bf00      	nop
 8000e46:	e000      	b.n	8000e4a <SD_disk_ioctl+0x23e>
			break;
 8000e48:	bf00      	nop
		}

		DESELECT();
 8000e4a:	f7ff fb4f 	bl	80004ec <DESELECT>
		SPI_RxByte();
 8000e4e:	f7ff fb8f 	bl	8000570 <SPI_RxByte>
	}

	return res;
 8000e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	372c      	adds	r7, #44	; 0x2c
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fffb 	bl	8001e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f912 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 fa7e 	bl	8001374 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e78:	f000 f954 	bl	8001124 <MX_I2C1_Init>
  MX_FATFS_Init();
 8000e7c:	f004 fbde 	bl	800563c <MX_FATFS_Init>
  MX_SPI1_Init();
 8000e80:	f000 f9be 	bl	8001200 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 8000e84:	f000 f98e 	bl	80011a4 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000e88:	f000 fa36 	bl	80012f8 <MX_SPI3_Init>
  MX_SPI2_Init();
 8000e8c:	f000 f9f6 	bl	800127c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize screen
  enum menuState menu = dir;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000e96:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000e9a:	7013      	strb	r3, [r2, #0]
  SSD1306_Init();
 8000e9c:	f000 fb08 	bl	80014b0 <SSD1306_Init>
  // Initialize SD card
  // some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations
  char* filename = "map.txt";
 8000ea0:	4b73      	ldr	r3, [pc, #460]	; (8001070 <main+0x20c>)
 8000ea2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000ea6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000eaa:	6013      	str	r3, [r2, #0]
//  uint8_t buf_rx[1] = {0x00};
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
//  HAL_SPI_TransmitReceive(&hspi2, buf_tx, buf_rx, 1, 2);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);

  fres = f_mount(&FatFs, "0:", 1); // 1 = mount now
 8000eac:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8000eb0:	3b10      	subs	r3, #16
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	496f      	ldr	r1, [pc, #444]	; (8001074 <main+0x210>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f006 fe0a 	bl	8007ad0 <f_mount>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000ec2:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000ec6:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8000ec8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ecc:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00a      	beq.n	8000eec <main+0x88>
  {
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 fc53 	bl	8001784 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-Mnt", &Font_11x18, 1); // error mounting
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4965      	ldr	r1, [pc, #404]	; (8001078 <main+0x214>)
 8000ee2:	4866      	ldr	r0, [pc, #408]	; (800107c <main+0x218>)
 8000ee4:	f000 fce4 	bl	80018b0 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000ee8:	f000 fba6 	bl	8001638 <SSD1306_UpdateScreen>
  }

  #ifdef DEBUG
  DWORD free_clusters, free_sectors, total_sectors;
  FATFS* getFreeFs;
  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000eec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ef0:	3a08      	subs	r2, #8
 8000ef2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4861      	ldr	r0, [pc, #388]	; (8001080 <main+0x21c>)
 8000efc:	f007 fa01 	bl	8008302 <f_getfree>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000f06:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000f0a:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8000f0c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000f10:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <main+0xcc>
  {
	  SSD1306_GotoXY (0,0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fc31 	bl	8001784 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-GFr", &Font_11x18, 1); // error getting free
 8000f22:	2201      	movs	r2, #1
 8000f24:	4954      	ldr	r1, [pc, #336]	; (8001078 <main+0x214>)
 8000f26:	4857      	ldr	r0, [pc, #348]	; (8001084 <main+0x220>)
 8000f28:	f000 fcc2 	bl	80018b0 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000f2c:	f000 fb84 	bl	8001638 <SSD1306_UpdateScreen>
//	  while(1);
  }
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000f30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000f34:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000f40:	f852 2c88 	ldr.w	r2, [r2, #-136]
 8000f44:	8952      	ldrh	r2, [r2, #10]
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000f4e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000f52:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 8000f54:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000f58:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000f5c:	895b      	ldrh	r3, [r3, #10]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000f64:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000f70:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000f74:	6013      	str	r3, [r2, #0]
  #endif

  fres = f_open(&fil, filename, FA_READ);
 8000f76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8000f80:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8000f84:	6809      	ldr	r1, [r1, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fde8 	bl	8007b5c <f_open>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000f92:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000f96:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK) {
 8000f98:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000f9c:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00a      	beq.n	8000fbc <main+0x158>
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fbeb 	bl	8001784 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-OpF", &Font_11x18, 1); // error opening file
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4931      	ldr	r1, [pc, #196]	; (8001078 <main+0x214>)
 8000fb2:	4835      	ldr	r0, [pc, #212]	; (8001088 <main+0x224>)
 8000fb4:	f000 fc7c 	bl	80018b0 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000fb8:	f000 fb3e 	bl	8001638 <SSD1306_UpdateScreen>
 	  #endif
//	  while(1);
  }

  BYTE readBuf[50];
  TCHAR* rres = f_gets((TCHAR*)readBuf, 50, &fil);
 8000fbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc4:	3b3c      	subs	r3, #60	; 0x3c
 8000fc6:	2132      	movs	r1, #50	; 0x32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 fa4f 	bl	800846c <f_gets>
 8000fce:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000fd2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000fd6:	6018      	str	r0, [r3, #0]
  if (rres == 0)
 8000fd8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000fdc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10a      	bne.n	8000ffc <main+0x198>
  {
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fbcb 	bl	8001784 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-RdF", &Font_11x18, 1); // error reading file
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4921      	ldr	r1, [pc, #132]	; (8001078 <main+0x214>)
 8000ff2:	4826      	ldr	r0, [pc, #152]	; (800108c <main+0x228>)
 8000ff4:	f000 fc5c 	bl	80018b0 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000ff8:	f000 fb1e 	bl	8001638 <SSD1306_UpdateScreen>
      #endif
//	  while(1);
  }
  f_close(&fil);
 8000ffc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001000:	4618      	mov	r0, r3
 8001002:	f007 f954 	bl	80082ae <f_close>
  #ifdef DEBUG
  SSD1306_GotoXY (0,0);
 8001006:	2100      	movs	r1, #0
 8001008:	2000      	movs	r0, #0
 800100a:	f000 fbbb 	bl	8001784 <SSD1306_GotoXY>
  SSD1306_Puts(strcat("File: ", filename), &Font_11x18, 1);
 800100e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001012:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <main+0x22c>)
 800101a:	f007 fbb3 	bl	8008784 <strcat>
 800101e:	4603      	mov	r3, r0
 8001020:	2201      	movs	r2, #1
 8001022:	4915      	ldr	r1, [pc, #84]	; (8001078 <main+0x214>)
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fc43 	bl	80018b0 <SSD1306_Puts>
  SSD1306_GotoXY (11,0);
 800102a:	2100      	movs	r1, #0
 800102c:	200b      	movs	r0, #11
 800102e:	f000 fba9 	bl	8001784 <SSD1306_GotoXY>
  SSD1306_Puts(readBuf, &Font_11x18, 1);
 8001032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001036:	3b3c      	subs	r3, #60	; 0x3c
 8001038:	2201      	movs	r2, #1
 800103a:	490f      	ldr	r1, [pc, #60]	; (8001078 <main+0x214>)
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fc37 	bl	80018b0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001042:	f000 faf9 	bl	8001638 <SSD1306_UpdateScreen>
  HAL_Delay(2000);
 8001046:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800104a:	f000 ff81 	bl	8001f50 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_GotoXY (0,21);
 800104e:	2115      	movs	r1, #21
 8001050:	2000      	movs	r0, #0
 8001052:	f000 fb97 	bl	8001784 <SSD1306_GotoXY>
	  SSD1306_Puts ("HEPL WORLD :)", &Font_11x18, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <main+0x214>)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <main+0x230>)
 800105c:	f000 fc28 	bl	80018b0 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8001060:	f000 faea 	bl	8001638 <SSD1306_UpdateScreen>

	  HAL_Delay (2000);
 8001064:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001068:	f000 ff72 	bl	8001f50 <HAL_Delay>
	  SSD1306_GotoXY (0,21);
 800106c:	e7ef      	b.n	800104e <main+0x1ea>
 800106e:	bf00      	nop
 8001070:	080087bc 	.word	0x080087bc
 8001074:	080087c4 	.word	0x080087c4
 8001078:	20000004 	.word	0x20000004
 800107c:	080087c8 	.word	0x080087c8
 8001080:	080087d4 	.word	0x080087d4
 8001084:	080087d8 	.word	0x080087d8
 8001088:	080087e4 	.word	0x080087e4
 800108c:	080087f0 	.word	0x080087f0
 8001090:	080087fc 	.word	0x080087fc
 8001094:	08008804 	.word	0x08008804

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	; 0x58
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 fb64 	bl	8008774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010be:	f001 ff13 	bl	8002ee8 <HAL_PWREx_ControlVoltageScaling>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010c8:	f000 f9ec 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010cc:	2310      	movs	r3, #16
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 ff55 	bl	8002f94 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010f0:	f000 f9d8 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fb55 	bl	80037bc <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001118:	f000 f9c4 	bl	80014a4 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3758      	adds	r7, #88	; 0x58
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f001 f992 	bl	8002488 <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 f99b 	bl	80014a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f001 fe13 	bl	8002d9c <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 f992 	bl	80014a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f001 fe55 	bl	8002e32 <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f989 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000004c 	.word	0x2000004c
 800119c:	40005400 	.word	0x40005400
 80011a0:	0010061a 	.word	0x0010061a

080011a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_LPUART1_UART_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_LPUART1_UART_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_LPUART1_UART_Init+0x50>)
 80011e2:	f003 fdd3 	bl	8004d8c <HAL_UART_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f95a 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000a0 	.word	0x200000a0
 80011f8:	40008000 	.word	0x40008000
 80011fc:	00033324 	.word	0x00033324

08001200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_SPI1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_SPI1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_SPI1_Init+0x74>)
 800120c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_SPI1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_SPI1_Init+0x74>)
 800121a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800121e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_SPI1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_SPI1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_SPI1_Init+0x74>)
 800122e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001232:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_SPI1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPI1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPI1_Init+0x74>)
 800124e:	2207      	movs	r2, #7
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_SPI1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_SPI1_Init+0x74>)
 800125a:	2208      	movs	r2, #8
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_SPI1_Init+0x74>)
 8001260:	f003 f80c 	bl	800427c <HAL_SPI_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f91b 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000124 	.word	0x20000124
 8001278:	40013000 	.word	0x40013000

0800127c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_SPI2_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_SPI2_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_SPI2_Init+0x74>)
 8001288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_SPI2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_SPI2_Init+0x74>)
 8001296:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800129a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_SPI2_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012b2:	2218      	movs	r2, #24
 80012b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012ca:	2207      	movs	r2, #7
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_SPI2_Init+0x74>)
 80012dc:	f002 ffce 	bl	800427c <HAL_SPI_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f8dd 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000188 	.word	0x20000188
 80012f4:	40003800 	.word	0x40003800

080012f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_SPI3_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_SPI3_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_SPI3_Init+0x74>)
 8001304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_SPI3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_SPI3_Init+0x74>)
 8001312:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001316:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_SPI3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_SPI3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_SPI3_Init+0x74>)
 8001326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_SPI3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_SPI3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_SPI3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_SPI3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_SPI3_Init+0x74>)
 8001346:	2207      	movs	r2, #7
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_SPI3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_SPI3_Init+0x74>)
 8001352:	2208      	movs	r2, #8
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_SPI3_Init+0x74>)
 8001358:	f002 ff90 	bl	800427c <HAL_SPI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 f89f 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001ec 	.word	0x200001ec
 8001370:	40003c00 	.word	0x40003c00

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <MX_GPIO_Init+0x124>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a42      	ldr	r2, [pc, #264]	; (8001498 <MX_GPIO_Init+0x124>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_GPIO_Init+0x124>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_GPIO_Init+0x124>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a3c      	ldr	r2, [pc, #240]	; (8001498 <MX_GPIO_Init+0x124>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <MX_GPIO_Init+0x124>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <MX_GPIO_Init+0x124>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <MX_GPIO_Init+0x124>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <MX_GPIO_Init+0x124>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f248 0110 	movw	r1, #32784	; 0x8010
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f001 f83c 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SD_CS_GPIO_Port, SPI2_SD_CS_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2101      	movs	r1, #1
 80013e4:	482d      	ldr	r0, [pc, #180]	; (800149c <MX_GPIO_Init+0x128>)
 80013e6:	f001 f837 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7161 	mov.w	r1, #900	; 0x384
 80013f0:	482a      	ldr	r0, [pc, #168]	; (800149c <MX_GPIO_Init+0x128>)
 80013f2:	f001 f831 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2108      	movs	r1, #8
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <MX_GPIO_Init+0x12c>)
 80013fc:	f001 f82c 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8001400:	f248 0310 	movw	r3, #32784	; 0x8010
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f000 fea2 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SD_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SD_CS_Pin;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4819      	ldr	r0, [pc, #100]	; (800149c <MX_GPIO_Init+0x128>)
 8001438:	f000 fe94 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800143c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <MX_GPIO_Init+0x128>)
 8001456:	f000 fe85 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <MX_GPIO_Init+0x128>)
 800146e:	f000 fe79 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001472:	2308      	movs	r3, #8
 8001474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800147a:	2302      	movs	r3, #2
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_GPIO_Init+0x12c>)
 800148a:	f000 fe6b 	bl	8002164 <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48001c00 	.word	0x48001c00

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014b6:	f000 fa21 	bl	80018fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014be:	2201      	movs	r2, #1
 80014c0:	2178      	movs	r1, #120	; 0x78
 80014c2:	485b      	ldr	r0, [pc, #364]	; (8001630 <SSD1306_Init+0x180>)
 80014c4:	f001 f964 	bl	8002790 <HAL_I2C_IsDeviceReady>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e0a9      	b.n	8001626 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014d8:	e002      	b.n	80014e0 <SSD1306_Init+0x30>
		p--;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014e6:	22ae      	movs	r2, #174	; 0xae
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	; 0x78
 80014ec:	f000 fa82 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014f0:	2220      	movs	r2, #32
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	; 0x78
 80014f6:	f000 fa7d 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014fa:	2210      	movs	r2, #16
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	; 0x78
 8001500:	f000 fa78 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001504:	22b0      	movs	r2, #176	; 0xb0
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	; 0x78
 800150a:	f000 fa73 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800150e:	22c8      	movs	r2, #200	; 0xc8
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	; 0x78
 8001514:	f000 fa6e 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	; 0x78
 800151e:	f000 fa69 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001522:	2210      	movs	r2, #16
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	; 0x78
 8001528:	f000 fa64 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	; 0x78
 8001532:	f000 fa5f 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001536:	2281      	movs	r2, #129	; 0x81
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fa5a 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001540:	22ff      	movs	r2, #255	; 0xff
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	; 0x78
 8001546:	f000 fa55 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800154a:	22a1      	movs	r2, #161	; 0xa1
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fa50 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001554:	22a6      	movs	r2, #166	; 0xa6
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fa4b 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1:32)
 800155e:	22a8      	movs	r2, #168	; 0xa8
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fa46 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 8001568:	221f      	movs	r2, #31
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fa41 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001572:	22a4      	movs	r2, #164	; 0xa4
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fa3c 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800157c:	22d3      	movs	r2, #211	; 0xd3
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fa37 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-no offset
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fa32 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001590:	22d5      	movs	r2, #213	; 0xd5
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fa2d 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800159a:	22f0      	movs	r2, #240	; 0xf0
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fa28 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015a4:	22d9      	movs	r2, #217	; 0xd9
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa23 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015ae:	2222      	movs	r2, #34	; 0x22
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa1e 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015b8:	22da      	movs	r2, #218	; 0xda
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa19 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015c2:	2212      	movs	r2, #18
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa14 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015cc:	22db      	movs	r2, #219	; 0xdb
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa0f 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015d6:	2220      	movs	r2, #32
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fa0a 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015e0:	228d      	movs	r2, #141	; 0x8d
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 fa05 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015ea:	2214      	movs	r2, #20
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 fa00 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015f4:	22af      	movs	r2, #175	; 0xaf
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 f9fb 	bl	80019f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015fe:	222e      	movs	r2, #46	; 0x2e
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 f9f6 	bl	80019f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001608:	2000      	movs	r0, #0
 800160a:	f000 f843 	bl	8001694 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800160e:	f000 f813 	bl	8001638 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <SSD1306_Init+0x184>)
 8001614:	2200      	movs	r2, #0
 8001616:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SSD1306_Init+0x184>)
 800161a:	2200      	movs	r2, #0
 800161c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SSD1306_Init+0x184>)
 8001620:	2201      	movs	r2, #1
 8001622:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000004c 	.word	0x2000004c
 8001634:	20000450 	.word	0x20000450

08001638 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e01d      	b.n	8001680 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	3b50      	subs	r3, #80	; 0x50
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	2100      	movs	r1, #0
 800164e:	2078      	movs	r0, #120	; 0x78
 8001650:	f000 f9d0 	bl	80019f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2078      	movs	r0, #120	; 0x78
 800165a:	f000 f9cb 	bl	80019f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800165e:	2210      	movs	r2, #16
 8001660:	2100      	movs	r1, #0
 8001662:	2078      	movs	r0, #120	; 0x78
 8001664:	f000 f9c6 	bl	80019f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <SSD1306_UpdateScreen+0x58>)
 800166e:	441a      	add	r2, r3
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	2078      	movs	r0, #120	; 0x78
 8001676:	f000 f957 	bl	8001928 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3301      	adds	r3, #1
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d9de      	bls.n	8001644 <SSD1306_UpdateScreen+0xc>
	}
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000250 	.word	0x20000250

08001694 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <SSD1306_Fill+0x14>
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <SSD1306_Fill+0x16>
 80016a8:	23ff      	movs	r3, #255	; 0xff
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	4619      	mov	r1, r3
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <SSD1306_Fill+0x2c>)
 80016b2:	f007 f85f 	bl	8008774 <memset>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000250 	.word	0x20000250

080016c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
 80016ce:	460b      	mov	r3, r1
 80016d0:	80bb      	strh	r3, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	70fb      	strb	r3, [r7, #3]
	if (
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	d848      	bhi.n	800176e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	2b1f      	cmp	r3, #31
 80016e0:	d845      	bhi.n	800176e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <SSD1306_DrawPixel+0xb8>)
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d11a      	bne.n	8001734 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	88bb      	ldrh	r3, [r7, #4]
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	b298      	uxth	r0, r3
 8001706:	4603      	mov	r3, r0
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	4413      	add	r3, r2
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <SSD1306_DrawPixel+0xbc>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	b25a      	sxtb	r2, r3
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b259      	sxtb	r1, r3
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	01db      	lsls	r3, r3, #7
 800172a:	4413      	add	r3, r2
 800172c:	b2c9      	uxtb	r1, r1
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <SSD1306_DrawPixel+0xbc>)
 8001730:	54d1      	strb	r1, [r2, r3]
 8001732:	e01d      	b.n	8001770 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	08db      	lsrs	r3, r3, #3
 800173a:	b298      	uxth	r0, r3
 800173c:	4603      	mov	r3, r0
 800173e:	01db      	lsls	r3, r3, #7
 8001740:	4413      	add	r3, r2
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <SSD1306_DrawPixel+0xbc>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	b25a      	sxtb	r2, r3
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	b25b      	sxtb	r3, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	4013      	ands	r3, r2
 800175c:	b259      	sxtb	r1, r3
 800175e:	88fa      	ldrh	r2, [r7, #6]
 8001760:	4603      	mov	r3, r0
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4413      	add	r3, r2
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SSD1306_DrawPixel+0xbc>)
 800176a:	54d1      	strb	r1, [r2, r3]
 800176c:	e000      	b.n	8001770 <SSD1306_DrawPixel+0xac>
		return;
 800176e:	bf00      	nop
	}
}
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000450 	.word	0x20000450
 8001780:	20000250 	.word	0x20000250

08001784 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	80fb      	strh	r3, [r7, #6]
 8001790:	4613      	mov	r3, r2
 8001792:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SSD1306_GotoXY+0x28>)
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <SSD1306_GotoXY+0x28>)
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	8053      	strh	r3, [r2, #2]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20000450 	.word	0x20000450

080017b0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <SSD1306_Putc+0xfc>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
	if (
 80017cc:	2b7f      	cmp	r3, #127	; 0x7f
 80017ce:	dc07      	bgt.n	80017e0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <SSD1306_Putc+0xfc>)
 80017d2:	885b      	ldrh	r3, [r3, #2]
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017dc:	2b1f      	cmp	r3, #31
 80017de:	dd01      	ble.n	80017e4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e05e      	b.n	80018a2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e04b      	b.n	8001882 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	3b20      	subs	r3, #32
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	7849      	ldrb	r1, [r1, #1]
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	440b      	add	r3, r1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e030      	b.n	8001870 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <SSD1306_Putc+0xfc>)
 8001820:	881a      	ldrh	r2, [r3, #0]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4413      	add	r3, r2
 8001828:	b298      	uxth	r0, r3
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <SSD1306_Putc+0xfc>)
 800182c:	885a      	ldrh	r2, [r3, #2]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	b29b      	uxth	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	79ba      	ldrb	r2, [r7, #6]
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff ff43 	bl	80016c4 <SSD1306_DrawPixel>
 800183e:	e014      	b.n	800186a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <SSD1306_Putc+0xfc>)
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b298      	uxth	r0, r3
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <SSD1306_Putc+0xfc>)
 800184e:	885a      	ldrh	r2, [r3, #2]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b299      	uxth	r1, r3
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	f7ff ff2d 	bl	80016c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	3301      	adds	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4293      	cmp	r3, r2
 800187a:	d3c8      	bcc.n	800180e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	461a      	mov	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4293      	cmp	r3, r2
 800188c:	d3ad      	bcc.n	80017ea <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <SSD1306_Putc+0xfc>)
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <SSD1306_Putc+0xfc>)
 800189e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000450 	.word	0x20000450

080018b0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018be:	e012      	b.n	80018e6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff71 	bl	80017b0 <SSD1306_Putc>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d002      	beq.n	80018e0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	e008      	b.n	80018f2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1e8      	bne.n	80018c0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	781b      	ldrb	r3, [r3, #0]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <ssd1306_I2C_Init+0x28>)
 8001904:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001906:	e002      	b.n	800190e <ssd1306_I2C_Init+0x12>
		p--;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	0003d090 	.word	0x0003d090

08001928 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b0c7      	sub	sp, #284	; 0x11c
 800192c:	af02      	add	r7, sp, #8
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001936:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800193a:	600a      	str	r2, [r1, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001942:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001946:	4622      	mov	r2, r4
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001952:	4602      	mov	r2, r0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800195a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800195e:	460a      	mov	r2, r1
 8001960:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800196a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800196e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800197c:	e015      	b.n	80019aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800197e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001982:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001986:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	441a      	add	r2, r3
 800198e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001992:	3301      	adds	r3, #1
 8001994:	7811      	ldrb	r1, [r2, #0]
 8001996:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800199a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800199e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d8df      	bhi.n	800197e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b299      	uxth	r1, r3
 80019ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f107 020c 	add.w	r2, r7, #12
 80019dc:	200a      	movs	r0, #10
 80019de:	9000      	str	r0, [sp, #0]
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80019e2:	f000 fde1 	bl	80025a8 <HAL_I2C_Master_Transmit>
}
 80019e6:	bf00      	nop
 80019e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	2000004c 	.word	0x2000004c

080019f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	460b      	mov	r3, r1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	4613      	mov	r3, r2
 8001a04:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <ssd1306_I2C_Write+0x38>)
 8001a1e:	f000 fdc3 	bl	80025a8 <HAL_I2C_Master_Transmit>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000004c 	.word	0x2000004c

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_MspInit+0x44>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_MspInit+0x44>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6613      	str	r3, [r2, #96]	; 0x60
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_MspInit+0x44>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_MspInit+0x44>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_MspInit+0x44>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_MspInit+0x44>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0a2      	sub	sp, #136	; 0x88
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2260      	movs	r2, #96	; 0x60
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f006 fe6b 	bl	8008774 <memset>
  if(hi2c->Instance==I2C1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_I2C_MspInit+0xac>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d139      	bne.n	8001b1c <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001aa8:	2340      	movs	r3, #64	; 0x40
 8001aaa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 f8a5 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ac0:	f7ff fcf0 	bl	80014a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_I2C_MspInit+0xb0>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_I2C_MspInit+0xb0>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_I2C_MspInit+0xb0>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001adc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ae0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae2:	2312      	movs	r3, #18
 8001ae4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af0:	2304      	movs	r3, #4
 8001af2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b00:	f000 fb30 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_I2C_MspInit+0xb0>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_I2C_MspInit+0xb0>)
 8001b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_I2C_MspInit+0xb0>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3788      	adds	r7, #136	; 0x88
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40005400 	.word	0x40005400
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0a2      	sub	sp, #136	; 0x88
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2260      	movs	r2, #96	; 0x60
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 fe11 	bl	8008774 <memset>
  if(huart->Instance==LPUART1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d138      	bne.n	8001bce <HAL_UART_MspInit+0xa2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 f84b 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b74:	f7ff fc96 	bl	80014a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_UART_MspInit+0xb0>)
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_UART_MspInit+0xb0>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_UART_MspInit+0xb0>)
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_UART_MspInit+0xb0>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_UART_MspInit+0xb0>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_UART_MspInit+0xb0>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f000 facb 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3788      	adds	r7, #136	; 0x88
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40008000 	.word	0x40008000
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a46      	ldr	r2, [pc, #280]	; (8001d18 <HAL_SPI_MspInit+0x138>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d129      	bne.n	8001c56 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c06:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c32:	23e0      	movs	r3, #224	; 0xe0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c42:	2305      	movs	r3, #5
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f000 fa88 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c54:	e05b      	b.n	8001d0e <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a31      	ldr	r2, [pc, #196]	; (8001d20 <HAL_SPI_MspInit+0x140>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d129      	bne.n	8001cb4 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c60:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001c90:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	481d      	ldr	r0, [pc, #116]	; (8001d24 <HAL_SPI_MspInit+0x144>)
 8001cae:	f000 fa59 	bl	8002164 <HAL_GPIO_Init>
}
 8001cb2:	e02c      	b.n	8001d0e <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI3)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_SPI_MspInit+0x148>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d127      	bne.n	8001d0e <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_SPI_MspInit+0x13c>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cee:	2338      	movs	r3, #56	; 0x38
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	4619      	mov	r1, r3
 8001d08:	4806      	ldr	r0, [pc, #24]	; (8001d24 <HAL_SPI_MspInit+0x144>)
 8001d0a:	f000 fa2b 	bl	8002164 <HAL_GPIO_Init>
}
 8001d0e:	bf00      	nop
 8001d10:	3738      	adds	r7, #56	; 0x38
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013000 	.word	0x40013000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40003800 	.word	0x40003800
 8001d24:	48000400 	.word	0x48000400
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <SDTimer_Handler+0x40>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <SDTimer_Handler+0x1c>
    Timer1--;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <SDTimer_Handler+0x40>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <SDTimer_Handler+0x40>)
 8001d46:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <SDTimer_Handler+0x44>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <SDTimer_Handler+0x34>
    Timer2--;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <SDTimer_Handler+0x44>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SDTimer_Handler+0x44>)
 8001d5e:	801a      	strh	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000458 	.word	0x20000458
 8001d70:	2000045a 	.word	0x2000045a

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <SysTick_Handler+0x30>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <SysTick_Handler+0x30>)
 8001dcc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <SysTick_Handler+0x30>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d904      	bls.n	8001de2 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Handler+0x30>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001dde:	f7ff ffa5 	bl	8001d2c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de2:	f000 f895 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000456 	.word	0x20000456

08001df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e18:	f7ff ffea 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	; (8001e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <LoopForever+0xe>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	; (8001e60 <LoopForever+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f006 fc73 	bl	800872c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e46:	f7ff f80d 	bl	8000e64 <main>

08001e4a <LoopForever>:

LoopForever:
    b LoopForever
 8001e4a:	e7fe      	b.n	8001e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001e58:	08009a50 	.word	0x08009a50
  ldr r2, =_sbss
 8001e5c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001e60:	2000069c 	.word	0x2000069c

08001e64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC1_IRQHandler>

08001e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f943 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e76:	200f      	movs	r0, #15
 8001e78:	f000 f80e 	bl	8001e98 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	e001      	b.n	8001e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e88:	f7ff fdd2 	bl	8001a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_InitTick+0x6c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_InitTick+0x70>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_InitTick+0x6c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f941 	bl	800214a <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d809      	bhi.n	8001ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f919 	bl	8002112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_InitTick+0x74>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e007      	b.n	8001ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e004      	b.n	8001ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e001      	b.n	8001ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000014 	.word	0x20000014
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000010 	.word	0x20000010

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000014 	.word	0x20000014
 8001f34:	2000045c 	.word	0x2000045c

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2000045c 	.word	0x2000045c

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff47 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff5c 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb0 	bl	80020b8 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	e154      	b.n	800241e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8146 	beq.w	8002418 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d005      	beq.n	80021a4 <HAL_GPIO_Init+0x40>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d130      	bne.n	8002206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021da:	2201      	movs	r2, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0201 	and.w	r2, r3, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b03      	cmp	r3, #3
 8002210:	d017      	beq.n	8002242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d123      	bne.n	8002296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	6939      	ldr	r1, [r7, #16]
 8002292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0203 	and.w	r2, r3, #3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80a0 	beq.w	8002418 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d8:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_GPIO_Init+0x2d8>)
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_GPIO_Init+0x2d8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6613      	str	r3, [r2, #96]	; 0x60
 80022e4:	4b55      	ldr	r3, [pc, #340]	; (800243c <HAL_GPIO_Init+0x2d8>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f0:	4a53      	ldr	r2, [pc, #332]	; (8002440 <HAL_GPIO_Init+0x2dc>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800231a:	d019      	beq.n	8002350 <HAL_GPIO_Init+0x1ec>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a49      	ldr	r2, [pc, #292]	; (8002444 <HAL_GPIO_Init+0x2e0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d013      	beq.n	800234c <HAL_GPIO_Init+0x1e8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a48      	ldr	r2, [pc, #288]	; (8002448 <HAL_GPIO_Init+0x2e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00d      	beq.n	8002348 <HAL_GPIO_Init+0x1e4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a47      	ldr	r2, [pc, #284]	; (800244c <HAL_GPIO_Init+0x2e8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_Init+0x1e0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a46      	ldr	r2, [pc, #280]	; (8002450 <HAL_GPIO_Init+0x2ec>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <HAL_GPIO_Init+0x1dc>
 800233c:	2304      	movs	r3, #4
 800233e:	e008      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002340:	2307      	movs	r3, #7
 8002342:	e006      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002344:	2303      	movs	r3, #3
 8002346:	e004      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002348:	2302      	movs	r3, #2
 800234a:	e002      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_GPIO_Init+0x1ee>
 8002350:	2300      	movs	r3, #0
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	f002 0203 	and.w	r2, r2, #3
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	4093      	lsls	r3, r2
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002362:	4937      	ldr	r1, [pc, #220]	; (8002440 <HAL_GPIO_Init+0x2dc>)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002370:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002394:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800239a:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e8:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f aea3 	bne.w	8002174 <HAL_GPIO_Init+0x10>
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	48000400 	.word	0x48000400
 8002448:	48000800 	.word	0x48000800
 800244c:	48000c00 	.word	0x48000c00
 8002450:	48001000 	.word	0x48001000
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	4613      	mov	r3, r2
 8002466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002468:	787b      	ldrb	r3, [r7, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002474:	e002      	b.n	800247c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e081      	b.n	800259e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff fae2 	bl	8001a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	e006      	b.n	8002510 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800250e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d104      	bne.n	8002522 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002534:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002544:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69d9      	ldr	r1, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	460b      	mov	r3, r1
 80025b6:	817b      	strh	r3, [r7, #10]
 80025b8:	4613      	mov	r3, r2
 80025ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	f040 80da 	bne.w	800277e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2C_Master_Transmit+0x30>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e0d3      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1d8>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e0:	f7ff fcaa 	bl	8001f38 <HAL_GetTick>
 80025e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2319      	movs	r3, #25
 80025ec:	2201      	movs	r2, #1
 80025ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f9f7 	bl	80029e6 <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0be      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	; 0x21
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2210      	movs	r2, #16
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2bff      	cmp	r3, #255	; 0xff
 8002632:	d90e      	bls.n	8002652 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	b2da      	uxtb	r2, r3
 8002640:	8979      	ldrh	r1, [r7, #10]
 8002642:	4b51      	ldr	r3, [pc, #324]	; (8002788 <HAL_I2C_Master_Transmit+0x1e0>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fb74 	bl	8002d38 <I2C_TransferConfig>
 8002650:	e06c      	b.n	800272c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	4b48      	ldr	r3, [pc, #288]	; (8002788 <HAL_I2C_Master_Transmit+0x1e0>)
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fb63 	bl	8002d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002672:	e05b      	b.n	800272c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f9f4 	bl	8002a66 <I2C_WaitOnTXISFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e07b      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d034      	beq.n	800272c <HAL_I2C_Master_Transmit+0x184>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d130      	bne.n	800272c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f986 	bl	80029e6 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04d      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d90e      	bls.n	800270c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fb17 	bl	8002d38 <I2C_TransferConfig>
 800270a:	e00f      	b.n	800272c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fb06 	bl	8002d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d19e      	bne.n	8002674 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	6a39      	ldr	r1, [r7, #32]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f9d3 	bl	8002ae6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e01a      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2220      	movs	r2, #32
 8002750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_I2C_Master_Transmit+0x1e4>)
 800275e:	400b      	ands	r3, r1
 8002760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	80002000 	.word	0x80002000
 800278c:	fe00e800 	.word	0xfe00e800

08002790 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	f040 80f1 	bne.w	8002994 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
 80027c4:	e0e7      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2C_IsDeviceReady+0x44>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0e0      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_I2C_IsDeviceReady+0x72>
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002800:	e004      	b.n	800280c <HAL_I2C_IsDeviceReady+0x7c>
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002808:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002812:	f7ff fb91 	bl	8001f38 <HAL_GetTick>
 8002816:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b20      	cmp	r3, #32
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b10      	cmp	r3, #16
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002844:	e034      	b.n	80028b0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d01a      	beq.n	8002884 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7ff fb73 	bl	8001f38 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <HAL_I2C_IsDeviceReady+0xd4>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e088      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b20      	cmp	r3, #32
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028b0:	7ffb      	ldrb	r3, [r7, #31]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_I2C_IsDeviceReady+0x12c>
 80028b6:	7fbb      	ldrb	r3, [r7, #30]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0c4      	beq.n	8002846 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d01a      	beq.n	8002900 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2120      	movs	r1, #32
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f886 	bl	80029e6 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e058      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2220      	movs	r2, #32
 80028ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e04a      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	2120      	movs	r1, #32
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f86b 	bl	80029e6 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e03d      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	d118      	bne.n	8002964 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002940:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	2120      	movs	r1, #32
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f84a 	bl	80029e6 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01c      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	f63f af3b 	bhi.w	80027ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d103      	bne.n	80029bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2200      	movs	r2, #0
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d007      	beq.n	80029da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	619a      	str	r2, [r3, #24]
  }
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f6:	e022      	b.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d01e      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a00:	f7ff fa9a 	bl	8001f38 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d113      	bne.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d0cd      	beq.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a72:	e02c      	b.n	8002ace <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f871 	bl	8002b60 <I2C_IsErrorOccurred>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e02a      	b.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d01e      	beq.n	8002ace <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a90:	f7ff fa52 	bl	8001f38 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d302      	bcc.n	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d113      	bne.n	8002ace <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e007      	b.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d1cb      	bne.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af2:	e028      	b.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f831 	bl	8002b60 <I2C_IsErrorOccurred>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e026      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7ff fa16 	bl	8001f38 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d1cf      	bne.n	8002af4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d075      	beq.n	8002c78 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b94:	e056      	b.n	8002c44 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d052      	beq.n	8002c44 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7ff f9cb 	bl	8001f38 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_IsErrorOccurred+0x54>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d147      	bne.n	8002c44 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd6:	d12e      	bne.n	8002c36 <I2C_IsErrorOccurred+0xd6>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bde:	d02a      	beq.n	8002c36 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d027      	beq.n	8002c36 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bf6:	f7ff f99f 	bl	8001f38 <HAL_GetTick>
 8002bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bfc:	e01b      	b.n	8002c36 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bfe:	f7ff f99b 	bl	8001f38 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b19      	cmp	r3, #25
 8002c0a:	d914      	bls.n	8002c36 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d1dc      	bne.n	8002bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d003      	beq.n	8002c5a <I2C_IsErrorOccurred+0xfa>
 8002c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d09d      	beq.n	8002b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2220      	movs	r2, #32
 8002c68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f043 0308 	orr.w	r3, r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01c      	beq.n	8002d28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fe55 	bl	800299e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <I2C_IsErrorOccurred+0x1d4>)
 8002d00:	400b      	ands	r3, r1
 8002d02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	fe00e800 	.word	0xfe00e800

08002d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	4613      	mov	r3, r2
 8002d48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d4a:	897b      	ldrh	r3, [r7, #10]
 8002d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d50:	7a7b      	ldrb	r3, [r7, #9]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	0d5b      	lsrs	r3, r3, #21
 8002d72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <I2C_TransferConfig+0x60>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	ea02 0103 	and.w	r1, r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	03ff63ff 	.word	0x03ff63ff

08002d9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d138      	bne.n	8002e24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e032      	b.n	8002e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d139      	bne.n	8002ebc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e033      	b.n	8002ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2224      	movs	r2, #36	; 0x24
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef6:	d130      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f04:	d038      	beq.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2232      	movs	r2, #50	; 0x32
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2c:	e002      	b.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f40:	d102      	bne.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f2      	bne.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d110      	bne.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e00f      	b.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d007      	beq.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f70:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	431bde83 	.word	0x431bde83

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f000 bc02 	b.w	80037ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa8:	4b96      	ldr	r3, [pc, #600]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb2:	4b94      	ldr	r3, [pc, #592]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80e4 	beq.w	8003192 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x4c>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	f040 808b 	bne.w	80030ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f040 8087 	bne.w	80030ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe0:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x64>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e3d9      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_RCC_OscConfig+0x7e>
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003010:	e005      	b.n	800301e <HAL_RCC_OscConfig+0x8a>
 8003012:	4b7c      	ldr	r3, [pc, #496]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301e:	4293      	cmp	r3, r2
 8003020:	d223      	bcs.n	800306a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fd8c 	bl	8003b44 <RCC_SetFlashLatencyFromMSIRange>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e3ba      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003036:	4b73      	ldr	r3, [pc, #460]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a72      	ldr	r2, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b70      	ldr	r3, [pc, #448]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	496d      	ldr	r1, [pc, #436]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003054:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	4968      	ldr	r1, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	e025      	b.n	80030b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800306a:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a65      	ldr	r2, [pc, #404]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4960      	ldr	r1, [pc, #384]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	495b      	ldr	r1, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fd4c 	bl	8003b44 <RCC_SetFlashLatencyFromMSIRange>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e37a      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b6:	f000 fc81 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4950      	ldr	r1, [pc, #320]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_RCC_OscConfig+0x278>)
 80030d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030d6:	4b4e      	ldr	r3, [pc, #312]	; (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fedc 	bl	8001e98 <HAL_InitTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d052      	beq.n	8003190 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	e35e      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d032      	beq.n	800315c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a42      	ldr	r2, [pc, #264]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003102:	f7fe ff19 	bl	8001f38 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800310a:	f7fe ff15 	bl	8001f38 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e347      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003128:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a35      	ldr	r2, [pc, #212]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800312e:	f043 0308 	orr.w	r3, r3, #8
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4930      	ldr	r1, [pc, #192]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	492b      	ldr	r1, [pc, #172]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
 800315a:	e01a      	b.n	8003192 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a28      	ldr	r2, [pc, #160]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003168:	f7fe fee6 	bl	8001f38 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003170:	f7fe fee2 	bl	8001f38 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e314      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1dc>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d073      	beq.n	8003286 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_OscConfig+0x21c>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d10e      	bne.n	80031c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d063      	beq.n	8003284 <HAL_RCC_OscConfig+0x2f0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d15f      	bne.n	8003284 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e2f1      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x24c>
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e025      	b.n	800322c <HAL_RCC_OscConfig+0x298>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d114      	bne.n	8003214 <HAL_RCC_OscConfig+0x280>
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a05      	ldr	r2, [pc, #20]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a02      	ldr	r2, [pc, #8]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e013      	b.n	800322c <HAL_RCC_OscConfig+0x298>
 8003204:	40021000 	.word	0x40021000
 8003208:	080095b8 	.word	0x080095b8
 800320c:	2000000c 	.word	0x2000000c
 8003210:	20000010 	.word	0x20000010
 8003214:	4ba0      	ldr	r3, [pc, #640]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a9f      	ldr	r2, [pc, #636]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b9d      	ldr	r3, [pc, #628]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a9c      	ldr	r2, [pc, #624]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe fe80 	bl	8001f38 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe fe7c 	bl	8001f38 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e2ae      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324e:	4b92      	ldr	r3, [pc, #584]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x2a8>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fe6c 	bl	8001f38 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe fe68 	bl	8001f38 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e29a      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x2d0>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d060      	beq.n	8003354 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x310>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d116      	bne.n	80032d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a4:	4b7c      	ldr	r3, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_OscConfig+0x328>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e277      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	4973      	ldr	r1, [pc, #460]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d0:	e040      	b.n	8003354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d023      	beq.n	8003322 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032da:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6e      	ldr	r2, [pc, #440]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80032e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fe fe27 	bl	8001f38 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ee:	f7fe fe23 	bl	8001f38 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e255      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	495f      	ldr	r1, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
 8003320:	e018      	b.n	8003354 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003322:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe fe03 	bl	8001f38 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe fdff 	bl	8001f38 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e231      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03c      	beq.n	80033da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	4a4a      	ldr	r2, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe fdde 	bl	8001f38 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003380:	f7fe fdda 	bl	8001f38 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e20c      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <HAL_RCC_OscConfig+0x3ec>
 80033a0:	e01b      	b.n	80033da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80033a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a8:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe fdc1 	bl	8001f38 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ba:	f7fe fdbd 	bl	8001f38 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1ef      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033cc:	4b32      	ldr	r3, [pc, #200]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ef      	bne.n	80033ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a6 	beq.w	8003534 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	4a26      	ldr	r2, [pc, #152]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	; 0x58
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003410:	2301      	movs	r3, #1
 8003412:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <HAL_RCC_OscConfig+0x508>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d118      	bne.n	8003452 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_RCC_OscConfig+0x508>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_RCC_OscConfig+0x508>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342c:	f7fe fd84 	bl	8001f38 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003434:	f7fe fd80 	bl	8001f38 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1b2      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_RCC_OscConfig+0x508>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_RCC_OscConfig+0x4d8>
 800345a:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346a:	e029      	b.n	80034c0 <HAL_RCC_OscConfig+0x52c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b05      	cmp	r3, #5
 8003472:	d115      	bne.n	80034a0 <HAL_RCC_OscConfig+0x50c>
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	4a03      	ldr	r2, [pc, #12]	; (8003498 <HAL_RCC_OscConfig+0x504>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003494:	e014      	b.n	80034c0 <HAL_RCC_OscConfig+0x52c>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	4b9a      	ldr	r3, [pc, #616]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	4a99      	ldr	r2, [pc, #612]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b0:	4b96      	ldr	r3, [pc, #600]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a95      	ldr	r2, [pc, #596]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d016      	beq.n	80034f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fd36 	bl	8001f38 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fd32 	bl	8001f38 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e162      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ed      	beq.n	80034d0 <HAL_RCC_OscConfig+0x53c>
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fd1f 	bl	8001f38 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fd1b 	bl	8001f38 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e14b      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003514:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ed      	bne.n	80034fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_RCC_OscConfig+0x778>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4a77      	ldr	r2, [pc, #476]	; (800370c <HAL_RCC_OscConfig+0x778>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03c      	beq.n	80035ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003548:	4b70      	ldr	r3, [pc, #448]	; (800370c <HAL_RCC_OscConfig+0x778>)
 800354a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800354e:	4a6f      	ldr	r2, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe fcee 	bl	8001f38 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003560:	f7fe fcea 	bl	8001f38 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e11c      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003572:	4b66      	ldr	r3, [pc, #408]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCC_OscConfig+0x5cc>
 8003580:	e01b      	b.n	80035ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003582:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003588:	4a60      	ldr	r2, [pc, #384]	; (800370c <HAL_RCC_OscConfig+0x778>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe fcd1 	bl	8001f38 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359a:	f7fe fccd 	bl	8001f38 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0ff      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ac:	4b57      	ldr	r3, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80035ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80f3 	beq.w	80037aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	f040 80c9 	bne.w	8003760 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ce:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 0203 	and.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d12c      	bne.n	800363c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	3b01      	subs	r3, #1
 80035ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d123      	bne.n	800363c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d11b      	bne.n	800363c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d113      	bne.n	800363c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d109      	bne.n	800363c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	3b01      	subs	r3, #1
 8003636:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d06b      	beq.n	8003714 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d062      	beq.n	8003708 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0ac      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800365c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800365e:	f7fe fc6b 	bl	8001f38 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe fc67 	bl	8001f38 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e099      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_OscConfig+0x778>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCC_OscConfig+0x778>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_RCC_OscConfig+0x77c>)
 800368a:	4013      	ands	r3, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003694:	3a01      	subs	r2, #1
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800369e:	0212      	lsls	r2, r2, #8
 80036a0:	4311      	orrs	r1, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036a6:	0852      	lsrs	r2, r2, #1
 80036a8:	3a01      	subs	r2, #1
 80036aa:	0552      	lsls	r2, r2, #21
 80036ac:	4311      	orrs	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036b2:	0852      	lsrs	r2, r2, #1
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0652      	lsls	r2, r2, #25
 80036b8:	4311      	orrs	r1, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036be:	06d2      	lsls	r2, r2, #27
 80036c0:	430a      	orrs	r2, r1
 80036c2:	4912      	ldr	r1, [pc, #72]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0f      	ldr	r2, [pc, #60]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80036ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a0c      	ldr	r2, [pc, #48]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80036da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e0:	f7fe fc2a 	bl	8001f38 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fc26 	bl	8001f38 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e058      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_RCC_OscConfig+0x778>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003706:	e050      	b.n	80037aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e04f      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
 800370c:	40021000 	.word	0x40021000
 8003710:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d144      	bne.n	80037aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 8003732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003738:	f7fe fbfe 	bl	8001f38 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe fbfa 	bl	8001f38 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e02c      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x7ac>
 800375e:	e024      	b.n	80037aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d01f      	beq.n	80037a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 800376c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fe fbe1 	bl	8001f38 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe fbdd 	bl	8001f38 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e00f      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	4905      	ldr	r1, [pc, #20]	; (80037b4 <HAL_RCC_OscConfig+0x820>)
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_OscConfig+0x824>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	60cb      	str	r3, [r1, #12]
 80037a4:	e001      	b.n	80037aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	feeefffc 	.word	0xfeeefffc

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0e7      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b75      	ldr	r3, [pc, #468]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b72      	ldr	r3, [pc, #456]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4970      	ldr	r1, [pc, #448]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b6e      	ldr	r3, [pc, #440]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0cf      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b66      	ldr	r3, [pc, #408]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	429a      	cmp	r2, r3
 800381a:	d908      	bls.n	800382e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b63      	ldr	r3, [pc, #396]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4960      	ldr	r1, [pc, #384]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04c      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	4b5a      	ldr	r3, [pc, #360]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d121      	bne.n	8003892 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0a6      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e09a      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003872:	4b4e      	ldr	r3, [pc, #312]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e08e      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e086      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4943      	ldr	r1, [pc, #268]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a4:	f7fe fb48 	bl	8001f38 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe fb44 	bl	8001f38 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e06e      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d208      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	492b      	ldr	r1, [pc, #172]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d210      	bcs.n	8003932 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 0207 	bic.w	r2, r3, #7
 8003918:	4923      	ldr	r1, [pc, #140]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003920:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e036      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	4918      	ldr	r1, [pc, #96]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4910      	ldr	r1, [pc, #64]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003970:	f000 f824 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCC_ClockConfig+0x1f0>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	490b      	ldr	r1, [pc, #44]	; (80039b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1f8>)
 800398e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fa7f 	bl	8001e98 <HAL_InitTick>
 800399a:	4603      	mov	r3, r0
 800399c:	72fb      	strb	r3, [r7, #11]

  return status;
 800399e:	7afb      	ldrb	r3, [r7, #11]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40021000 	.word	0x40021000
 80039b0:	080095b8 	.word	0x080095b8
 80039b4:	2000000c 	.word	0x2000000c
 80039b8:	20000010 	.word	0x20000010

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d4:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x34>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d121      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d11e      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e005      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a18:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d102      	bne.n	8003a3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_GetSysClockFreq+0x110>)
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e004      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d134      	bne.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d003      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0xac>
 8003a60:	e005      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_RCC_GetSysClockFreq+0x110>)
 8003a64:	617b      	str	r3, [r7, #20]
      break;
 8003a66:	e005      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a6a:	617b      	str	r3, [r7, #20]
      break;
 8003a6c:	e002      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	617b      	str	r3, [r7, #20]
      break;
 8003a72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	3301      	adds	r3, #1
 8003a80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	fb03 f202 	mul.w	r2, r3, r2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	0e5b      	lsrs	r3, r3, #25
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	080095d0 	.word	0x080095d0
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200

08003ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2000000c 	.word	0x2000000c

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	080095c8 	.word	0x080095c8

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b1c:	f7ff ffda 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4904      	ldr	r1, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	080095c8 	.word	0x080095c8

08003b44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b5c:	f7ff f9b6 	bl	8002ecc <HAL_PWREx_GetVoltageRange>
 8003b60:	6178      	str	r0, [r7, #20]
 8003b62:	e014      	b.n	8003b8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b70:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b7c:	f7ff f9a6 	bl	8002ecc <HAL_PWREx_GetVoltageRange>
 8003b80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b94:	d10b      	bne.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d919      	bls.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003ba0:	d902      	bls.n	8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e013      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ba8:	2301      	movs	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	e010      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d902      	bls.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	e00a      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d102      	bne.n	8003bc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	e004      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d101      	bne.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bcc:	2301      	movs	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 0207 	bic.w	r2, r3, #7
 8003bd8:	4909      	ldr	r1, [pc, #36]	; (8003c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40022000 	.word	0x40022000

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c10:	2300      	movs	r3, #0
 8003c12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c28:	d01a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c2e:	d814      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c38:	d10f      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c46:	e00c      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fa22 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c68:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	494e      	ldr	r1, [pc, #312]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 809e 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c96:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a39      	ldr	r2, [pc, #228]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe f930 	bl	8001f38 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fe f92c 	bl	8001f38 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	74fb      	strb	r3, [r7, #19]
        break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d15a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d019      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d4a:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f8ec 	bl	8001f38 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	e00b      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fe f8e8 	bl	8001f38 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d902      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	74fb      	strb	r3, [r7, #19]
            break;
 8003d7a:	e006      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ec      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	4a8c      	ldr	r2, [pc, #560]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4b87      	ldr	r3, [pc, #540]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4983      	ldr	r1, [pc, #524]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	497b      	ldr	r1, [pc, #492]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	4972      	ldr	r1, [pc, #456]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	496a      	ldr	r1, [pc, #424]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	4961      	ldr	r1, [pc, #388]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e84:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4959      	ldr	r1, [pc, #356]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea6:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4950      	ldr	r1, [pc, #320]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	4948      	ldr	r1, [pc, #288]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eea:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	493f      	ldr	r1, [pc, #252]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d028      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a31      	ldr	r2, [pc, #196]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f36:	60d3      	str	r3, [r2, #12]
 8003f38:	e011      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f8a4 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f88:	d106      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f94:	60d3      	str	r3, [r2, #12]
 8003f96:	e011      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f875 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02b      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe6:	d109      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a02      	ldr	r2, [pc, #8]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	e014      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004004:	d10c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	2101      	movs	r1, #1
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f843 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800401c:	7cfb      	ldrb	r3, [r7, #19]
 800401e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01c      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404a:	d10c      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f820 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	4904      	ldr	r1, [pc, #16]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004088:	7cbb      	ldrb	r3, [r7, #18]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000

08004098 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040a6:	4b74      	ldr	r3, [pc, #464]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040b2:	4b71      	ldr	r3, [pc, #452]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d10d      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
       ||
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040ca:	4b6b      	ldr	r3, [pc, #428]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
       ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d047      	beq.n	800416e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	e044      	b.n	800416e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d018      	beq.n	800411e <RCCEx_PLLSAI1_Config+0x86>
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d825      	bhi.n	800413c <RCCEx_PLLSAI1_Config+0xa4>
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d002      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x62>
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d009      	beq.n	800410c <RCCEx_PLLSAI1_Config+0x74>
 80040f8:	e020      	b.n	800413c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410a:	e01a      	b.n	8004142 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800410c:	4b5a      	ldr	r3, [pc, #360]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411c:	e013      	b.n	8004146 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800411e:	4b56      	ldr	r3, [pc, #344]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800412a:	4b53      	ldr	r3, [pc, #332]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800413a:	e006      	b.n	800414a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e004      	b.n	800414c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800414a:	bf00      	nop
    }

    if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004152:	4b49      	ldr	r3, [pc, #292]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	430b      	orrs	r3, r1
 8004168:	4943      	ldr	r1, [pc, #268]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d17c      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800417e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd feda 	bl	8001f38 <HAL_GetTick>
 8004184:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004186:	e009      	b.n	800419c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004188:	f7fd fed6 	bl	8001f38 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d902      	bls.n	800419c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	73fb      	strb	r3, [r7, #15]
        break;
 800419a:	e005      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ef      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d15f      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d110      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	0211      	lsls	r1, r2, #8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	06d2      	lsls	r2, r2, #27
 80041cc:	430a      	orrs	r2, r1
 80041ce:	492a      	ldr	r1, [pc, #168]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	610b      	str	r3, [r1, #16]
 80041d4:	e027      	b.n	8004226 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d112      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041dc:	4b26      	ldr	r3, [pc, #152]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	0211      	lsls	r1, r2, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6912      	ldr	r2, [r2, #16]
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0552      	lsls	r2, r2, #21
 80041f8:	430a      	orrs	r2, r1
 80041fa:	491f      	ldr	r1, [pc, #124]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]
 8004200:	e011      	b.n	8004226 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800420a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6892      	ldr	r2, [r2, #8]
 8004212:	0211      	lsls	r1, r2, #8
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6952      	ldr	r2, [r2, #20]
 8004218:	0852      	lsrs	r2, r2, #1
 800421a:	3a01      	subs	r2, #1
 800421c:	0652      	lsls	r2, r2, #25
 800421e:	430a      	orrs	r2, r1
 8004220:	4915      	ldr	r1, [pc, #84]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a13      	ldr	r2, [pc, #76]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004230:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fd fe81 	bl	8001f38 <HAL_GetTick>
 8004236:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004238:	e009      	b.n	800424e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800423a:	f7fd fe7d 	bl	8001f38 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d902      	bls.n	800424e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	73fb      	strb	r3, [r7, #15]
          break;
 800424c:	e005      	b.n	800425a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e095      	b.n	80043ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429e:	d009      	beq.n	80042b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	61da      	str	r2, [r3, #28]
 80042a6:	e005      	b.n	80042b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd fc86 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f4:	d902      	bls.n	80042fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e002      	b.n	8004302 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004300:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800430a:	d007      	beq.n	800431c <HAL_SPI_Init+0xa0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004314:	d002      	beq.n	800431c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	ea42 0103 	orr.w	r1, r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	f003 0204 	and.w	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b088      	sub	sp, #32
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_SPI_Transmit+0x22>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e158      	b.n	8004696 <HAL_SPI_Transmit+0x2d4>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ec:	f7fd fda4 	bl	8001f38 <HAL_GetTick>
 80043f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d002      	beq.n	8004408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004406:	e13d      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_SPI_Transmit+0x52>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004418:	e134      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	d10f      	bne.n	8004486 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d007      	beq.n	80044a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ac:	d94b      	bls.n	8004546 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0xfa>
 80044b6:	8afb      	ldrh	r3, [r7, #22]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d13e      	bne.n	800453a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e0:	e02b      	b.n	800453a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d112      	bne.n	8004516 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004514:	e011      	b.n	800453a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004516:	f7fd fd0f 	bl	8001f38 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d803      	bhi.n	800452e <HAL_SPI_Transmit+0x16c>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d102      	bne.n	8004534 <HAL_SPI_Transmit+0x172>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004538:	e0a4      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ce      	bne.n	80044e2 <HAL_SPI_Transmit+0x120>
 8004544:	e07c      	b.n	8004640 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Transmit+0x192>
 800454e:	8afb      	ldrh	r3, [r7, #22]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d170      	bne.n	8004636 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d912      	bls.n	8004584 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	1c9a      	adds	r2, r3, #2
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b02      	subs	r3, #2
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004582:	e058      	b.n	8004636 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045aa:	e044      	b.n	8004636 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d12b      	bne.n	8004612 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d912      	bls.n	80045ea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b02      	subs	r3, #2
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e8:	e025      	b.n	8004636 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004610:	e011      	b.n	8004636 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fd fc91 	bl	8001f38 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Transmit+0x268>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Transmit+0x26e>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004634:	e026      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1b5      	bne.n	80045ac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fb5b 	bl	8004d00 <SPI_EndRxTxTransaction>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e000      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004694:	7ffb      	ldrb	r3, [r7, #31]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08a      	sub	sp, #40	; 0x28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046ac:	2301      	movs	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x26>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e1fb      	b.n	8004abc <HAL_SPI_TransmitReceive+0x41e>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046cc:	f7fd fc34 	bl	8001f38 <HAL_GetTick>
 80046d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046e8:	7efb      	ldrb	r3, [r7, #27]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d00e      	beq.n	800470c <HAL_SPI_TransmitReceive+0x6e>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f4:	d106      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x66>
 80046fe:	7efb      	ldrb	r3, [r7, #27]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d003      	beq.n	800470c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004704:	2302      	movs	r3, #2
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800470a:	e1cd      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_SPI_TransmitReceive+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_TransmitReceive+0x80>
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004724:	e1c0      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2205      	movs	r2, #5
 8004736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	887a      	ldrh	r2, [r7, #2]
 800474a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	887a      	ldrh	r2, [r7, #2]
 8004752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	887a      	ldrh	r2, [r7, #2]
 8004760:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	887a      	ldrh	r2, [r7, #2]
 8004766:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800477c:	d802      	bhi.n	8004784 <HAL_SPI_TransmitReceive+0xe6>
 800477e:	8a3b      	ldrh	r3, [r7, #16]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d908      	bls.n	8004796 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	e007      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d007      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047cc:	d97c      	bls.n	80048c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x13e>
 80047d6:	8a7b      	ldrh	r3, [r7, #18]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d169      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004800:	e056      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d11b      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x1aa>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_SPI_TransmitReceive+0x1aa>
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2b01      	cmp	r3, #1
 800481e:	d113      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	881a      	ldrh	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d11c      	bne.n	8004890 <HAL_SPI_TransmitReceive+0x1f2>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	b292      	uxth	r2, r2
 800486e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800488c:	2301      	movs	r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004890:	f7fd fb52 	bl	8001f38 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800489c:	429a      	cmp	r2, r3
 800489e:	d807      	bhi.n	80048b0 <HAL_SPI_TransmitReceive+0x212>
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d003      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048ae:	e0fb      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1a3      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x164>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d19d      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x164>
 80048c6:	e0df      	b.n	8004a88 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_SPI_TransmitReceive+0x23a>
 80048d0:	8a7b      	ldrh	r3, [r7, #18]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	f040 80cb 	bne.w	8004a6e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d912      	bls.n	8004908 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	881a      	ldrh	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	1c9a      	adds	r2, r3, #2
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b02      	subs	r3, #2
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004906:	e0b2      	b.n	8004a6e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492e:	e09e      	b.n	8004a6e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d134      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x30a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_SPI_TransmitReceive+0x30a>
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12c      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d912      	bls.n	800497e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	881a      	ldrh	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b02      	subs	r3, #2
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800497c:	e012      	b.n	80049a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d148      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x3aa>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d042      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d923      	bls.n	8004a16 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	b292      	uxth	r2, r2
 80049da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b02      	subs	r3, #2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d81f      	bhi.n	8004a44 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	e016      	b.n	8004a44 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f103 020c 	add.w	r2, r3, #12
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a44:	2301      	movs	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a48:	f7fd fa76 	bl	8001f38 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d803      	bhi.n	8004a60 <HAL_SPI_TransmitReceive+0x3c2>
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x3c8>
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a6c:	e01c      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f af5b 	bne.w	8004930 <HAL_SPI_TransmitReceive+0x292>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f47f af54 	bne.w	8004930 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f937 	bl	8004d00 <SPI_EndRxTxTransaction>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
 8004aa4:	e000      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004aa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ad4:	f7fd fa30 	bl	8001f38 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ae4:	f7fd fa28 	bl	8001f38 <HAL_GetTick>
 8004ae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	0d1b      	lsrs	r3, r3, #20
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afa:	e054      	b.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d050      	beq.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b04:	f7fd fa18 	bl	8001f38 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d902      	bls.n	8004b1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d13d      	bne.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b32:	d111      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3c:	d004      	beq.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b46:	d107      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b60:	d10f      	bne.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e017      	b.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	2300      	movne	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d19b      	bne.n	8004afc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000000c 	.word	0x2000000c

08004bd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004be6:	f7fd f9a7 	bl	8001f38 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004bf6:	f7fd f99f 	bl	8001f38 <HAL_GetTick>
 8004bfa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	330c      	adds	r3, #12
 8004c02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c04:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00da      	lsls	r2, r3, #3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	0d1b      	lsrs	r3, r3, #20
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c1c:	e060      	b.n	8004ce0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c24:	d107      	bne.n	8004c36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d050      	beq.n	8004ce0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c3e:	f7fd f97b 	bl	8001f38 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d902      	bls.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d13d      	bne.n	8004cd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6c:	d111      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c76:	d004      	beq.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c80:	d107      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	d10f      	bne.n	8004cbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e010      	b.n	8004cf2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d196      	bne.n	8004c1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c

08004d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff ff5b 	bl	8004bd4 <SPI_WaitFifoStateUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e027      	b.n	8004d84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fec0 	bl	8004ac4 <SPI_WaitFlagStateUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4e:	f043 0220 	orr.w	r2, r3, #32
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e014      	b.n	8004d84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff ff34 	bl	8004bd4 <SPI_WaitFifoStateUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e000      	b.n	8004d84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e040      	b.n	8004e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc febc 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f82c 	bl	8004e28 <UART_SetConfig>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e022      	b.n	8004e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa7a 	bl	80052dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb01 	bl	8005420 <UART_CheckIdleState>
 8004e1e:	4603      	mov	r3, r0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e2c:	b08a      	sub	sp, #40	; 0x28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b9e      	ldr	r3, [pc, #632]	; (80050d0 <UART_SetConfig+0x2a8>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a93      	ldr	r2, [pc, #588]	; (80050d4 <UART_SetConfig+0x2ac>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	4313      	orrs	r3, r2
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a8a      	ldr	r2, [pc, #552]	; (80050d8 <UART_SetConfig+0x2b0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d126      	bne.n	8004f00 <UART_SetConfig+0xd8>
 8004eb2:	4b8a      	ldr	r3, [pc, #552]	; (80050dc <UART_SetConfig+0x2b4>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d81b      	bhi.n	8004ef8 <UART_SetConfig+0xd0>
 8004ec0:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0xa0>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004ed9 	.word	0x08004ed9
 8004ecc:	08004ee9 	.word	0x08004ee9
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ef1 	.word	0x08004ef1
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e0ab      	b.n	8005038 <UART_SetConfig+0x210>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e0a7      	b.n	8005038 <UART_SetConfig+0x210>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e0a3      	b.n	8005038 <UART_SetConfig+0x210>
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e09f      	b.n	8005038 <UART_SetConfig+0x210>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e09b      	b.n	8005038 <UART_SetConfig+0x210>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a76      	ldr	r2, [pc, #472]	; (80050e0 <UART_SetConfig+0x2b8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d138      	bne.n	8004f7c <UART_SetConfig+0x154>
 8004f0a:	4b74      	ldr	r3, [pc, #464]	; (80050dc <UART_SetConfig+0x2b4>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	d82d      	bhi.n	8004f74 <UART_SetConfig+0x14c>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0xf8>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f55 	.word	0x08004f55
 8004f24:	08004f75 	.word	0x08004f75
 8004f28:	08004f75 	.word	0x08004f75
 8004f2c:	08004f75 	.word	0x08004f75
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08004f75 	.word	0x08004f75
 8004f38:	08004f75 	.word	0x08004f75
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	08004f75 	.word	0x08004f75
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f75 	.word	0x08004f75
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e06d      	b.n	8005038 <UART_SetConfig+0x210>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e069      	b.n	8005038 <UART_SetConfig+0x210>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e065      	b.n	8005038 <UART_SetConfig+0x210>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e061      	b.n	8005038 <UART_SetConfig+0x210>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e05d      	b.n	8005038 <UART_SetConfig+0x210>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <UART_SetConfig+0x2bc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d125      	bne.n	8004fd2 <UART_SetConfig+0x1aa>
 8004f86:	4b55      	ldr	r3, [pc, #340]	; (80050dc <UART_SetConfig+0x2b4>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f90:	2b30      	cmp	r3, #48	; 0x30
 8004f92:	d016      	beq.n	8004fc2 <UART_SetConfig+0x19a>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d818      	bhi.n	8004fca <UART_SetConfig+0x1a2>
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d00a      	beq.n	8004fb2 <UART_SetConfig+0x18a>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d814      	bhi.n	8004fca <UART_SetConfig+0x1a2>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <UART_SetConfig+0x182>
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d008      	beq.n	8004fba <UART_SetConfig+0x192>
 8004fa8:	e00f      	b.n	8004fca <UART_SetConfig+0x1a2>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb0:	e042      	b.n	8005038 <UART_SetConfig+0x210>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb8:	e03e      	b.n	8005038 <UART_SetConfig+0x210>
 8004fba:	2304      	movs	r3, #4
 8004fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc0:	e03a      	b.n	8005038 <UART_SetConfig+0x210>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc8:	e036      	b.n	8005038 <UART_SetConfig+0x210>
 8004fca:	2310      	movs	r3, #16
 8004fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd0:	e032      	b.n	8005038 <UART_SetConfig+0x210>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3f      	ldr	r2, [pc, #252]	; (80050d4 <UART_SetConfig+0x2ac>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d12a      	bne.n	8005032 <UART_SetConfig+0x20a>
 8004fdc:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <UART_SetConfig+0x2b4>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fea:	d01a      	beq.n	8005022 <UART_SetConfig+0x1fa>
 8004fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff0:	d81b      	bhi.n	800502a <UART_SetConfig+0x202>
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	d00c      	beq.n	8005012 <UART_SetConfig+0x1ea>
 8004ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffc:	d815      	bhi.n	800502a <UART_SetConfig+0x202>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <UART_SetConfig+0x1e2>
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d008      	beq.n	800501a <UART_SetConfig+0x1f2>
 8005008:	e00f      	b.n	800502a <UART_SetConfig+0x202>
 800500a:	2300      	movs	r3, #0
 800500c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005010:	e012      	b.n	8005038 <UART_SetConfig+0x210>
 8005012:	2302      	movs	r3, #2
 8005014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005018:	e00e      	b.n	8005038 <UART_SetConfig+0x210>
 800501a:	2304      	movs	r3, #4
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005020:	e00a      	b.n	8005038 <UART_SetConfig+0x210>
 8005022:	2308      	movs	r3, #8
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005028:	e006      	b.n	8005038 <UART_SetConfig+0x210>
 800502a:	2310      	movs	r3, #16
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005030:	e002      	b.n	8005038 <UART_SetConfig+0x210>
 8005032:	2310      	movs	r3, #16
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <UART_SetConfig+0x2ac>)
 800503e:	4293      	cmp	r3, r2
 8005040:	f040 808a 	bne.w	8005158 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005048:	2b08      	cmp	r3, #8
 800504a:	d824      	bhi.n	8005096 <UART_SetConfig+0x26e>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x22c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005079 	.word	0x08005079
 8005058:	08005097 	.word	0x08005097
 800505c:	08005081 	.word	0x08005081
 8005060:	08005097 	.word	0x08005097
 8005064:	08005087 	.word	0x08005087
 8005068:	08005097 	.word	0x08005097
 800506c:	08005097 	.word	0x08005097
 8005070:	08005097 	.word	0x08005097
 8005074:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fe fd38 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 800507c:	61f8      	str	r0, [r7, #28]
        break;
 800507e:	e010      	b.n	80050a2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <UART_SetConfig+0x2c0>)
 8005082:	61fb      	str	r3, [r7, #28]
        break;
 8005084:	e00d      	b.n	80050a2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fe fc99 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800508a:	61f8      	str	r0, [r7, #28]
        break;
 800508c:	e009      	b.n	80050a2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e005      	b.n	80050a2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8109 	beq.w	80052bc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d305      	bcc.n	80050c6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d912      	bls.n	80050ec <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050cc:	e0f6      	b.n	80052bc <UART_SetConfig+0x494>
 80050ce:	bf00      	nop
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40008000 	.word	0x40008000
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40004400 	.word	0x40004400
 80050e4:	40004800 	.word	0x40004800
 80050e8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2200      	movs	r2, #0
 80050f0:	461c      	mov	r4, r3
 80050f2:	4615      	mov	r5, r2
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	022b      	lsls	r3, r5, #8
 80050fe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005102:	0222      	lsls	r2, r4, #8
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	6849      	ldr	r1, [r1, #4]
 8005108:	0849      	lsrs	r1, r1, #1
 800510a:	2000      	movs	r0, #0
 800510c:	4688      	mov	r8, r1
 800510e:	4681      	mov	r9, r0
 8005110:	eb12 0a08 	adds.w	sl, r2, r8
 8005114:	eb43 0b09 	adc.w	fp, r3, r9
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005126:	4650      	mov	r0, sl
 8005128:	4659      	mov	r1, fp
 800512a:	f7fb f84f 	bl	80001cc <__aeabi_uldivmod>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4613      	mov	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513c:	d308      	bcc.n	8005150 <UART_SetConfig+0x328>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005144:	d204      	bcs.n	8005150 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	60da      	str	r2, [r3, #12]
 800514e:	e0b5      	b.n	80052bc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005156:	e0b1      	b.n	80052bc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005160:	d15d      	bne.n	800521e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005166:	2b08      	cmp	r3, #8
 8005168:	d827      	bhi.n	80051ba <UART_SetConfig+0x392>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0x348>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005195 	.word	0x08005195
 8005174:	0800519d 	.word	0x0800519d
 8005178:	080051a5 	.word	0x080051a5
 800517c:	080051bb 	.word	0x080051bb
 8005180:	080051ab 	.word	0x080051ab
 8005184:	080051bb 	.word	0x080051bb
 8005188:	080051bb 	.word	0x080051bb
 800518c:	080051bb 	.word	0x080051bb
 8005190:	080051b3 	.word	0x080051b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005194:	f7fe fcaa 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8005198:	61f8      	str	r0, [r7, #28]
        break;
 800519a:	e014      	b.n	80051c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800519c:	f7fe fcbc 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 80051a0:	61f8      	str	r0, [r7, #28]
        break;
 80051a2:	e010      	b.n	80051c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <UART_SetConfig+0x4b0>)
 80051a6:	61fb      	str	r3, [r7, #28]
        break;
 80051a8:	e00d      	b.n	80051c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051aa:	f7fe fc07 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 80051ae:	61f8      	str	r0, [r7, #28]
        break;
 80051b0:	e009      	b.n	80051c6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b6:	61fb      	str	r3, [r7, #28]
        break;
 80051b8:	e005      	b.n	80051c6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d077      	beq.n	80052bc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005a      	lsls	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b0f      	cmp	r3, #15
 80051e6:	d916      	bls.n	8005216 <UART_SetConfig+0x3ee>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ee:	d212      	bcs.n	8005216 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f023 030f 	bic.w	r3, r3, #15
 80051f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	b29a      	uxth	r2, r3
 8005206:	8afb      	ldrh	r3, [r7, #22]
 8005208:	4313      	orrs	r3, r2
 800520a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	8afa      	ldrh	r2, [r7, #22]
 8005212:	60da      	str	r2, [r3, #12]
 8005214:	e052      	b.n	80052bc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800521c:	e04e      	b.n	80052bc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800521e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005222:	2b08      	cmp	r3, #8
 8005224:	d827      	bhi.n	8005276 <UART_SetConfig+0x44e>
 8005226:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0x404>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	08005251 	.word	0x08005251
 8005230:	08005259 	.word	0x08005259
 8005234:	08005261 	.word	0x08005261
 8005238:	08005277 	.word	0x08005277
 800523c:	08005267 	.word	0x08005267
 8005240:	08005277 	.word	0x08005277
 8005244:	08005277 	.word	0x08005277
 8005248:	08005277 	.word	0x08005277
 800524c:	0800526f 	.word	0x0800526f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005250:	f7fe fc4c 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8005254:	61f8      	str	r0, [r7, #28]
        break;
 8005256:	e014      	b.n	8005282 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005258:	f7fe fc5e 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 800525c:	61f8      	str	r0, [r7, #28]
        break;
 800525e:	e010      	b.n	8005282 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <UART_SetConfig+0x4b0>)
 8005262:	61fb      	str	r3, [r7, #28]
        break;
 8005264:	e00d      	b.n	8005282 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005266:	f7fe fba9 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800526a:	61f8      	str	r0, [r7, #28]
        break;
 800526c:	e009      	b.n	8005282 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005272:	61fb      	str	r3, [r7, #28]
        break;
 8005274:	e005      	b.n	8005282 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005280:	bf00      	nop
    }

    if (pclk != 0U)
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d019      	beq.n	80052bc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	085a      	lsrs	r2, r3, #1
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	441a      	add	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	d909      	bls.n	80052b6 <UART_SetConfig+0x48e>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a8:	d205      	bcs.n	80052b6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e002      	b.n	80052bc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3728      	adds	r7, #40	; 0x28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d6:	bf00      	nop
 80052d8:	00f42400 	.word	0x00f42400

080052dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053da:	d10a      	bne.n	80053f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005430:	f7fc fd82 	bl	8001f38 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d10e      	bne.n	8005462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f82d 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e023      	b.n	80054aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d10e      	bne.n	800548e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f817 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e00d      	b.n	80054aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b09c      	sub	sp, #112	; 0x70
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	e0a5      	b.n	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	f000 80a1 	beq.w	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fc fd33 	bl	8001f38 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80054de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d13e      	bne.n	8005562 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054f8:	667b      	str	r3, [r7, #100]	; 0x64
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005504:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	663b      	str	r3, [r7, #96]	; 0x60
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005536:	64ba      	str	r2, [r7, #72]	; 0x48
 8005538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e5      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e067      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d04f      	beq.n	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557e:	d147      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005588:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800559e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
 80055aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	613b      	str	r3, [r7, #16]
   return(result);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055dc:	623a      	str	r2, [r7, #32]
 80055de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e010      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	429a      	cmp	r2, r3
 800562c:	f43f af4a 	beq.w	80054c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3770      	adds	r7, #112	; 0x70
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005640:	4904      	ldr	r1, [pc, #16]	; (8005654 <MX_FATFS_Init+0x18>)
 8005642:	4805      	ldr	r0, [pc, #20]	; (8005658 <MX_FATFS_Init+0x1c>)
 8005644:	f002 ff9c 	bl	8008580 <FATFS_LinkDriver>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <MX_FATFS_Init+0x20>)
 800564e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000464 	.word	0x20000464
 8005658:	20000018 	.word	0x20000018
 800565c:	20000460 	.word	0x20000460

08005660 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005664:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005666:	4618      	mov	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	4618      	mov	r0, r3
 800567e:	f7fb f8db 	bl	8000838 <SD_disk_initialize>
 8005682:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4618      	mov	r0, r3
 800569a:	f7fb f9b3 	bl	8000a04 <SD_disk_status>
 800569e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80056b8:	7bf8      	ldrb	r0, [r7, #15]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	f7fb f9b6 	bl	8000a30 <SD_disk_read>
 80056c4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80056de:	7bf8      	ldrb	r0, [r7, #15]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	f7fb fa0d 	bl	8000b04 <SD_disk_write>
 80056ea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	603a      	str	r2, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
 8005700:	460b      	mov	r3, r1
 8005702:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005704:	79b9      	ldrb	r1, [r7, #6]
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fb fa7e 	bl	8000c0c <SD_disk_ioctl>
 8005710:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	4a08      	ldr	r2, [pc, #32]	; (800574c <disk_status+0x30>)
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	79fa      	ldrb	r2, [r7, #7]
 8005734:	4905      	ldr	r1, [pc, #20]	; (800574c <disk_status+0x30>)
 8005736:	440a      	add	r2, r1
 8005738:	7a12      	ldrb	r2, [r2, #8]
 800573a:	4610      	mov	r0, r2
 800573c:	4798      	blx	r3
 800573e:	4603      	mov	r3, r0
 8005740:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000690 	.word	0x20000690

08005750 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	4a0d      	ldr	r2, [pc, #52]	; (8005798 <disk_initialize+0x48>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d111      	bne.n	800578c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <disk_initialize+0x48>)
 800576c:	2101      	movs	r1, #1
 800576e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <disk_initialize+0x48>)
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	79fa      	ldrb	r2, [r7, #7]
 800577e:	4906      	ldr	r1, [pc, #24]	; (8005798 <disk_initialize+0x48>)
 8005780:	440a      	add	r2, r1
 8005782:	7a12      	ldrb	r2, [r2, #8]
 8005784:	4610      	mov	r0, r2
 8005786:	4798      	blx	r3
 8005788:	4603      	mov	r3, r0
 800578a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000690 	.word	0x20000690

0800579c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <disk_read+0x3c>)
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	689c      	ldr	r4, [r3, #8]
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <disk_read+0x3c>)
 80057bc:	4413      	add	r3, r2
 80057be:	7a18      	ldrb	r0, [r3, #8]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	47a0      	blx	r4
 80057c8:	4603      	mov	r3, r0
 80057ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000690 	.word	0x20000690

080057dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <disk_write+0x3c>)
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68dc      	ldr	r4, [r3, #12]
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	4a07      	ldr	r2, [pc, #28]	; (8005818 <disk_write+0x3c>)
 80057fc:	4413      	add	r3, r2
 80057fe:	7a18      	ldrb	r0, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	47a0      	blx	r4
 8005808:	4603      	mov	r3, r0
 800580a:	75fb      	strb	r3, [r7, #23]
  return res;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd90      	pop	{r4, r7, pc}
 8005816:	bf00      	nop
 8005818:	20000690 	.word	0x20000690

0800581c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	603a      	str	r2, [r7, #0]
 8005826:	71fb      	strb	r3, [r7, #7]
 8005828:	460b      	mov	r3, r1
 800582a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <disk_ioctl+0x38>)
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	79fa      	ldrb	r2, [r7, #7]
 800583a:	4906      	ldr	r1, [pc, #24]	; (8005854 <disk_ioctl+0x38>)
 800583c:	440a      	add	r2, r1
 800583e:	7a10      	ldrb	r0, [r2, #8]
 8005840:	79b9      	ldrb	r1, [r7, #6]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4798      	blx	r3
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
  return res;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000690 	.word	0x20000690

08005858 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005868:	89fb      	ldrh	r3, [r7, #14]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	b21a      	sxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b21b      	sxth	r3, r3
 8005874:	4313      	orrs	r3, r2
 8005876:	b21b      	sxth	r3, r3
 8005878:	81fb      	strh	r3, [r7, #14]
	return rv;
 800587a:	89fb      	ldrh	r3, [r7, #14]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3303      	adds	r3, #3
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	3202      	adds	r2, #2
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	3201      	adds	r2, #1
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	7812      	ldrb	r2, [r2, #0]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
	return rv;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	1c53      	adds	r3, r2, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	6179      	str	r1, [r7, #20]
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3b01      	subs	r3, #1
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f1      	bne.n	8005976 <mem_cpy+0x1a>
	}
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	617a      	str	r2, [r7, #20]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3b01      	subs	r3, #1
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f3      	bne.n	80059ae <mem_set+0x10>
}
 80059c6:	bf00      	nop
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	61ba      	str	r2, [r7, #24]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	1acb      	subs	r3, r1, r3
 8005a00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <mem_cmp+0x40>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0eb      	beq.n	80059ec <mem_cmp+0x18>

	return r;
 8005a14:	697b      	ldr	r3, [r7, #20]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a2c:	e002      	b.n	8005a34 <chk_chr+0x12>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3301      	adds	r3, #1
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <chk_chr+0x26>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d1f2      	bne.n	8005a2e <chk_chr+0xc>
	return *str;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e029      	b.n	8005ac0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a6c:	4a27      	ldr	r2, [pc, #156]	; (8005b0c <chk_lock+0xb4>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	4413      	add	r3, r2
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01d      	beq.n	8005ab6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a7a:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <chk_lock+0xb4>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	4413      	add	r3, r2
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d116      	bne.n	8005aba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <chk_lock+0xb4>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	4413      	add	r3, r2
 8005a94:	3304      	adds	r3, #4
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d10c      	bne.n	8005aba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <chk_lock+0xb4>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d102      	bne.n	8005aba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ab4:	e007      	b.n	8005ac6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d9d2      	bls.n	8005a6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d109      	bne.n	8005ae0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <chk_lock+0x80>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d101      	bne.n	8005adc <chk_lock+0x84>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e010      	b.n	8005afe <chk_lock+0xa6>
 8005adc:	2312      	movs	r3, #18
 8005ade:	e00e      	b.n	8005afe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <chk_lock+0xa0>
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <chk_lock+0xb4>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	4413      	add	r3, r2
 8005aee:	330c      	adds	r3, #12
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af6:	d101      	bne.n	8005afc <chk_lock+0xa4>
 8005af8:	2310      	movs	r3, #16
 8005afa:	e000      	b.n	8005afe <chk_lock+0xa6>
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000470 	.word	0x20000470

08005b10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	e002      	b.n	8005b22 <enq_lock+0x12>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d806      	bhi.n	8005b36 <enq_lock+0x26>
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <enq_lock+0x40>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f2      	bne.n	8005b1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000470 	.word	0x20000470

08005b54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e01f      	b.n	8005ba4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b64:	4a41      	ldr	r2, [pc, #260]	; (8005c6c <inc_lock+0x118>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	4413      	add	r3, r2
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d113      	bne.n	8005b9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b76:	4a3d      	ldr	r2, [pc, #244]	; (8005c6c <inc_lock+0x118>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3304      	adds	r3, #4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d109      	bne.n	8005b9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b8a:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <inc_lock+0x118>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	4413      	add	r3, r2
 8005b92:	3308      	adds	r3, #8
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d006      	beq.n	8005bac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d9dc      	bls.n	8005b64 <inc_lock+0x10>
 8005baa:	e000      	b.n	8005bae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005bac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d132      	bne.n	8005c1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e002      	b.n	8005bc0 <inc_lock+0x6c>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d806      	bhi.n	8005bd4 <inc_lock+0x80>
 8005bc6:	4a29      	ldr	r2, [pc, #164]	; (8005c6c <inc_lock+0x118>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	4413      	add	r3, r2
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f2      	bne.n	8005bba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d101      	bne.n	8005bde <inc_lock+0x8a>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e040      	b.n	8005c60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4922      	ldr	r1, [pc, #136]	; (8005c6c <inc_lock+0x118>)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	440b      	add	r3, r1
 8005bea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	491e      	ldr	r1, [pc, #120]	; (8005c6c <inc_lock+0x118>)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	440b      	add	r3, r1
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	491a      	ldr	r1, [pc, #104]	; (8005c6c <inc_lock+0x118>)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	440b      	add	r3, r1
 8005c08:	3308      	adds	r3, #8
 8005c0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <inc_lock+0x118>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	4413      	add	r3, r2
 8005c14:	330c      	adds	r3, #12
 8005c16:	2200      	movs	r2, #0
 8005c18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <inc_lock+0xe0>
 8005c20:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <inc_lock+0x118>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4413      	add	r3, r2
 8005c28:	330c      	adds	r3, #12
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <inc_lock+0xe0>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e015      	b.n	8005c60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d108      	bne.n	8005c4c <inc_lock+0xf8>
 8005c3a:	4a0c      	ldr	r2, [pc, #48]	; (8005c6c <inc_lock+0x118>)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	4413      	add	r3, r2
 8005c42:	330c      	adds	r3, #12
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	e001      	b.n	8005c50 <inc_lock+0xfc>
 8005c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c50:	4906      	ldr	r1, [pc, #24]	; (8005c6c <inc_lock+0x118>)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	440b      	add	r3, r1
 8005c58:	330c      	adds	r3, #12
 8005c5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3301      	adds	r3, #1
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	20000470 	.word	0x20000470

08005c70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d825      	bhi.n	8005cd0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005c84:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <dec_lock+0x74>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	4413      	add	r3, r2
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c98:	d101      	bne.n	8005c9e <dec_lock+0x2e>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c9e:	89fb      	ldrh	r3, [r7, #14]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <dec_lock+0x3a>
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005caa:	4a0e      	ldr	r2, [pc, #56]	; (8005ce4 <dec_lock+0x74>)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4413      	add	r3, r2
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	89fa      	ldrh	r2, [r7, #14]
 8005cb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <dec_lock+0x5a>
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <dec_lock+0x74>)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	737b      	strb	r3, [r7, #13]
 8005cce:	e001      	b.n	8005cd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005cd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20000470 	.word	0x20000470

08005ce8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e010      	b.n	8005d18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cf6:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <clear_lock+0x44>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d105      	bne.n	8005d12 <clear_lock+0x2a>
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <clear_lock+0x44>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d9eb      	bls.n	8005cf6 <clear_lock+0xe>
	}
}
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20000470 	.word	0x20000470

08005d30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d034      	beq.n	8005dae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7858      	ldrb	r0, [r3, #1]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d54:	2301      	movs	r3, #1
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	f7ff fd40 	bl	80057dc <disk_write>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
 8005d66:	e022      	b.n	8005dae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d217      	bcs.n	8005dae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	789b      	ldrb	r3, [r3, #2]
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	e010      	b.n	8005da8 <sync_window+0x78>
					wsect += fs->fsize;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	7858      	ldrb	r0, [r3, #1]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	f7ff fd1d 	bl	80057dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d8eb      	bhi.n	8005d86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d01b      	beq.n	8005e08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ffad 	bl	8005d30 <sync_window>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d113      	bne.n	8005e08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7858      	ldrb	r0, [r3, #1]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dea:	2301      	movs	r3, #1
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	f7ff fcd5 	bl	800579c <disk_read>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005df8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ff87 	bl	8005d30 <sync_window>
 8005e22:	4603      	mov	r3, r0
 8005e24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d159      	bne.n	8005ee0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d149      	bne.n	8005ec8 <sync_fs+0xb4>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d145      	bne.n	8005ec8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	899b      	ldrh	r3, [r3, #12]
 8005e46:	461a      	mov	r2, r3
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f7ff fda8 	bl	800599e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3338      	adds	r3, #56	; 0x38
 8005e52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e56:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff fd37 	bl	80058ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3338      	adds	r3, #56	; 0x38
 8005e64:	4921      	ldr	r1, [pc, #132]	; (8005eec <sync_fs+0xd8>)
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fd4c 	bl	8005904 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3338      	adds	r3, #56	; 0x38
 8005e70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e74:	491e      	ldr	r1, [pc, #120]	; (8005ef0 <sync_fs+0xdc>)
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fd44 	bl	8005904 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3338      	adds	r3, #56	; 0x38
 8005e80:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7ff fd3a 	bl	8005904 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3338      	adds	r3, #56	; 0x38
 8005e94:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7ff fd30 	bl	8005904 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	7858      	ldrb	r0, [r3, #1]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f7ff fc8d 	bl	80057dc <disk_write>
			fs->fsi_flag = 0;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fca3 	bl	800581c <disk_ioctl>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <sync_fs+0xcc>
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	41615252 	.word	0x41615252
 8005ef0:	61417272 	.word	0x61417272

08005ef4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	3b02      	subs	r3, #2
 8005f02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	3b02      	subs	r3, #2
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d301      	bcc.n	8005f14 <clust2sect+0x20>
 8005f10:	2300      	movs	r3, #0
 8005f12:	e008      	b.n	8005f26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	895b      	ldrh	r3, [r3, #10]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	fb03 f202 	mul.w	r2, r3, r2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	4413      	add	r3, r2
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b086      	sub	sp, #24
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d904      	bls.n	8005f52 <get_fat+0x20>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f52:	2301      	movs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e0bb      	b.n	80060d0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	f000 8083 	beq.w	800606e <get_fat+0x13c>
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	f300 80a7 	bgt.w	80060bc <get_fat+0x18a>
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d002      	beq.n	8005f78 <get_fat+0x46>
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d056      	beq.n	8006024 <get_fat+0xf2>
 8005f76:	e0a1      	b.n	80060bc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	899b      	ldrh	r3, [r3, #12]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f96:	4413      	add	r3, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6938      	ldr	r0, [r7, #16]
 8005f9c:	f7ff ff0c 	bl	8005db8 <move_window>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 808d 	bne.w	80060c2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	60fa      	str	r2, [r7, #12]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	8992      	ldrh	r2, [r2, #12]
 8005fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fb6:	fb01 f202 	mul.w	r2, r1, r2
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fc4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	899b      	ldrh	r3, [r3, #12]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f7ff feec 	bl	8005db8 <move_window>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d16f      	bne.n	80060c6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	899b      	ldrh	r3, [r3, #12]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ff2:	fb01 f202 	mul.w	r2, r1, r2
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4313      	orrs	r3, r2
 8006008:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <get_fat+0xe8>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	e002      	b.n	8006020 <get_fat+0xee>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006020:	617b      	str	r3, [r7, #20]
			break;
 8006022:	e055      	b.n	80060d0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	899b      	ldrh	r3, [r3, #12]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	4619      	mov	r1, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	fbb3 f3f1 	udiv	r3, r3, r1
 8006038:	4413      	add	r3, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6938      	ldr	r0, [r7, #16]
 800603e:	f7ff febb 	bl	8005db8 <move_window>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d140      	bne.n	80060ca <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	8992      	ldrh	r2, [r2, #12]
 8006056:	fbb3 f0f2 	udiv	r0, r3, r2
 800605a:	fb00 f202 	mul.w	r2, r0, r2
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	440b      	add	r3, r1
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fbf8 	bl	8005858 <ld_word>
 8006068:	4603      	mov	r3, r0
 800606a:	617b      	str	r3, [r7, #20]
			break;
 800606c:	e030      	b.n	80060d0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	899b      	ldrh	r3, [r3, #12]
 8006076:	089b      	lsrs	r3, r3, #2
 8006078:	b29b      	uxth	r3, r3
 800607a:	4619      	mov	r1, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006082:	4413      	add	r3, r2
 8006084:	4619      	mov	r1, r3
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f7ff fe96 	bl	8005db8 <move_window>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11d      	bne.n	80060ce <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	8992      	ldrh	r2, [r2, #12]
 80060a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80060a4:	fb00 f202 	mul.w	r2, r0, r2
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	440b      	add	r3, r1
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fbeb 	bl	8005888 <ld_dword>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060b8:	617b      	str	r3, [r7, #20]
			break;
 80060ba:	e009      	b.n	80060d0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e006      	b.n	80060d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060c2:	bf00      	nop
 80060c4:	e004      	b.n	80060d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060ce:	bf00      	nop
		}
	}

	return val;
 80060d0:	697b      	ldr	r3, [r7, #20]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060da:	b590      	push	{r4, r7, lr}
 80060dc:	b089      	sub	sp, #36	; 0x24
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060e6:	2302      	movs	r3, #2
 80060e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f240 8102 	bls.w	80062f6 <put_fat+0x21c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	f080 80fc 	bcs.w	80062f6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b03      	cmp	r3, #3
 8006104:	f000 80b6 	beq.w	8006274 <put_fat+0x19a>
 8006108:	2b03      	cmp	r3, #3
 800610a:	f300 80fd 	bgt.w	8006308 <put_fat+0x22e>
 800610e:	2b01      	cmp	r3, #1
 8006110:	d003      	beq.n	800611a <put_fat+0x40>
 8006112:	2b02      	cmp	r3, #2
 8006114:	f000 8083 	beq.w	800621e <put_fat+0x144>
 8006118:	e0f6      	b.n	8006308 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4413      	add	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	899b      	ldrh	r3, [r3, #12]
 8006130:	4619      	mov	r1, r3
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	fbb3 f3f1 	udiv	r3, r3, r1
 8006138:	4413      	add	r3, r2
 800613a:	4619      	mov	r1, r3
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fe3b 	bl	8005db8 <move_window>
 8006142:	4603      	mov	r3, r0
 8006144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006146:	7ffb      	ldrb	r3, [r7, #31]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 80d6 	bne.w	80062fa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	61ba      	str	r2, [r7, #24]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	8992      	ldrh	r2, [r2, #12]
 800615e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006162:	fb00 f202 	mul.w	r2, r0, r2
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	440b      	add	r3, r1
 800616a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00d      	beq.n	8006192 <put_fat+0xb8>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b25b      	sxtb	r3, r3
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	b25a      	sxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	b25b      	sxtb	r3, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	b25b      	sxtb	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e001      	b.n	8006196 <put_fat+0xbc>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	899b      	ldrh	r3, [r3, #12]
 80061a8:	4619      	mov	r1, r3
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b0:	4413      	add	r3, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fdff 	bl	8005db8 <move_window>
 80061ba:	4603      	mov	r3, r0
 80061bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f040 809c 	bne.w	80062fe <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	899b      	ldrh	r3, [r3, #12]
 80061d0:	461a      	mov	r2, r3
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80061d8:	fb00 f202 	mul.w	r2, r0, r2
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	440b      	add	r3, r1
 80061e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <put_fat+0x11a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	091b      	lsrs	r3, r3, #4
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e00e      	b.n	8006212 <put_fat+0x138>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f023 030f 	bic.w	r3, r3, #15
 80061fe:	b25a      	sxtb	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b25b      	sxtb	r3, r3
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	b25b      	sxtb	r3, r3
 800620c:	4313      	orrs	r3, r2
 800620e:	b25b      	sxtb	r3, r3
 8006210:	b2db      	uxtb	r3, r3
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	70da      	strb	r2, [r3, #3]
			break;
 800621c:	e074      	b.n	8006308 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	899b      	ldrh	r3, [r3, #12]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	b29b      	uxth	r3, r3
 800622a:	4619      	mov	r1, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006232:	4413      	add	r3, r2
 8006234:	4619      	mov	r1, r3
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fdbe 	bl	8005db8 <move_window>
 800623c:	4603      	mov	r3, r0
 800623e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d15d      	bne.n	8006302 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	8992      	ldrh	r2, [r2, #12]
 8006254:	fbb3 f0f2 	udiv	r0, r3, r2
 8006258:	fb00 f202 	mul.w	r2, r0, r2
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	440b      	add	r3, r1
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	b292      	uxth	r2, r2
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fb31 	bl	80058ce <st_word>
			fs->wflag = 1;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	70da      	strb	r2, [r3, #3]
			break;
 8006272:	e049      	b.n	8006308 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	899b      	ldrh	r3, [r3, #12]
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	b29b      	uxth	r3, r3
 8006280:	4619      	mov	r1, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	fbb3 f3f1 	udiv	r3, r3, r1
 8006288:	4413      	add	r3, r2
 800628a:	4619      	mov	r1, r3
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff fd93 	bl	8005db8 <move_window>
 8006292:	4603      	mov	r3, r0
 8006294:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d134      	bne.n	8006306 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	8992      	ldrh	r2, [r2, #12]
 80062b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80062b4:	fb00 f202 	mul.w	r2, r0, r2
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	440b      	add	r3, r1
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fae3 	bl	8005888 <ld_dword>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062c8:	4323      	orrs	r3, r4
 80062ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	8992      	ldrh	r2, [r2, #12]
 80062da:	fbb3 f0f2 	udiv	r0, r3, r2
 80062de:	fb00 f202 	mul.w	r2, r0, r2
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	440b      	add	r3, r1
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fb0b 	bl	8005904 <st_dword>
			fs->wflag = 1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	70da      	strb	r2, [r3, #3]
			break;
 80062f4:	e008      	b.n	8006308 <put_fat+0x22e>
		}
	}
 80062f6:	bf00      	nop
 80062f8:	e006      	b.n	8006308 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062fa:	bf00      	nop
 80062fc:	e004      	b.n	8006308 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006306:	bf00      	nop
	return res;
 8006308:	7ffb      	ldrb	r3, [r7, #31]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3724      	adds	r7, #36	; 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd90      	pop	{r4, r7, pc}

08006312 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b088      	sub	sp, #32
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d904      	bls.n	8006338 <remove_chain+0x26>
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	429a      	cmp	r2, r3
 8006336:	d301      	bcc.n	800633c <remove_chain+0x2a>
 8006338:	2302      	movs	r3, #2
 800633a:	e04b      	b.n	80063d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	69b8      	ldr	r0, [r7, #24]
 800634a:	f7ff fec6 	bl	80060da <put_fat>
 800634e:	4603      	mov	r3, r0
 8006350:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006352:	7ffb      	ldrb	r3, [r7, #31]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <remove_chain+0x4a>
 8006358:	7ffb      	ldrb	r3, [r7, #31]
 800635a:	e03b      	b.n	80063d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff fde7 	bl	8005f32 <get_fat>
 8006364:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d031      	beq.n	80063d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <remove_chain+0x64>
 8006372:	2302      	movs	r3, #2
 8006374:	e02e      	b.n	80063d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d101      	bne.n	8006382 <remove_chain+0x70>
 800637e:	2301      	movs	r3, #1
 8006380:	e028      	b.n	80063d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006382:	2200      	movs	r2, #0
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f7ff fea7 	bl	80060da <put_fat>
 800638c:	4603      	mov	r3, r0
 800638e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006390:	7ffb      	ldrb	r3, [r7, #31]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <remove_chain+0x88>
 8006396:	7ffb      	ldrb	r3, [r7, #31]
 8006398:	e01c      	b.n	80063d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	3b02      	subs	r3, #2
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d20b      	bcs.n	80063c0 <remove_chain+0xae>
			fs->free_clst++;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	791b      	ldrb	r3, [r3, #4]
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3c6      	bcc.n	800635c <remove_chain+0x4a>
 80063ce:	e000      	b.n	80063d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80063d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3720      	adds	r7, #32
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10d      	bne.n	800640e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <create_chain+0x2c>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	d31b      	bcc.n	8006440 <create_chain+0x64>
 8006408:	2301      	movs	r3, #1
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	e018      	b.n	8006440 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fd8e 	bl	8005f32 <get_fat>
 8006416:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d801      	bhi.n	8006422 <create_chain+0x46>
 800641e:	2301      	movs	r3, #1
 8006420:	e070      	b.n	8006504 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d101      	bne.n	800642e <create_chain+0x52>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	e06a      	b.n	8006504 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d201      	bcs.n	800643c <create_chain+0x60>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	e063      	b.n	8006504 <create_chain+0x128>
		scl = clst;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	429a      	cmp	r2, r3
 8006452:	d307      	bcc.n	8006464 <create_chain+0x88>
				ncl = 2;
 8006454:	2302      	movs	r3, #2
 8006456:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	429a      	cmp	r2, r3
 800645e:	d901      	bls.n	8006464 <create_chain+0x88>
 8006460:	2300      	movs	r3, #0
 8006462:	e04f      	b.n	8006504 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006464:	69f9      	ldr	r1, [r7, #28]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff fd63 	bl	8005f32 <get_fat>
 800646c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d003      	beq.n	8006482 <create_chain+0xa6>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d101      	bne.n	8006486 <create_chain+0xaa>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	e03e      	b.n	8006504 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	429a      	cmp	r2, r3
 800648c:	d1da      	bne.n	8006444 <create_chain+0x68>
 800648e:	2300      	movs	r3, #0
 8006490:	e038      	b.n	8006504 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006492:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006494:	f04f 32ff 	mov.w	r2, #4294967295
 8006498:	69f9      	ldr	r1, [r7, #28]
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f7ff fe1d 	bl	80060da <put_fat>
 80064a0:	4603      	mov	r3, r0
 80064a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <create_chain+0xe2>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d006      	beq.n	80064be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6938      	ldr	r0, [r7, #16]
 80064b6:	f7ff fe10 	bl	80060da <put_fat>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d116      	bne.n	80064f2 <create_chain+0x116>
		fs->last_clst = ncl;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	3b02      	subs	r3, #2
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d804      	bhi.n	80064e2 <create_chain+0x106>
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	791b      	ldrb	r3, [r3, #4]
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	711a      	strb	r2, [r3, #4]
 80064f0:	e007      	b.n	8006502 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d102      	bne.n	80064fe <create_chain+0x122>
 80064f8:	f04f 33ff 	mov.w	r3, #4294967295
 80064fc:	e000      	b.n	8006500 <create_chain+0x124>
 80064fe:	2301      	movs	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006502:	69fb      	ldr	r3, [r7, #28]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	3304      	adds	r3, #4
 8006522:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	899b      	ldrh	r3, [r3, #12]
 8006528:	461a      	mov	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	8952      	ldrh	r2, [r2, #10]
 8006534:	fbb3 f3f2 	udiv	r3, r3, r2
 8006538:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	613a      	str	r2, [r7, #16]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <clmt_clust+0x42>
 800654a:	2300      	movs	r3, #0
 800654c:	e010      	b.n	8006570 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d307      	bcc.n	8006566 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3304      	adds	r3, #4
 8006562:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006564:	e7e9      	b.n	800653a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006566:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
}
 8006570:	4618      	mov	r0, r3
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006592:	d204      	bcs.n	800659e <dir_sdi+0x22>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800659e:	2302      	movs	r3, #2
 80065a0:	e071      	b.n	8006686 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <dir_sdi+0x46>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d902      	bls.n	80065c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	8912      	ldrh	r2, [r2, #8]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d301      	bcc.n	80065d8 <dir_sdi+0x5c>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e056      	b.n	8006686 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	61da      	str	r2, [r3, #28]
 80065e0:	e02d      	b.n	800663e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	895b      	ldrh	r3, [r3, #10]
 80065e6:	461a      	mov	r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	899b      	ldrh	r3, [r3, #12]
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065f2:	e019      	b.n	8006628 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fc9a 	bl	8005f32 <get_fat>
 80065fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d101      	bne.n	800660c <dir_sdi+0x90>
 8006608:	2301      	movs	r3, #1
 800660a:	e03c      	b.n	8006686 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d904      	bls.n	800661c <dir_sdi+0xa0>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	429a      	cmp	r2, r3
 800661a:	d301      	bcc.n	8006620 <dir_sdi+0xa4>
 800661c:	2302      	movs	r3, #2
 800661e:	e032      	b.n	8006686 <dir_sdi+0x10a>
			ofs -= csz;
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	429a      	cmp	r2, r3
 800662e:	d2e1      	bcs.n	80065f4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006630:	6979      	ldr	r1, [r7, #20]
 8006632:	6938      	ldr	r0, [r7, #16]
 8006634:	f7ff fc5e 	bl	8005ef4 <clust2sect>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <dir_sdi+0xd4>
 800664c:	2302      	movs	r3, #2
 800664e:	e01a      	b.n	8006686 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	899b      	ldrh	r3, [r3, #12]
 8006658:	4619      	mov	r1, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	899b      	ldrh	r3, [r3, #12]
 8006670:	461a      	mov	r2, r3
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	fbb3 f0f2 	udiv	r0, r3, r2
 8006678:	fb00 f202 	mul.w	r2, r0, r2
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	18ca      	adds	r2, r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	3320      	adds	r3, #32
 80066a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <dir_next+0x28>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066b4:	d301      	bcc.n	80066ba <dir_next+0x2c>
 80066b6:	2304      	movs	r3, #4
 80066b8:	e0bb      	b.n	8006832 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	899b      	ldrh	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80066c6:	fb01 f202 	mul.w	r2, r1, r2
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 809d 	bne.w	800680c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	8912      	ldrh	r2, [r2, #8]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	f0c0 808d 	bcc.w	800680c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	61da      	str	r2, [r3, #28]
 80066f8:	2304      	movs	r3, #4
 80066fa:	e09a      	b.n	8006832 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	899b      	ldrh	r3, [r3, #12]
 8006700:	461a      	mov	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	fbb3 f3f2 	udiv	r3, r3, r2
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	8952      	ldrh	r2, [r2, #10]
 800670c:	3a01      	subs	r2, #1
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d17b      	bne.n	800680c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7ff fc08 	bl	8005f32 <get_fat>
 8006722:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d801      	bhi.n	800672e <dir_next+0xa0>
 800672a:	2302      	movs	r3, #2
 800672c:	e081      	b.n	8006832 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d101      	bne.n	800673a <dir_next+0xac>
 8006736:	2301      	movs	r3, #1
 8006738:	e07b      	b.n	8006832 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	429a      	cmp	r2, r3
 8006742:	d359      	bcc.n	80067f8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	61da      	str	r2, [r3, #28]
 8006750:	2304      	movs	r3, #4
 8006752:	e06e      	b.n	8006832 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7ff fe3d 	bl	80063dc <create_chain>
 8006762:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <dir_next+0xe0>
 800676a:	2307      	movs	r3, #7
 800676c:	e061      	b.n	8006832 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <dir_next+0xea>
 8006774:	2302      	movs	r3, #2
 8006776:	e05c      	b.n	8006832 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d101      	bne.n	8006784 <dir_next+0xf6>
 8006780:	2301      	movs	r3, #1
 8006782:	e056      	b.n	8006832 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fad3 	bl	8005d30 <sync_window>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <dir_next+0x106>
 8006790:	2301      	movs	r3, #1
 8006792:	e04e      	b.n	8006832 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	899b      	ldrh	r3, [r3, #12]
 800679e:	461a      	mov	r2, r3
 80067a0:	2100      	movs	r1, #0
 80067a2:	f7ff f8fc 	bl	800599e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	6979      	ldr	r1, [r7, #20]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fba1 	bl	8005ef4 <clust2sect>
 80067b2:	4602      	mov	r2, r0
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	635a      	str	r2, [r3, #52]	; 0x34
 80067b8:	e012      	b.n	80067e0 <dir_next+0x152>
						fs->wflag = 1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fab5 	bl	8005d30 <sync_window>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <dir_next+0x142>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e030      	b.n	8006832 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3301      	adds	r3, #1
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	635a      	str	r2, [r3, #52]	; 0x34
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	895b      	ldrh	r3, [r3, #10]
 80067e4:	461a      	mov	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d3e6      	bcc.n	80067ba <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067fe:	6979      	ldr	r1, [r7, #20]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fb77 	bl	8005ef4 <clust2sect>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	899b      	ldrh	r3, [r3, #12]
 800681c:	461a      	mov	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	fbb3 f0f2 	udiv	r0, r3, r2
 8006824:	fb00 f202 	mul.w	r2, r0, r2
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	18ca      	adds	r2, r1, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800684a:	2100      	movs	r1, #0
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff fe95 	bl	800657c <dir_sdi>
 8006852:	4603      	mov	r3, r0
 8006854:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d12b      	bne.n	80068b4 <dir_alloc+0x7a>
		n = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff faa6 	bl	8005db8 <move_window>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11d      	bne.n	80068b2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2be5      	cmp	r3, #229	; 0xe5
 800687e:	d004      	beq.n	800688a <dir_alloc+0x50>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3301      	adds	r3, #1
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <dir_alloc+0x64>
 8006898:	e00c      	b.n	80068b4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fef4 	bl	800668e <dir_next>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0d7      	beq.n	8006860 <dir_alloc+0x26>
 80068b0:	e000      	b.n	80068b4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068b2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d101      	bne.n	80068be <dir_alloc+0x84>
 80068ba:	2307      	movs	r3, #7
 80068bc:	75fb      	strb	r3, [r7, #23]
	return res;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	331a      	adds	r3, #26
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe ffbe 	bl	8005858 <ld_word>
 80068dc:	4603      	mov	r3, r0
 80068de:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d109      	bne.n	80068fc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	3314      	adds	r3, #20
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe ffb3 	bl	8005858 <ld_word>
 80068f2:	4603      	mov	r3, r0
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068fc:	68fb      	ldr	r3, [r7, #12]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	331a      	adds	r3, #26
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	b292      	uxth	r2, r2
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe ffd6 	bl	80058ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d109      	bne.n	800693e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f103 0214 	add.w	r2, r3, #20
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	b29b      	uxth	r3, r3
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe ffc8 	bl	80058ce <st_word>
	}
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	331a      	adds	r3, #26
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe ff7e 	bl	8005858 <ld_word>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <cmp_lfn+0x1e>
 8006962:	2300      	movs	r3, #0
 8006964:	e059      	b.n	8006a1a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696e:	1e5a      	subs	r2, r3, #1
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800697c:	2301      	movs	r3, #1
 800697e:	81fb      	strh	r3, [r7, #14]
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	e033      	b.n	80069ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006986:	4a27      	ldr	r2, [pc, #156]	; (8006a24 <cmp_lfn+0xdc>)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	4413      	add	r3, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe ff5f 	bl	8005858 <ld_word>
 800699a:	4603      	mov	r3, r0
 800699c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800699e:	89fb      	ldrh	r3, [r7, #14]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01a      	beq.n	80069da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2bfe      	cmp	r3, #254	; 0xfe
 80069a8:	d812      	bhi.n	80069d0 <cmp_lfn+0x88>
 80069aa:	89bb      	ldrh	r3, [r7, #12]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fe33 	bl	8008618 <ff_wtoupper>
 80069b2:	4603      	mov	r3, r0
 80069b4:	461c      	mov	r4, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	617a      	str	r2, [r7, #20]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fe27 	bl	8008618 <ff_wtoupper>
 80069ca:	4603      	mov	r3, r0
 80069cc:	429c      	cmp	r4, r3
 80069ce:	d001      	beq.n	80069d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80069d0:	2300      	movs	r3, #0
 80069d2:	e022      	b.n	8006a1a <cmp_lfn+0xd2>
			}
			wc = uc;
 80069d4:	89bb      	ldrh	r3, [r7, #12]
 80069d6:	81fb      	strh	r3, [r7, #14]
 80069d8:	e006      	b.n	80069e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80069da:	89bb      	ldrh	r3, [r7, #12]
 80069dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d001      	beq.n	80069e8 <cmp_lfn+0xa0>
 80069e4:	2300      	movs	r3, #0
 80069e6:	e018      	b.n	8006a1a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d9c8      	bls.n	8006986 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <cmp_lfn+0xd0>
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <cmp_lfn+0xd0>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <cmp_lfn+0xd0>
 8006a14:	2300      	movs	r3, #0
 8006a16:	e000      	b.n	8006a1a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006a18:	2301      	movs	r3, #1
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}
 8006a22:	bf00      	nop
 8006a24:	08009680 	.word	0x08009680

08006a28 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4611      	mov	r1, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	460b      	mov	r3, r1
 8006a38:	71fb      	strb	r3, [r7, #7]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	330d      	adds	r3, #13
 8006a42:	79ba      	ldrb	r2, [r7, #6]
 8006a44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	330b      	adds	r3, #11
 8006a4a:	220f      	movs	r2, #15
 8006a4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	330c      	adds	r3, #12
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	331a      	adds	r3, #26
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe ff36 	bl	80058ce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	82fb      	strh	r3, [r7, #22]
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a7a:	8afb      	ldrh	r3, [r7, #22]
 8006a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <put_lfn+0x6c>
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	61fa      	str	r2, [r7, #28]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a94:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <put_lfn+0xcc>)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	4413      	add	r3, r2
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	8afa      	ldrh	r2, [r7, #22]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe ff11 	bl	80058ce <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006aac:	8afb      	ldrh	r3, [r7, #22]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <put_lfn+0x90>
 8006ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ab6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	d9da      	bls.n	8006a7a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ac4:	8afb      	ldrh	r3, [r7, #22]
 8006ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d006      	beq.n	8006adc <put_lfn+0xb4>
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <put_lfn+0xbc>
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	79fa      	ldrb	r2, [r7, #7]
 8006ae8:	701a      	strb	r2, [r3, #0]
}
 8006aea:	bf00      	nop
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	08009680 	.word	0x08009680

08006af8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	; 0x30
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006b06:	220b      	movs	r2, #11
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7fe ff26 	bl	800595c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d92b      	bls.n	8006b6e <gen_numname+0x76>
		sr = seq;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006b1a:	e022      	b.n	8006b62 <gen_numname+0x6a>
			wc = *lfn++;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006b26:	2300      	movs	r3, #0
 8006b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b2a:	e017      	b.n	8006b5c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	005a      	lsls	r2, r3, #1
 8006b30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <gen_numname+0x5e>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006b50:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006b54:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	3301      	adds	r3, #1
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d9e4      	bls.n	8006b2c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1d8      	bne.n	8006b1c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b6e:	2307      	movs	r3, #7
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3330      	adds	r3, #48	; 0x30
 8006b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b86:	2b39      	cmp	r3, #57	; 0x39
 8006b88:	d904      	bls.n	8006b94 <gen_numname+0x9c>
 8006b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b8e:	3307      	adds	r3, #7
 8006b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b9a:	3330      	adds	r3, #48	; 0x30
 8006b9c:	443b      	add	r3, r7
 8006b9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006ba2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1df      	bne.n	8006b72 <gen_numname+0x7a>
	ns[i] = '~';
 8006bb2:	f107 0214 	add.w	r2, r7, #20
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	4413      	add	r3, r2
 8006bba:	227e      	movs	r2, #126	; 0x7e
 8006bbc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc2:	e002      	b.n	8006bca <gen_numname+0xd2>
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d205      	bcs.n	8006bde <gen_numname+0xe6>
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	4413      	add	r3, r2
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d1f2      	bne.n	8006bc4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d807      	bhi.n	8006bf4 <gen_numname+0xfc>
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bea:	3330      	adds	r3, #48	; 0x30
 8006bec:	443b      	add	r3, r7
 8006bee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006bf2:	e000      	b.n	8006bf6 <gen_numname+0xfe>
 8006bf4:	2120      	movs	r1, #32
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	460a      	mov	r2, r1
 8006c02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	2b07      	cmp	r3, #7
 8006c08:	d9e9      	bls.n	8006bde <gen_numname+0xe6>
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	3730      	adds	r7, #48	; 0x30
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006c20:	230b      	movs	r3, #11
 8006c22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	0852      	lsrs	r2, r2, #1
 8006c2a:	01db      	lsls	r3, r3, #7
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	6079      	str	r1, [r7, #4]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4413      	add	r3, r2
 8006c3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ed      	bne.n	8006c24 <sum_sfn+0x10>
	return sum;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c64:	2100      	movs	r1, #0
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff fc88 	bl	800657c <dir_sdi>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <dir_find+0x24>
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	e0a9      	b.n	8006dce <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c7a:	23ff      	movs	r3, #255	; 0xff
 8006c7c:	753b      	strb	r3, [r7, #20]
 8006c7e:	7d3b      	ldrb	r3, [r7, #20]
 8006c80:	757b      	strb	r3, [r7, #21]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f04f 32ff 	mov.w	r2, #4294967295
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6938      	ldr	r0, [r7, #16]
 8006c92:	f7ff f891 	bl	8005db8 <move_window>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 8090 	bne.w	8006dc2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <dir_find+0x60>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	75fb      	strb	r3, [r7, #23]
 8006cb4:	e08a      	b.n	8006dcc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	330b      	adds	r3, #11
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc2:	73fb      	strb	r3, [r7, #15]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006cca:	7dbb      	ldrb	r3, [r7, #22]
 8006ccc:	2be5      	cmp	r3, #229	; 0xe5
 8006cce:	d007      	beq.n	8006ce0 <dir_find+0x8a>
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <dir_find+0x98>
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b0f      	cmp	r3, #15
 8006cde:	d006      	beq.n	8006cee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ce0:	23ff      	movs	r3, #255	; 0xff
 8006ce2:	757b      	strb	r3, [r7, #21]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
 8006cec:	e05e      	b.n	8006dac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d136      	bne.n	8006d62 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d154      	bne.n	8006dac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006d02:	7dbb      	ldrb	r3, [r7, #22]
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	7b5b      	ldrb	r3, [r3, #13]
 8006d12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006d14:	7dbb      	ldrb	r3, [r7, #22]
 8006d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d1a:	75bb      	strb	r3, [r7, #22]
 8006d1c:	7dbb      	ldrb	r3, [r7, #22]
 8006d1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d28:	7dba      	ldrb	r2, [r7, #22]
 8006d2a:	7d7b      	ldrb	r3, [r7, #21]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d115      	bne.n	8006d5c <dir_find+0x106>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	330d      	adds	r3, #13
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	7d3a      	ldrb	r2, [r7, #20]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d10e      	bne.n	8006d5c <dir_find+0x106>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7ff fdfd 	bl	8006948 <cmp_lfn>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <dir_find+0x106>
 8006d54:	7d7b      	ldrb	r3, [r7, #21]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e000      	b.n	8006d5e <dir_find+0x108>
 8006d5c:	23ff      	movs	r3, #255	; 0xff
 8006d5e:	757b      	strb	r3, [r7, #21]
 8006d60:	e024      	b.n	8006dac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d62:	7d7b      	ldrb	r3, [r7, #21]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <dir_find+0x126>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff ff51 	bl	8006c14 <sum_sfn>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461a      	mov	r2, r3
 8006d76:	7d3b      	ldrb	r3, [r7, #20]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d024      	beq.n	8006dc6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <dir_find+0x14a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a18      	ldr	r0, [r3, #32]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3324      	adds	r3, #36	; 0x24
 8006d92:	220b      	movs	r2, #11
 8006d94:	4619      	mov	r1, r3
 8006d96:	f7fe fe1d 	bl	80059d4 <mem_cmp>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d014      	beq.n	8006dca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006da0:	23ff      	movs	r3, #255	; 0xff
 8006da2:	757b      	strb	r3, [r7, #21]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fc6d 	bl	800668e <dir_next>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f43f af65 	beq.w	8006c8a <dir_find+0x34>
 8006dc0:	e004      	b.n	8006dcc <dir_find+0x176>
		if (res != FR_OK) break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006dca:	bf00      	nop

	return res;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08c      	sub	sp, #48	; 0x30
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <dir_register+0x20>
 8006df4:	2306      	movs	r3, #6
 8006df6:	e0e0      	b.n	8006fba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006df8:	2300      	movs	r3, #0
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfc:	e002      	b.n	8006e04 <dir_register+0x2c>
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	3301      	adds	r3, #1
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f4      	bne.n	8006dfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	220c      	movs	r2, #12
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fd9b 	bl	800595c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d032      	beq.n	8006e96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2240      	movs	r2, #64	; 0x40
 8006e34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006e38:	2301      	movs	r3, #1
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3c:	e016      	b.n	8006e6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	f107 010c 	add.w	r1, r7, #12
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	f7ff fe53 	bl	8006af8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff feff 	bl	8006c56 <dir_find>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	3301      	adds	r3, #1
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	2b63      	cmp	r3, #99	; 0x63
 8006e70:	d9e5      	bls.n	8006e3e <dir_register+0x66>
 8006e72:	e000      	b.n	8006e76 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	2b64      	cmp	r3, #100	; 0x64
 8006e7a:	d101      	bne.n	8006e80 <dir_register+0xa8>
 8006e7c:	2307      	movs	r3, #7
 8006e7e:	e09c      	b.n	8006fba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d002      	beq.n	8006e8e <dir_register+0xb6>
 8006e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e8c:	e095      	b.n	8006fba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e8e:	7dfa      	ldrb	r2, [r7, #23]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <dir_register+0xd8>
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	4a47      	ldr	r2, [pc, #284]	; (8006fc4 <dir_register+0x1ec>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	089b      	lsrs	r3, r3, #2
 8006eac:	3301      	adds	r3, #1
 8006eae:	e000      	b.n	8006eb2 <dir_register+0xda>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006eb4:	6a39      	ldr	r1, [r7, #32]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff fcbf 	bl	800683a <dir_alloc>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d148      	bne.n	8006f5c <dir_register+0x184>
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d042      	beq.n	8006f5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	015b      	lsls	r3, r3, #5
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fb4a 	bl	800657c <dir_sdi>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d132      	bne.n	8006f5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3324      	adds	r3, #36	; 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fe8a 	bl	8006c14 <sum_sfn>
 8006f00:	4603      	mov	r3, r0
 8006f02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	69f8      	ldr	r0, [r7, #28]
 8006f0c:	f7fe ff54 	bl	8005db8 <move_window>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11d      	bne.n	8006f5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	6918      	ldr	r0, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a19      	ldr	r1, [r3, #32]
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	7efb      	ldrb	r3, [r7, #27]
 8006f2c:	f7ff fd7c 	bl	8006a28 <put_lfn>
				fs->wflag = 1;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2201      	movs	r2, #1
 8006f34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f36:	2100      	movs	r1, #0
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fba8 	bl	800668e <dir_next>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d107      	bne.n	8006f5c <dir_register+0x184>
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	623b      	str	r3, [r7, #32]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1d5      	bne.n	8006f04 <dir_register+0x12c>
 8006f58:	e000      	b.n	8006f5c <dir_register+0x184>
				if (res != FR_OK) break;
 8006f5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d128      	bne.n	8006fb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	69f8      	ldr	r0, [r7, #28]
 8006f6c:	f7fe ff24 	bl	8005db8 <move_window>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d11b      	bne.n	8006fb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	2220      	movs	r2, #32
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fd09 	bl	800599e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a18      	ldr	r0, [r3, #32]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	220b      	movs	r2, #11
 8006f96:	4619      	mov	r1, r3
 8006f98:	f7fe fce0 	bl	800595c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f002 0218 	and.w	r2, r2, #24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3730      	adds	r7, #48	; 0x30
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	4ec4ec4f 	.word	0x4ec4ec4f

08006fc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	61ba      	str	r2, [r7, #24]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff8:	2b1f      	cmp	r3, #31
 8006ffa:	d940      	bls.n	800707e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8007000:	d006      	beq.n	8007010 <create_name+0x48>
 8007002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007004:	2b5c      	cmp	r3, #92	; 0x5c
 8007006:	d110      	bne.n	800702a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007008:	e002      	b.n	8007010 <create_name+0x48>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	3301      	adds	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	4413      	add	r3, r2
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b2f      	cmp	r3, #47	; 0x2f
 800701a:	d0f6      	beq.n	800700a <create_name+0x42>
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	4413      	add	r3, r2
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b5c      	cmp	r3, #92	; 0x5c
 8007026:	d0f0      	beq.n	800700a <create_name+0x42>
			break;
 8007028:	e02a      	b.n	8007080 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2bfe      	cmp	r3, #254	; 0xfe
 800702e:	d901      	bls.n	8007034 <create_name+0x6c>
 8007030:	2306      	movs	r3, #6
 8007032:	e17d      	b.n	8007330 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007036:	b2db      	uxtb	r3, r3
 8007038:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800703a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800703c:	2101      	movs	r1, #1
 800703e:	4618      	mov	r0, r3
 8007040:	f001 faae 	bl	80085a0 <ff_convert>
 8007044:	4603      	mov	r3, r0
 8007046:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <create_name+0x8a>
 800704e:	2306      	movs	r3, #6
 8007050:	e16e      	b.n	8007330 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007054:	2b7f      	cmp	r3, #127	; 0x7f
 8007056:	d809      	bhi.n	800706c <create_name+0xa4>
 8007058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800705a:	4619      	mov	r1, r3
 800705c:	488d      	ldr	r0, [pc, #564]	; (8007294 <create_name+0x2cc>)
 800705e:	f7fe fce0 	bl	8005a22 <chk_chr>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <create_name+0xa4>
 8007068:	2306      	movs	r3, #6
 800706a:	e161      	b.n	8007330 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	617a      	str	r2, [r7, #20]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800707a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800707c:	e7b4      	b.n	8006fe8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800707e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	441a      	add	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800708a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708c:	2b1f      	cmp	r3, #31
 800708e:	d801      	bhi.n	8007094 <create_name+0xcc>
 8007090:	2304      	movs	r3, #4
 8007092:	e000      	b.n	8007096 <create_name+0xce>
 8007094:	2300      	movs	r3, #0
 8007096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800709a:	e011      	b.n	80070c0 <create_name+0xf8>
		w = lfn[di - 1];
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070a2:	3b01      	subs	r3, #1
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80070ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d002      	beq.n	80070ba <create_name+0xf2>
 80070b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070b6:	2b2e      	cmp	r3, #46	; 0x2e
 80070b8:	d106      	bne.n	80070c8 <create_name+0x100>
		di--;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	3b01      	subs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ea      	bne.n	800709c <create_name+0xd4>
 80070c6:	e000      	b.n	80070ca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80070c8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <create_name+0x118>
 80070dc:	2306      	movs	r3, #6
 80070de:	e127      	b.n	8007330 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	220b      	movs	r2, #11
 80070e6:	2120      	movs	r1, #32
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fc58 	bl	800599e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e002      	b.n	80070fa <create_name+0x132>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	2b20      	cmp	r3, #32
 8007106:	d0f5      	beq.n	80070f4 <create_name+0x12c>
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	2b2e      	cmp	r3, #46	; 0x2e
 8007114:	d0ee      	beq.n	80070f4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <create_name+0x168>
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007120:	f043 0303 	orr.w	r3, r3, #3
 8007124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007128:	e002      	b.n	8007130 <create_name+0x168>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	3b01      	subs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <create_name+0x182>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800713c:	3b01      	subs	r3, #1
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	2b2e      	cmp	r3, #46	; 0x2e
 8007148:	d1ef      	bne.n	800712a <create_name+0x162>

	i = b = 0; ni = 8;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007150:	2300      	movs	r3, #0
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	2308      	movs	r3, #8
 8007156:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	61ba      	str	r2, [r7, #24]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8090 	beq.w	8007290 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007172:	2b20      	cmp	r3, #32
 8007174:	d006      	beq.n	8007184 <create_name+0x1bc>
 8007176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007178:	2b2e      	cmp	r3, #46	; 0x2e
 800717a:	d10a      	bne.n	8007192 <create_name+0x1ca>
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	429a      	cmp	r2, r3
 8007182:	d006      	beq.n	8007192 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007188:	f043 0303 	orr.w	r3, r3, #3
 800718c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007190:	e07d      	b.n	800728e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007192:	6a3a      	ldr	r2, [r7, #32]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	429a      	cmp	r2, r3
 8007198:	d203      	bcs.n	80071a2 <create_name+0x1da>
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d123      	bne.n	80071ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b0b      	cmp	r3, #11
 80071a6:	d106      	bne.n	80071b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ac:	f043 0303 	orr.w	r3, r3, #3
 80071b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071b4:	e075      	b.n	80072a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d005      	beq.n	80071ca <create_name+0x202>
 80071be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c2:	f043 0303 	orr.w	r3, r3, #3
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d866      	bhi.n	80072a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	2308      	movs	r3, #8
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	230b      	movs	r3, #11
 80071dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80071de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071e8:	e051      	b.n	800728e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80071ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ec:	2b7f      	cmp	r3, #127	; 0x7f
 80071ee:	d914      	bls.n	800721a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80071f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f9d3 	bl	80085a0 <ff_convert>
 80071fa:	4603      	mov	r3, r0
 80071fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <create_name+0x246>
 8007204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007206:	3b80      	subs	r3, #128	; 0x80
 8007208:	4a23      	ldr	r2, [pc, #140]	; (8007298 <create_name+0x2d0>)
 800720a:	5cd3      	ldrb	r3, [r2, r3]
 800720c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800720e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007212:	f043 0302 	orr.w	r3, r3, #2
 8007216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800721a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <create_name+0x268>
 8007220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007222:	4619      	mov	r1, r3
 8007224:	481d      	ldr	r0, [pc, #116]	; (800729c <create_name+0x2d4>)
 8007226:	f7fe fbfc 	bl	8005a22 <chk_chr>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007230:	235f      	movs	r3, #95	; 0x5f
 8007232:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007238:	f043 0303 	orr.w	r3, r3, #3
 800723c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007240:	e01b      	b.n	800727a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d909      	bls.n	800725c <create_name+0x294>
 8007248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800724a:	2b5a      	cmp	r3, #90	; 0x5a
 800724c:	d806      	bhi.n	800725c <create_name+0x294>
					b |= 2;
 800724e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007252:	f043 0302 	orr.w	r3, r3, #2
 8007256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800725a:	e00e      	b.n	800727a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800725c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725e:	2b60      	cmp	r3, #96	; 0x60
 8007260:	d90b      	bls.n	800727a <create_name+0x2b2>
 8007262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007264:	2b7a      	cmp	r3, #122	; 0x7a
 8007266:	d808      	bhi.n	800727a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007276:	3b20      	subs	r3, #32
 8007278:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	623a      	str	r2, [r7, #32]
 8007280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007282:	b2d1      	uxtb	r1, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	460a      	mov	r2, r1
 800728a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800728e:	e763      	b.n	8007158 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007290:	bf00      	nop
 8007292:	e006      	b.n	80072a2 <create_name+0x2da>
 8007294:	08008814 	.word	0x08008814
 8007298:	08009600 	.word	0x08009600
 800729c:	08008820 	.word	0x08008820
			if (si > di) break;			/* No extension */
 80072a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072a8:	2be5      	cmp	r3, #229	; 0xe5
 80072aa:	d103      	bne.n	80072b4 <create_name+0x2ec>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2205      	movs	r2, #5
 80072b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d104      	bne.n	80072c4 <create_name+0x2fc>
 80072ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80072c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072c8:	f003 030c 	and.w	r3, r3, #12
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d005      	beq.n	80072dc <create_name+0x314>
 80072d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d105      	bne.n	80072e8 <create_name+0x320>
 80072dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d117      	bne.n	8007324 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80072f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <create_name+0x344>
 8007300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007304:	f043 0310 	orr.w	r3, r3, #16
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800730c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b04      	cmp	r3, #4
 8007316:	d105      	bne.n	8007324 <create_name+0x35c>
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800731c:	f043 0308 	orr.w	r3, r3, #8
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800732a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800732e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007330:	4618      	mov	r0, r3
 8007332:	3728      	adds	r7, #40	; 0x28
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800734c:	e002      	b.n	8007354 <follow_path+0x1c>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b2f      	cmp	r3, #47	; 0x2f
 800735a:	d0f8      	beq.n	800734e <follow_path+0x16>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b5c      	cmp	r3, #92	; 0x5c
 8007362:	d0f4      	beq.n	800734e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2200      	movs	r2, #0
 8007368:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b1f      	cmp	r3, #31
 8007370:	d80a      	bhi.n	8007388 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2280      	movs	r2, #128	; 0x80
 8007376:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800737a:	2100      	movs	r1, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff f8fd 	bl	800657c <dir_sdi>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]
 8007386:	e048      	b.n	800741a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007388:	463b      	mov	r3, r7
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff fe1b 	bl	8006fc8 <create_name>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d139      	bne.n	8007410 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff fc5a 	bl	8006c56 <dir_find>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d12c      	bne.n	8007414 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d127      	bne.n	8007414 <follow_path+0xdc>
 80073c4:	2305      	movs	r3, #5
 80073c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073c8:	e024      	b.n	8007414 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073ca:	7afb      	ldrb	r3, [r7, #11]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d121      	bne.n	8007418 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	799b      	ldrb	r3, [r3, #6]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80073e0:	2305      	movs	r3, #5
 80073e2:	75fb      	strb	r3, [r7, #23]
 80073e4:	e019      	b.n	800741a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	8992      	ldrh	r2, [r2, #12]
 80073f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f8:	fb00 f202 	mul.w	r2, r0, r2
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	440b      	add	r3, r1
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fa60 	bl	80068c8 <ld_clust>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800740e:	e7bb      	b.n	8007388 <follow_path+0x50>
			if (res != FR_OK) break;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <follow_path+0xe2>
				break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007418:	bf00      	nop
			}
		}
	}

	return res;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d031      	beq.n	800749e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e002      	b.n	8007448 <get_ldnumber+0x24>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	3301      	adds	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b1f      	cmp	r3, #31
 800744e:	d903      	bls.n	8007458 <get_ldnumber+0x34>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b3a      	cmp	r3, #58	; 0x3a
 8007456:	d1f4      	bne.n	8007442 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b3a      	cmp	r3, #58	; 0x3a
 800745e:	d11c      	bne.n	800749a <get_ldnumber+0x76>
			tp = *path;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	60fa      	str	r2, [r7, #12]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	3b30      	subs	r3, #48	; 0x30
 8007470:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d80e      	bhi.n	8007496 <get_ldnumber+0x72>
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d10a      	bne.n	8007496 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <get_ldnumber+0x72>
					vol = (int)i;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	3301      	adds	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	e002      	b.n	80074a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800749e:	693b      	ldr	r3, [r7, #16]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	70da      	strb	r2, [r3, #3]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fe fc76 	bl	8005db8 <move_window>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <check_fs+0x2a>
 80074d2:	2304      	movs	r3, #4
 80074d4:	e038      	b.n	8007548 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3338      	adds	r3, #56	; 0x38
 80074da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f9ba 	bl	8005858 <ld_word>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d001      	beq.n	80074f4 <check_fs+0x48>
 80074f0:	2303      	movs	r3, #3
 80074f2:	e029      	b.n	8007548 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074fa:	2be9      	cmp	r3, #233	; 0xe9
 80074fc:	d009      	beq.n	8007512 <check_fs+0x66>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007504:	2beb      	cmp	r3, #235	; 0xeb
 8007506:	d11e      	bne.n	8007546 <check_fs+0x9a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800750e:	2b90      	cmp	r3, #144	; 0x90
 8007510:	d119      	bne.n	8007546 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3338      	adds	r3, #56	; 0x38
 8007516:	3336      	adds	r3, #54	; 0x36
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe f9b5 	bl	8005888 <ld_dword>
 800751e:	4603      	mov	r3, r0
 8007520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007524:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <check_fs+0xa4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d101      	bne.n	800752e <check_fs+0x82>
 800752a:	2300      	movs	r3, #0
 800752c:	e00c      	b.n	8007548 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3338      	adds	r3, #56	; 0x38
 8007532:	3352      	adds	r3, #82	; 0x52
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe f9a7 	bl	8005888 <ld_dword>
 800753a:	4603      	mov	r3, r0
 800753c:	4a05      	ldr	r2, [pc, #20]	; (8007554 <check_fs+0xa8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <check_fs+0x9a>
 8007542:	2300      	movs	r3, #0
 8007544:	e000      	b.n	8007548 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007546:	2302      	movs	r3, #2
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	00544146 	.word	0x00544146
 8007554:	33544146 	.word	0x33544146

08007558 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b096      	sub	sp, #88	; 0x58
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7ff ff59 	bl	8007424 <get_ldnumber>
 8007572:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007576:	2b00      	cmp	r3, #0
 8007578:	da01      	bge.n	800757e <find_volume+0x26>
 800757a:	230b      	movs	r3, #11
 800757c:	e265      	b.n	8007a4a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800757e:	4a9f      	ldr	r2, [pc, #636]	; (80077fc <find_volume+0x2a4>)
 8007580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <find_volume+0x3a>
 800758e:	230c      	movs	r3, #12
 8007590:	e25b      	b.n	8007a4a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007596:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01a      	beq.n	80075de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe f8b5 	bl	800571c <disk_status>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <find_volume+0x82>
 80075ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075d6:	230a      	movs	r3, #10
 80075d8:	e237      	b.n	8007a4a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80075da:	2300      	movs	r3, #0
 80075dc:	e235      	b.n	8007a4a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe f8ad 	bl	8005750 <disk_initialize>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007608:	2303      	movs	r3, #3
 800760a:	e21e      	b.n	8007a4a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <find_volume+0xca>
 8007612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800761e:	230a      	movs	r3, #10
 8007620:	e213      	b.n	8007a4a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	7858      	ldrb	r0, [r3, #1]
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	330c      	adds	r3, #12
 800762a:	461a      	mov	r2, r3
 800762c:	2102      	movs	r1, #2
 800762e:	f7fe f8f5 	bl	800581c <disk_ioctl>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <find_volume+0xe4>
 8007638:	2301      	movs	r3, #1
 800763a:	e206      	b.n	8007a4a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	899b      	ldrh	r3, [r3, #12]
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d80d      	bhi.n	8007662 <find_volume+0x10a>
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	899b      	ldrh	r3, [r3, #12]
 800764a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764e:	d308      	bcc.n	8007662 <find_volume+0x10a>
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	899b      	ldrh	r3, [r3, #12]
 8007654:	461a      	mov	r2, r3
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	899b      	ldrh	r3, [r3, #12]
 800765a:	3b01      	subs	r3, #1
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <find_volume+0x10e>
 8007662:	2301      	movs	r3, #1
 8007664:	e1f1      	b.n	8007a4a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800766a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800766c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800766e:	f7ff ff1d 	bl	80074ac <check_fs>
 8007672:	4603      	mov	r3, r0
 8007674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800767c:	2b02      	cmp	r3, #2
 800767e:	d149      	bne.n	8007714 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007680:	2300      	movs	r3, #0
 8007682:	643b      	str	r3, [r7, #64]	; 0x40
 8007684:	e01e      	b.n	80076c4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800768c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007694:	4413      	add	r3, r2
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	3304      	adds	r3, #4
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <find_volume+0x158>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	3308      	adds	r3, #8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe f8ee 	bl	8005888 <ld_dword>
 80076ac:	4602      	mov	r2, r0
 80076ae:	e000      	b.n	80076b2 <find_volume+0x15a>
 80076b0:	2200      	movs	r2, #0
 80076b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	3358      	adds	r3, #88	; 0x58
 80076b8:	443b      	add	r3, r7
 80076ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c0:	3301      	adds	r3, #1
 80076c2:	643b      	str	r3, [r7, #64]	; 0x40
 80076c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d9dd      	bls.n	8007686 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076ca:	2300      	movs	r3, #0
 80076cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80076ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <find_volume+0x182>
 80076d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d6:	3b01      	subs	r3, #1
 80076d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3358      	adds	r3, #88	; 0x58
 80076e0:	443b      	add	r3, r7
 80076e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <find_volume+0x1a2>
 80076ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076f2:	f7ff fedb 	bl	80074ac <check_fs>
 80076f6:	4603      	mov	r3, r0
 80076f8:	e000      	b.n	80076fc <find_volume+0x1a4>
 80076fa:	2303      	movs	r3, #3
 80076fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007704:	2b01      	cmp	r3, #1
 8007706:	d905      	bls.n	8007714 <find_volume+0x1bc>
 8007708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770a:	3301      	adds	r3, #1
 800770c:	643b      	str	r3, [r7, #64]	; 0x40
 800770e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007710:	2b03      	cmp	r3, #3
 8007712:	d9e2      	bls.n	80076da <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007718:	2b04      	cmp	r3, #4
 800771a:	d101      	bne.n	8007720 <find_volume+0x1c8>
 800771c:	2301      	movs	r3, #1
 800771e:	e194      	b.n	8007a4a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007724:	2b01      	cmp	r3, #1
 8007726:	d901      	bls.n	800772c <find_volume+0x1d4>
 8007728:	230d      	movs	r3, #13
 800772a:	e18e      	b.n	8007a4a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	3338      	adds	r3, #56	; 0x38
 8007730:	330b      	adds	r3, #11
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe f890 	bl	8005858 <ld_word>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	899b      	ldrh	r3, [r3, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <find_volume+0x1f0>
 8007744:	230d      	movs	r3, #13
 8007746:	e180      	b.n	8007a4a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	3338      	adds	r3, #56	; 0x38
 800774c:	3316      	adds	r3, #22
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f882 	bl	8005858 <ld_word>
 8007754:	4603      	mov	r3, r0
 8007756:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <find_volume+0x214>
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	3338      	adds	r3, #56	; 0x38
 8007762:	3324      	adds	r3, #36	; 0x24
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe f88f 	bl	8005888 <ld_dword>
 800776a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007770:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	789b      	ldrb	r3, [r3, #2]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d005      	beq.n	8007790 <find_volume+0x238>
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d001      	beq.n	8007790 <find_volume+0x238>
 800778c:	230d      	movs	r3, #13
 800778e:	e15c      	b.n	8007a4a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	789b      	ldrb	r3, [r3, #2]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	895b      	ldrh	r3, [r3, #10]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <find_volume+0x26c>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	895b      	ldrh	r3, [r3, #10]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	895b      	ldrh	r3, [r3, #10]
 80077bc:	3b01      	subs	r3, #1
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <find_volume+0x270>
 80077c4:	230d      	movs	r3, #13
 80077c6:	e140      	b.n	8007a4a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	3338      	adds	r3, #56	; 0x38
 80077cc:	3311      	adds	r3, #17
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe f842 	bl	8005858 <ld_word>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	891b      	ldrh	r3, [r3, #8]
 80077e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e2:	8992      	ldrh	r2, [r2, #12]
 80077e4:	0952      	lsrs	r2, r2, #5
 80077e6:	b292      	uxth	r2, r2
 80077e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80077ec:	fb01 f202 	mul.w	r2, r1, r2
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <find_volume+0x2a8>
 80077f8:	230d      	movs	r3, #13
 80077fa:	e126      	b.n	8007a4a <find_volume+0x4f2>
 80077fc:	20000468 	.word	0x20000468

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	3338      	adds	r3, #56	; 0x38
 8007804:	3313      	adds	r3, #19
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f826 	bl	8005858 <ld_word>
 800780c:	4603      	mov	r3, r0
 800780e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <find_volume+0x2cc>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	3338      	adds	r3, #56	; 0x38
 800781a:	3320      	adds	r3, #32
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe f833 	bl	8005888 <ld_dword>
 8007822:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	3338      	adds	r3, #56	; 0x38
 8007828:	330e      	adds	r3, #14
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe f814 	bl	8005858 <ld_word>
 8007830:	4603      	mov	r3, r0
 8007832:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007834:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <find_volume+0x2e6>
 800783a:	230d      	movs	r3, #13
 800783c:	e105      	b.n	8007a4a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800783e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007842:	4413      	add	r3, r2
 8007844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007846:	8911      	ldrh	r1, [r2, #8]
 8007848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800784a:	8992      	ldrh	r2, [r2, #12]
 800784c:	0952      	lsrs	r2, r2, #5
 800784e:	b292      	uxth	r2, r2
 8007850:	fbb1 f2f2 	udiv	r2, r1, r2
 8007854:	b292      	uxth	r2, r2
 8007856:	4413      	add	r3, r2
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800785a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	429a      	cmp	r2, r3
 8007860:	d201      	bcs.n	8007866 <find_volume+0x30e>
 8007862:	230d      	movs	r3, #13
 8007864:	e0f1      	b.n	8007a4a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800786e:	8952      	ldrh	r2, [r2, #10]
 8007870:	fbb3 f3f2 	udiv	r3, r3, r2
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <find_volume+0x328>
 800787c:	230d      	movs	r3, #13
 800787e:	e0e4      	b.n	8007a4a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007880:	2303      	movs	r3, #3
 8007882:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800788c:	4293      	cmp	r3, r2
 800788e:	d802      	bhi.n	8007896 <find_volume+0x33e>
 8007890:	2302      	movs	r3, #2
 8007892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	f640 72f5 	movw	r2, #4085	; 0xff5
 800789c:	4293      	cmp	r3, r2
 800789e:	d802      	bhi.n	80078a6 <find_volume+0x34e>
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078b2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80078b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80078b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b8:	441a      	add	r2, r3
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80078be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	441a      	add	r2, r3
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80078c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d11e      	bne.n	800790e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	3338      	adds	r3, #56	; 0x38
 80078d4:	332a      	adds	r3, #42	; 0x2a
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fd ffbe 	bl	8005858 <ld_word>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <find_volume+0x38e>
 80078e2:	230d      	movs	r3, #13
 80078e4:	e0b1      	b.n	8007a4a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	891b      	ldrh	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <find_volume+0x39a>
 80078ee:	230d      	movs	r3, #13
 80078f0:	e0ab      	b.n	8007a4a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	3338      	adds	r3, #56	; 0x38
 80078f6:	332c      	adds	r3, #44	; 0x2c
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fd ffc5 	bl	8005888 <ld_dword>
 80078fe:	4602      	mov	r2, r0
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
 800790c:	e01f      	b.n	800794e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	891b      	ldrh	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <find_volume+0x3c2>
 8007916:	230d      	movs	r3, #13
 8007918:	e097      	b.n	8007a4a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800791e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007920:	441a      	add	r2, r3
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800792a:	2b02      	cmp	r3, #2
 800792c:	d103      	bne.n	8007936 <find_volume+0x3de>
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	e00a      	b.n	800794c <find_volume+0x3f4>
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	085a      	lsrs	r2, r3, #1
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800794c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	6a1a      	ldr	r2, [r3, #32]
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	899b      	ldrh	r3, [r3, #12]
 8007956:	4619      	mov	r1, r3
 8007958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800795a:	440b      	add	r3, r1
 800795c:	3b01      	subs	r3, #1
 800795e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007960:	8989      	ldrh	r1, [r1, #12]
 8007962:	fbb3 f3f1 	udiv	r3, r3, r1
 8007966:	429a      	cmp	r2, r3
 8007968:	d201      	bcs.n	800796e <find_volume+0x416>
 800796a:	230d      	movs	r3, #13
 800796c:	e06d      	b.n	8007a4a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	619a      	str	r2, [r3, #24]
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	2280      	movs	r2, #128	; 0x80
 8007982:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007988:	2b03      	cmp	r3, #3
 800798a:	d149      	bne.n	8007a20 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	3338      	adds	r3, #56	; 0x38
 8007990:	3330      	adds	r3, #48	; 0x30
 8007992:	4618      	mov	r0, r3
 8007994:	f7fd ff60 	bl	8005858 <ld_word>
 8007998:	4603      	mov	r3, r0
 800799a:	2b01      	cmp	r3, #1
 800799c:	d140      	bne.n	8007a20 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800799e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a0:	3301      	adds	r3, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079a6:	f7fe fa07 	bl	8005db8 <move_window>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d137      	bne.n	8007a20 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	2200      	movs	r2, #0
 80079b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	3338      	adds	r3, #56	; 0x38
 80079ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd ff4a 	bl	8005858 <ld_word>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d127      	bne.n	8007a20 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	3338      	adds	r3, #56	; 0x38
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fd ff57 	bl	8005888 <ld_dword>
 80079da:	4603      	mov	r3, r0
 80079dc:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <find_volume+0x4fc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d11e      	bne.n	8007a20 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	3338      	adds	r3, #56	; 0x38
 80079e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd ff4c 	bl	8005888 <ld_dword>
 80079f0:	4603      	mov	r3, r0
 80079f2:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <find_volume+0x500>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d113      	bne.n	8007a20 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	3338      	adds	r3, #56	; 0x38
 80079fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fd ff41 	bl	8005888 <ld_dword>
 8007a06:	4602      	mov	r2, r0
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	3338      	adds	r3, #56	; 0x38
 8007a10:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fd ff37 	bl	8005888 <ld_dword>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007a26:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <find_volume+0x504>)
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <find_volume+0x504>)
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <find_volume+0x504>)
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	4a08      	ldr	r2, [pc, #32]	; (8007a60 <find_volume+0x508>)
 8007a40:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a44:	f7fe f950 	bl	8005ce8 <clear_lock>
#endif
	return FR_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3758      	adds	r7, #88	; 0x58
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	41615252 	.word	0x41615252
 8007a58:	61417272 	.word	0x61417272
 8007a5c:	2000046c 	.word	0x2000046c
 8007a60:	20000490 	.word	0x20000490

08007a64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a6e:	2309      	movs	r3, #9
 8007a70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01c      	beq.n	8007ab2 <validate+0x4e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d018      	beq.n	8007ab2 <validate+0x4e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d013      	beq.n	8007ab2 <validate+0x4e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	889a      	ldrh	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d10c      	bne.n	8007ab2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd fe3c 	bl	800571c <disk_status>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <validate+0x4e>
			res = FR_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <validate+0x5a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	e000      	b.n	8007ac0 <validate+0x5c>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	6013      	str	r3, [r2, #0]
	return res;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ae2:	f107 0310 	add.w	r3, r7, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fc9c 	bl	8007424 <get_ldnumber>
 8007aec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da01      	bge.n	8007af8 <f_mount+0x28>
 8007af4:	230b      	movs	r3, #11
 8007af6:	e02b      	b.n	8007b50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007af8:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <f_mount+0x88>)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007b08:	69b8      	ldr	r0, [r7, #24]
 8007b0a:	f7fe f8ed 	bl	8005ce8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	490d      	ldr	r1, [pc, #52]	; (8007b58 <f_mount+0x88>)
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <f_mount+0x66>
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d001      	beq.n	8007b3a <f_mount+0x6a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	e00a      	b.n	8007b50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b3a:	f107 010c 	add.w	r1, r7, #12
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	2200      	movs	r2, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff fd07 	bl	8007558 <find_volume>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000468 	.word	0x20000468

08007b5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b09a      	sub	sp, #104	; 0x68
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <f_open+0x18>
 8007b70:	2309      	movs	r3, #9
 8007b72:	e1bb      	b.n	8007eec <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b7c:	79fa      	ldrb	r2, [r7, #7]
 8007b7e:	f107 0114 	add.w	r1, r7, #20
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fce6 	bl	8007558 <find_volume>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007b92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 819f 	bne.w	8007eda <f_open+0x37e>
		dj.obj.fs = fs;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	f107 0318 	add.w	r3, r7, #24
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fbc5 	bl	8007338 <follow_path>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11a      	bne.n	8007bf2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007bc0:	b25b      	sxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da03      	bge.n	8007bce <f_open+0x72>
				res = FR_INVALID_NAME;
 8007bc6:	2306      	movs	r3, #6
 8007bc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007bcc:	e011      	b.n	8007bf2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	f107 0318 	add.w	r3, r7, #24
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd ff36 	bl	8005a58 <chk_lock>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	f003 031c 	and.w	r3, r3, #28
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d07f      	beq.n	8007cfc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d017      	beq.n	8007c34 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007c04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d10e      	bne.n	8007c2a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007c0c:	f7fd ff80 	bl	8005b10 <enq_lock>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d006      	beq.n	8007c24 <f_open+0xc8>
 8007c16:	f107 0318 	add.w	r3, r7, #24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff f8dc 	bl	8006dd8 <dir_register>
 8007c20:	4603      	mov	r3, r0
 8007c22:	e000      	b.n	8007c26 <f_open+0xca>
 8007c24:	2312      	movs	r3, #18
 8007c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	f043 0308 	orr.w	r3, r3, #8
 8007c30:	71fb      	strb	r3, [r7, #7]
 8007c32:	e010      	b.n	8007c56 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c34:	7fbb      	ldrb	r3, [r7, #30]
 8007c36:	f003 0311 	and.w	r3, r3, #17
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <f_open+0xea>
					res = FR_DENIED;
 8007c3e:	2307      	movs	r3, #7
 8007c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007c44:	e007      	b.n	8007c56 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <f_open+0xfa>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d168      	bne.n	8007d30 <f_open+0x1d4>
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d063      	beq.n	8007d30 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007c68:	f7fd fcfa 	bl	8005660 <get_fattime>
 8007c6c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	330e      	adds	r3, #14
 8007c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd fe45 	bl	8005904 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	3316      	adds	r3, #22
 8007c7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fd fe3f 	bl	8005904 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	330b      	adds	r3, #11
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c92:	4611      	mov	r1, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fe17 	bl	80068c8 <ld_clust>
 8007c9a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fe2f 	bl	8006906 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	331c      	adds	r3, #28
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fd fe28 	bl	8005904 <st_dword>
					fs->wflag = 1;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d037      	beq.n	8007d30 <f_open+0x1d4>
						dw = fs->winsect;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007cc6:	f107 0318 	add.w	r3, r7, #24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe fb1f 	bl	8006312 <remove_chain>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007cda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d126      	bne.n	8007d30 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe f866 	bl	8005db8 <move_window>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cf6:	3a01      	subs	r2, #1
 8007cf8:	615a      	str	r2, [r3, #20]
 8007cfa:	e019      	b.n	8007d30 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d115      	bne.n	8007d30 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007d04:	7fbb      	ldrb	r3, [r7, #30]
 8007d06:	f003 0310 	and.w	r3, r3, #16
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007d0e:	2304      	movs	r3, #4
 8007d10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d14:	e00c      	b.n	8007d30 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <f_open+0x1d4>
 8007d20:	7fbb      	ldrb	r3, [r7, #30]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <f_open+0x1d4>
						res = FR_DENIED;
 8007d2a:	2307      	movs	r3, #7
 8007d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d128      	bne.n	8007d8a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	f023 0301 	bic.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf14      	ite	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	2300      	moveq	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f107 0318 	add.w	r3, r7, #24
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fd feef 	bl	8005b54 <inc_lock>
 8007d76:	4602      	mov	r2, r0
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <f_open+0x22e>
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 80a3 	bne.w	8007eda <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fd94 	bl	80068c8 <ld_clust>
 8007da0:	4602      	mov	r2, r0
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	331c      	adds	r3, #28
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fd fd6c 	bl	8005888 <ld_dword>
 8007db0:	4602      	mov	r2, r0
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	88da      	ldrh	r2, [r3, #6]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	79fa      	ldrb	r2, [r7, #7]
 8007dce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3330      	adds	r3, #48	; 0x30
 8007de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fd fdd6 	bl	800599e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d06e      	beq.n	8007eda <f_open+0x37e>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d06a      	beq.n	8007eda <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	895b      	ldrh	r3, [r3, #10]
 8007e10:	461a      	mov	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	899b      	ldrh	r3, [r3, #12]
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
 8007e1a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e28:	e016      	b.n	8007e58 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe f87f 	bl	8005f32 <get_fat>
 8007e34:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d802      	bhi.n	8007e42 <f_open+0x2e6>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d102      	bne.n	8007e50 <f_open+0x2f4>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <f_open+0x30c>
 8007e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d8e0      	bhi.n	8007e2a <f_open+0x2ce>
				}
				fp->clust = clst;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d131      	bne.n	8007eda <f_open+0x37e>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	899b      	ldrh	r3, [r3, #12]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e82:	fb01 f202 	mul.w	r2, r1, r2
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d026      	beq.n	8007eda <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe f82f 	bl	8005ef4 <clust2sect>
 8007e96:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <f_open+0x34a>
						res = FR_INT_ERR;
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ea4:	e019      	b.n	8007eda <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	899b      	ldrh	r3, [r3, #12]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb4:	441a      	add	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	7858      	ldrb	r0, [r3, #1]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a1a      	ldr	r2, [r3, #32]
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f7fd fc67 	bl	800579c <disk_read>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <f_open+0x37e>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007eda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <f_open+0x38c>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ee8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3768      	adds	r7, #104	; 0x68
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08e      	sub	sp, #56	; 0x38
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f107 0214 	add.w	r2, r7, #20
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff fda5 	bl	8007a64 <validate>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <f_read+0x44>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	7d5b      	ldrb	r3, [r3, #21]
 8007f2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <f_read+0x4a>
 8007f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f3c:	e135      	b.n	80081aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	7d1b      	ldrb	r3, [r3, #20]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <f_read+0x5a>
 8007f4a:	2307      	movs	r3, #7
 8007f4c:	e12d      	b.n	80081aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	f240 811e 	bls.w	80081a0 <f_read+0x2ac>
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f68:	e11a      	b.n	80081a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	8992      	ldrh	r2, [r2, #12]
 8007f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f76:	fb01 f202 	mul.w	r2, r1, r2
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 80d5 	bne.w	800812c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	8992      	ldrh	r2, [r2, #12]
 8007f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	8952      	ldrh	r2, [r2, #10]
 8007f92:	3a01      	subs	r2, #1
 8007f94:	4013      	ands	r3, r2
 8007f96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d12f      	bne.n	8007ffe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	633b      	str	r3, [r7, #48]	; 0x30
 8007fac:	e013      	b.n	8007fd6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7fe faa5 	bl	800650c <clmt_clust>
 8007fc2:	6338      	str	r0, [r7, #48]	; 0x30
 8007fc4:	e007      	b.n	8007fd6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f7fd ffaf 	bl	8005f32 <get_fat>
 8007fd4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d804      	bhi.n	8007fe6 <f_read+0xf2>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	755a      	strb	r2, [r3, #21]
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e0e1      	b.n	80081aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d104      	bne.n	8007ff8 <f_read+0x104>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	755a      	strb	r2, [r3, #21]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e0d8      	b.n	80081aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7fd ff74 	bl	8005ef4 <clust2sect>
 800800c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <f_read+0x12a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2202      	movs	r2, #2
 8008018:	755a      	strb	r2, [r3, #21]
 800801a:	2302      	movs	r3, #2
 800801c:	e0c5      	b.n	80081aa <f_read+0x2b6>
			sect += csect;
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	899b      	ldrh	r3, [r3, #12]
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008032:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	2b00      	cmp	r3, #0
 8008038:	d041      	beq.n	80080be <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	4413      	add	r3, r2
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	8952      	ldrh	r2, [r2, #10]
 8008044:	4293      	cmp	r3, r2
 8008046:	d905      	bls.n	8008054 <f_read+0x160>
					cc = fs->csize - csect;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	895b      	ldrh	r3, [r3, #10]
 800804c:	461a      	mov	r2, r3
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	7858      	ldrb	r0, [r3, #1]
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800805e:	f7fd fb9d 	bl	800579c <disk_read>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <f_read+0x17e>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	755a      	strb	r2, [r3, #21]
 800806e:	2301      	movs	r3, #1
 8008070:	e09b      	b.n	80081aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	7d1b      	ldrb	r3, [r3, #20]
 8008076:	b25b      	sxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	da18      	bge.n	80080ae <f_read+0x1ba>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008086:	429a      	cmp	r2, r3
 8008088:	d911      	bls.n	80080ae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	8992      	ldrh	r2, [r2, #12]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809c:	18d0      	adds	r0, r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	899b      	ldrh	r3, [r3, #12]
 80080a8:	461a      	mov	r2, r3
 80080aa:	f7fd fc57 	bl	800595c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	899b      	ldrh	r3, [r3, #12]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80080bc:	e05c      	b.n	8008178 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d02e      	beq.n	8008126 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	7d1b      	ldrb	r3, [r3, #20]
 80080cc:	b25b      	sxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da18      	bge.n	8008104 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	7858      	ldrb	r0, [r3, #1]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a1a      	ldr	r2, [r3, #32]
 80080e0:	2301      	movs	r3, #1
 80080e2:	f7fd fb7b 	bl	80057dc <disk_write>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <f_read+0x202>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	755a      	strb	r2, [r3, #21]
 80080f2:	2301      	movs	r3, #1
 80080f4:	e059      	b.n	80081aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	7d1b      	ldrb	r3, [r3, #20]
 80080fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	7858      	ldrb	r0, [r3, #1]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800810e:	2301      	movs	r3, #1
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	f7fd fb43 	bl	800579c <disk_read>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <f_read+0x232>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	755a      	strb	r2, [r3, #21]
 8008122:	2301      	movs	r3, #1
 8008124:	e041      	b.n	80081aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	899b      	ldrh	r3, [r3, #12]
 8008130:	4618      	mov	r0, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	8992      	ldrh	r2, [r2, #12]
 800813a:	fbb3 f1f2 	udiv	r1, r3, r2
 800813e:	fb01 f202 	mul.w	r2, r1, r2
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	1ac3      	subs	r3, r0, r3
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d901      	bls.n	8008154 <f_read+0x260>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	8992      	ldrh	r2, [r2, #12]
 8008162:	fbb3 f0f2 	udiv	r0, r3, r2
 8008166:	fb00 f202 	mul.w	r2, r0, r2
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	440b      	add	r3, r1
 800816e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008170:	4619      	mov	r1, r3
 8008172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008174:	f7fd fbf2 	bl	800595c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	4413      	add	r3, r2
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	441a      	add	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	619a      	str	r2, [r3, #24]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	441a      	add	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f47f aee1 	bne.w	8007f6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3738      	adds	r7, #56	; 0x38
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f107 0208 	add.w	r2, r7, #8
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fc4e 	bl	8007a64 <validate>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d168      	bne.n	80082a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7d1b      	ldrb	r3, [r3, #20]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d062      	beq.n	80082a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	7d1b      	ldrb	r3, [r3, #20]
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da15      	bge.n	8008214 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	7858      	ldrb	r0, [r3, #1]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	2301      	movs	r3, #1
 80081f8:	f7fd faf0 	bl	80057dc <disk_write>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <f_sync+0x54>
 8008202:	2301      	movs	r3, #1
 8008204:	e04f      	b.n	80082a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7d1b      	ldrb	r3, [r3, #20]
 800820a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820e:	b2da      	uxtb	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008214:	f7fd fa24 	bl	8005660 <get_fattime>
 8008218:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fd fdc8 	bl	8005db8 <move_window>
 8008228:	4603      	mov	r3, r0
 800822a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d138      	bne.n	80082a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	330b      	adds	r3, #11
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	330b      	adds	r3, #11
 8008242:	f042 0220 	orr.w	r2, r2, #32
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	461a      	mov	r2, r3
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	f7fe fb56 	bl	8006906 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f103 021c 	add.w	r2, r3, #28
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f7fd fb4c 	bl	8005904 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3316      	adds	r3, #22
 8008270:	6939      	ldr	r1, [r7, #16]
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd fb46 	bl	8005904 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3312      	adds	r3, #18
 800827c:	2100      	movs	r1, #0
 800827e:	4618      	mov	r0, r3
 8008280:	f7fd fb25 	bl	80058ce <st_word>
					fs->wflag = 1;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2201      	movs	r2, #1
 8008288:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4618      	mov	r0, r3
 800828e:	f7fd fdc1 	bl	8005e14 <sync_fs>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7d1b      	ldrb	r3, [r3, #20]
 800829a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff ff7b 	bl	80081b2 <f_sync>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d118      	bne.n	80082f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f107 0208 	add.w	r2, r7, #8
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fbc8 	bl	8007a64 <validate>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10c      	bne.n	80082f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fd fcc4 	bl	8005c70 <dec_lock>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b092      	sub	sp, #72	; 0x48
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800830e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	2200      	movs	r2, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff f91d 	bl	8007558 <find_volume>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008324:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008328:	2b00      	cmp	r3, #0
 800832a:	f040 8099 	bne.w	8008460 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800832e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	3b02      	subs	r3, #2
 800833e:	429a      	cmp	r2, r3
 8008340:	d804      	bhi.n	800834c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e089      	b.n	8008460 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d128      	bne.n	80083aa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008358:	2302      	movs	r3, #2
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd fde3 	bl	8005f32 <get_fat>
 800836c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d103      	bne.n	800837e <f_getfree+0x7c>
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800837c:	e063      	b.n	8008446 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d103      	bne.n	800838c <f_getfree+0x8a>
 8008384:	2302      	movs	r3, #2
 8008386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800838a:	e05c      	b.n	8008446 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <f_getfree+0x96>
 8008392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008394:	3301      	adds	r3, #1
 8008396:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839a:	3301      	adds	r3, #1
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d3db      	bcc.n	8008360 <f_getfree+0x5e>
 80083a8:	e04d      	b.n	8008446 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ba:	2300      	movs	r3, #0
 80083bc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d113      	bne.n	80083ec <f_getfree+0xea>
							res = move_window(fs, sect++);
 80083c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80083cc:	4619      	mov	r1, r3
 80083ce:	f7fd fcf3 	bl	8005db8 <move_window>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80083d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d131      	bne.n	8008444 <f_getfree+0x142>
							p = fs->win;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	3338      	adds	r3, #56	; 0x38
 80083e4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	899b      	ldrh	r3, [r3, #12]
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d10f      	bne.n	8008414 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80083f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f6:	f7fd fa2f 	bl	8005858 <ld_word>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <f_getfree+0x104>
 8008400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008402:	3301      	adds	r3, #1
 8008404:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	3302      	adds	r3, #2
 800840a:	633b      	str	r3, [r7, #48]	; 0x30
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	3b02      	subs	r3, #2
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
 8008412:	e010      	b.n	8008436 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008416:	f7fd fa37 	bl	8005888 <ld_dword>
 800841a:	4603      	mov	r3, r0
 800841c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <f_getfree+0x128>
 8008424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008426:	3301      	adds	r3, #1
 8008428:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	3304      	adds	r3, #4
 800842e:	633b      	str	r3, [r7, #48]	; 0x30
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	3b04      	subs	r3, #4
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008438:	3b01      	subs	r3, #1
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1bd      	bne.n	80083be <f_getfree+0xbc>
 8008442:	e000      	b.n	8008446 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008444:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800844a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008450:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	791a      	ldrb	r2, [r3, #4]
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	f042 0201 	orr.w	r2, r2, #1
 800845c:	b2d2      	uxtb	r2, r2
 800845e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008464:	4618      	mov	r0, r3
 8008466:	3748      	adds	r7, #72	; 0x48
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008480:	e01b      	b.n	80084ba <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	f107 0114 	add.w	r1, r7, #20
 800848a:	2201      	movs	r2, #1
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff fd31 	bl	8007ef4 <f_read>
		if (rc != 1) break;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d116      	bne.n	80084c6 <f_gets+0x5a>
		c = s[0];
 8008498:	7d3b      	ldrb	r3, [r7, #20]
 800849a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	2b0d      	cmp	r3, #13
 80084a0:	d100      	bne.n	80084a4 <f_gets+0x38>
 80084a2:	e00a      	b.n	80084ba <f_gets+0x4e>
		*p++ = c;
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	61ba      	str	r2, [r7, #24]
 80084aa:	7dfa      	ldrb	r2, [r7, #23]
 80084ac:	701a      	strb	r2, [r3, #0]
		n++;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	3301      	adds	r3, #1
 80084b2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b0a      	cmp	r3, #10
 80084b8:	d007      	beq.n	80084ca <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	3b01      	subs	r3, #1
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	dbde      	blt.n	8008482 <f_gets+0x16>
 80084c4:	e002      	b.n	80084cc <f_gets+0x60>
		if (rc != 1) break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80084ca:	bf00      	nop
	}
	*p = 0;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2200      	movs	r2, #0
 80084d0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <f_gets+0x70>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	e000      	b.n	80084de <f_gets+0x72>
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084f6:	2301      	movs	r3, #1
 80084f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084fe:	4b1f      	ldr	r3, [pc, #124]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008500:	7a5b      	ldrb	r3, [r3, #9]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d131      	bne.n	800856c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008508:	4b1c      	ldr	r3, [pc, #112]	; (800857c <FATFS_LinkDriverEx+0x94>)
 800850a:	7a5b      	ldrb	r3, [r3, #9]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	4b1a      	ldr	r3, [pc, #104]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008512:	2100      	movs	r1, #0
 8008514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008516:	4b19      	ldr	r3, [pc, #100]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008518:	7a5b      	ldrb	r3, [r3, #9]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	4a17      	ldr	r2, [pc, #92]	; (800857c <FATFS_LinkDriverEx+0x94>)
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008526:	4b15      	ldr	r3, [pc, #84]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008528:	7a5b      	ldrb	r3, [r3, #9]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008530:	4413      	add	r3, r2
 8008532:	79fa      	ldrb	r2, [r7, #7]
 8008534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008536:	4b11      	ldr	r3, [pc, #68]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008538:	7a5b      	ldrb	r3, [r3, #9]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	b2d1      	uxtb	r1, r2
 8008540:	4a0e      	ldr	r2, [pc, #56]	; (800857c <FATFS_LinkDriverEx+0x94>)
 8008542:	7251      	strb	r1, [r2, #9]
 8008544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008546:	7dbb      	ldrb	r3, [r7, #22]
 8008548:	3330      	adds	r3, #48	; 0x30
 800854a:	b2da      	uxtb	r2, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	3301      	adds	r3, #1
 8008554:	223a      	movs	r2, #58	; 0x3a
 8008556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	3302      	adds	r3, #2
 800855c:	222f      	movs	r2, #47	; 0x2f
 800855e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	3303      	adds	r3, #3
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800856c:	7dfb      	ldrb	r3, [r7, #23]
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000690 	.word	0x20000690

08008580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800858a:	2200      	movs	r2, #0
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff ffaa 	bl	80084e8 <FATFS_LinkDriverEx>
 8008594:	4603      	mov	r3, r0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	2b7f      	cmp	r3, #127	; 0x7f
 80085b0:	d802      	bhi.n	80085b8 <ff_convert+0x18>
		c = chr;
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	81fb      	strh	r3, [r7, #14]
 80085b6:	e025      	b.n	8008604 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	2bff      	cmp	r3, #255	; 0xff
 80085c2:	d805      	bhi.n	80085d0 <ff_convert+0x30>
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	3b80      	subs	r3, #128	; 0x80
 80085c8:	4a12      	ldr	r2, [pc, #72]	; (8008614 <ff_convert+0x74>)
 80085ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ce:	e000      	b.n	80085d2 <ff_convert+0x32>
 80085d0:	2300      	movs	r3, #0
 80085d2:	81fb      	strh	r3, [r7, #14]
 80085d4:	e016      	b.n	8008604 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80085d6:	2300      	movs	r3, #0
 80085d8:	81fb      	strh	r3, [r7, #14]
 80085da:	e009      	b.n	80085f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80085dc:	89fb      	ldrh	r3, [r7, #14]
 80085de:	4a0d      	ldr	r2, [pc, #52]	; (8008614 <ff_convert+0x74>)
 80085e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e4:	88fa      	ldrh	r2, [r7, #6]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d006      	beq.n	80085f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80085ea:	89fb      	ldrh	r3, [r7, #14]
 80085ec:	3301      	adds	r3, #1
 80085ee:	81fb      	strh	r3, [r7, #14]
 80085f0:	89fb      	ldrh	r3, [r7, #14]
 80085f2:	2b7f      	cmp	r3, #127	; 0x7f
 80085f4:	d9f2      	bls.n	80085dc <ff_convert+0x3c>
 80085f6:	e000      	b.n	80085fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80085f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80085fa:	89fb      	ldrh	r3, [r7, #14]
 80085fc:	3380      	adds	r3, #128	; 0x80
 80085fe:	b29b      	uxth	r3, r3
 8008600:	b2db      	uxtb	r3, r3
 8008602:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008604:	89fb      	ldrh	r3, [r7, #14]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	08009690 	.word	0x08009690

08008618 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008628:	d201      	bcs.n	800862e <ff_wtoupper+0x16>
 800862a:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <ff_wtoupper+0x10c>)
 800862c:	e000      	b.n	8008630 <ff_wtoupper+0x18>
 800862e:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <ff_wtoupper+0x110>)
 8008630:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	1c9a      	adds	r2, r3, #2
 8008636:	617a      	str	r2, [r7, #20]
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800863c:	8a7b      	ldrh	r3, [r7, #18]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d068      	beq.n	8008714 <ff_wtoupper+0xfc>
 8008642:	88fa      	ldrh	r2, [r7, #6]
 8008644:	8a7b      	ldrh	r3, [r7, #18]
 8008646:	429a      	cmp	r2, r3
 8008648:	d364      	bcc.n	8008714 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	1c9a      	adds	r2, r3, #2
 800864e:	617a      	str	r2, [r7, #20]
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	823b      	strh	r3, [r7, #16]
 8008654:	8a3b      	ldrh	r3, [r7, #16]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	81fb      	strh	r3, [r7, #14]
 800865a:	8a3b      	ldrh	r3, [r7, #16]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	8a79      	ldrh	r1, [r7, #18]
 8008664:	8a3b      	ldrh	r3, [r7, #16]
 8008666:	440b      	add	r3, r1
 8008668:	429a      	cmp	r2, r3
 800866a:	da49      	bge.n	8008700 <ff_wtoupper+0xe8>
			switch (cmd) {
 800866c:	89fb      	ldrh	r3, [r7, #14]
 800866e:	2b08      	cmp	r3, #8
 8008670:	d84f      	bhi.n	8008712 <ff_wtoupper+0xfa>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <ff_wtoupper+0x60>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	0800869d 	.word	0x0800869d
 800867c:	080086af 	.word	0x080086af
 8008680:	080086c5 	.word	0x080086c5
 8008684:	080086cd 	.word	0x080086cd
 8008688:	080086d5 	.word	0x080086d5
 800868c:	080086dd 	.word	0x080086dd
 8008690:	080086e5 	.word	0x080086e5
 8008694:	080086ed 	.word	0x080086ed
 8008698:	080086f5 	.word	0x080086f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	8a7b      	ldrh	r3, [r7, #18]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4413      	add	r3, r2
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	80fb      	strh	r3, [r7, #6]
 80086ac:	e027      	b.n	80086fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80086ae:	88fa      	ldrh	r2, [r7, #6]
 80086b0:	8a7b      	ldrh	r3, [r7, #18]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	80fb      	strh	r3, [r7, #6]
 80086c2:	e01c      	b.n	80086fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	3b10      	subs	r3, #16
 80086c8:	80fb      	strh	r3, [r7, #6]
 80086ca:	e018      	b.n	80086fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	3b20      	subs	r3, #32
 80086d0:	80fb      	strh	r3, [r7, #6]
 80086d2:	e014      	b.n	80086fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	3b30      	subs	r3, #48	; 0x30
 80086d8:	80fb      	strh	r3, [r7, #6]
 80086da:	e010      	b.n	80086fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	3b1a      	subs	r3, #26
 80086e0:	80fb      	strh	r3, [r7, #6]
 80086e2:	e00c      	b.n	80086fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80086e4:	88fb      	ldrh	r3, [r7, #6]
 80086e6:	3308      	adds	r3, #8
 80086e8:	80fb      	strh	r3, [r7, #6]
 80086ea:	e008      	b.n	80086fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	3b50      	subs	r3, #80	; 0x50
 80086f0:	80fb      	strh	r3, [r7, #6]
 80086f2:	e004      	b.n	80086fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80086fa:	80fb      	strh	r3, [r7, #6]
 80086fc:	bf00      	nop
			}
			break;
 80086fe:	e008      	b.n	8008712 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008700:	89fb      	ldrh	r3, [r7, #14]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d195      	bne.n	8008632 <ff_wtoupper+0x1a>
 8008706:	8a3b      	ldrh	r3, [r7, #16]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008710:	e78f      	b.n	8008632 <ff_wtoupper+0x1a>
			break;
 8008712:	bf00      	nop
	}

	return chr;
 8008714:	88fb      	ldrh	r3, [r7, #6]
}
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	08009790 	.word	0x08009790
 8008728:	08009984 	.word	0x08009984

0800872c <__libc_init_array>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	4d0d      	ldr	r5, [pc, #52]	; (8008764 <__libc_init_array+0x38>)
 8008730:	4c0d      	ldr	r4, [pc, #52]	; (8008768 <__libc_init_array+0x3c>)
 8008732:	1b64      	subs	r4, r4, r5
 8008734:	10a4      	asrs	r4, r4, #2
 8008736:	2600      	movs	r6, #0
 8008738:	42a6      	cmp	r6, r4
 800873a:	d109      	bne.n	8008750 <__libc_init_array+0x24>
 800873c:	4d0b      	ldr	r5, [pc, #44]	; (800876c <__libc_init_array+0x40>)
 800873e:	4c0c      	ldr	r4, [pc, #48]	; (8008770 <__libc_init_array+0x44>)
 8008740:	f000 f830 	bl	80087a4 <_init>
 8008744:	1b64      	subs	r4, r4, r5
 8008746:	10a4      	asrs	r4, r4, #2
 8008748:	2600      	movs	r6, #0
 800874a:	42a6      	cmp	r6, r4
 800874c:	d105      	bne.n	800875a <__libc_init_array+0x2e>
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	f855 3b04 	ldr.w	r3, [r5], #4
 8008754:	4798      	blx	r3
 8008756:	3601      	adds	r6, #1
 8008758:	e7ee      	b.n	8008738 <__libc_init_array+0xc>
 800875a:	f855 3b04 	ldr.w	r3, [r5], #4
 800875e:	4798      	blx	r3
 8008760:	3601      	adds	r6, #1
 8008762:	e7f2      	b.n	800874a <__libc_init_array+0x1e>
 8008764:	08009a48 	.word	0x08009a48
 8008768:	08009a48 	.word	0x08009a48
 800876c:	08009a48 	.word	0x08009a48
 8008770:	08009a4c 	.word	0x08009a4c

08008774 <memset>:
 8008774:	4402      	add	r2, r0
 8008776:	4603      	mov	r3, r0
 8008778:	4293      	cmp	r3, r2
 800877a:	d100      	bne.n	800877e <memset+0xa>
 800877c:	4770      	bx	lr
 800877e:	f803 1b01 	strb.w	r1, [r3], #1
 8008782:	e7f9      	b.n	8008778 <memset+0x4>

08008784 <strcat>:
 8008784:	b510      	push	{r4, lr}
 8008786:	4602      	mov	r2, r0
 8008788:	7814      	ldrb	r4, [r2, #0]
 800878a:	4613      	mov	r3, r2
 800878c:	3201      	adds	r2, #1
 800878e:	2c00      	cmp	r4, #0
 8008790:	d1fa      	bne.n	8008788 <strcat+0x4>
 8008792:	3b01      	subs	r3, #1
 8008794:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008798:	f803 2f01 	strb.w	r2, [r3, #1]!
 800879c:	2a00      	cmp	r2, #0
 800879e:	d1f9      	bne.n	8008794 <strcat+0x10>
 80087a0:	bd10      	pop	{r4, pc}
	...

080087a4 <_init>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr

080087b0 <_fini>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr
