
Glassware-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006738  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007788  08007788  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007790  08007790  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000028  080077c0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080077c0  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001447f  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a76  00000000  00000000  000344d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  000380f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046fc  00000000  00000000  00039178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178c1  00000000  00000000  0003d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d329d  00000000  00000000  00055135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001283d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  00128424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000028 	.word	0x20000028
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080068ac 	.word	0x080068ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	080068ac 	.word	0x080068ac

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 ffbb 	bl	8001452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f8e8 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fa52 	bl	8000988 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f92a 	bl	800073c <MX_I2C1_Init>
  MX_FATFS_Init();
 80004e8:	f003 feba 	bl	8004260 <MX_FATFS_Init>
  MX_SPI1_Init();
 80004ec:	f000 f992 	bl	8000814 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004f0:	f000 f9ce 	bl	8000890 <MX_SPI2_Init>
  MX_SPI3_Init();
 80004f4:	f000 fa0a 	bl	800090c <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 80004f8:	f000 f95e 	bl	80007b8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize screen
  enum menuState menu = dir;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  SSD1306_Init();
 8000502:	f000 facb 	bl	8000a9c <SSD1306_Init>
  // Initialize SD card
  // some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations
  char* filename = "test.txt";
 8000506:	4b60      	ldr	r3, [pc, #384]	; (8000688 <main+0x1b8>)
 8000508:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

  fres = f_mount(&FatFs, "/", 1); // 1 = mount now
 800050c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000510:	2201      	movs	r2, #1
 8000512:	495e      	ldr	r1, [pc, #376]	; (800068c <main+0x1bc>)
 8000514:	4618      	mov	r0, r3
 8000516:	f005 fc53 	bl	8005dc0 <f_mount>
 800051a:	4603      	mov	r3, r0
 800051c:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK)
 8000520:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00b      	beq.n	8000540 <main+0x70>
  {
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fc20 	bl	8000d70 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-Mnt", &Font_11x18, 1); // error mounting
 8000530:	2201      	movs	r2, #1
 8000532:	4957      	ldr	r1, [pc, #348]	; (8000690 <main+0x1c0>)
 8000534:	4857      	ldr	r0, [pc, #348]	; (8000694 <main+0x1c4>)
 8000536:	f000 fcb1 	bl	8000e9c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 800053a:	f000 fb73 	bl	8000c24 <SSD1306_UpdateScreen>
      #endif
	  while(1);
 800053e:	e7fe      	b.n	800053e <main+0x6e>
  }

  #ifdef DEBUG
  DWORD free_clusters, free_sectors, total_sectors;
  FATFS* getFreeFs;
  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000540:	f107 0220 	add.w	r2, r7, #32
 8000544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000548:	4619      	mov	r1, r3
 800054a:	4853      	ldr	r0, [pc, #332]	; (8000698 <main+0x1c8>)
 800054c:	f006 f823 	bl	8006596 <f_getfree>
 8000550:	4603      	mov	r3, r0
 8000552:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK)
 8000556:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00b      	beq.n	8000576 <main+0xa6>
  {
	  SSD1306_GotoXY (0,0);
 800055e:	2100      	movs	r1, #0
 8000560:	2000      	movs	r0, #0
 8000562:	f000 fc05 	bl	8000d70 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-GFr", &Font_11x18, 1); // error getting free
 8000566:	2201      	movs	r2, #1
 8000568:	4949      	ldr	r1, [pc, #292]	; (8000690 <main+0x1c0>)
 800056a:	484c      	ldr	r0, [pc, #304]	; (800069c <main+0x1cc>)
 800056c:	f000 fc96 	bl	8000e9c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000570:	f000 fb58 	bl	8000c24 <SSD1306_UpdateScreen>
	  while(1);
 8000574:	e7fe      	b.n	8000574 <main+0xa4>
  }
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000576:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800057a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	3b02      	subs	r3, #2
 8000584:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000588:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800058c:	6812      	ldr	r2, [r2, #0]
 800058e:	8952      	ldrh	r2, [r2, #10]
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  free_sectors = free_clusters * getFreeFs->csize;
 8000598:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800059c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	895b      	ldrh	r3, [r3, #10]
 80005a4:	461a      	mov	r2, r3
 80005a6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80005aa:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
  #endif

  fres = f_open(&fil, filename, FA_READ);
 80005b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005bc:	2201      	movs	r2, #1
 80005be:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 fc42 	bl	8005e4c <f_open>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if (fres != FR_OK) {
 80005ce:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00b      	beq.n	80005ee <main+0x11e>
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fbc9 	bl	8000d70 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-OpF", &Font_11x18, 1); // error opening file
 80005de:	2201      	movs	r2, #1
 80005e0:	492b      	ldr	r1, [pc, #172]	; (8000690 <main+0x1c0>)
 80005e2:	482f      	ldr	r0, [pc, #188]	; (80006a0 <main+0x1d0>)
 80005e4:	f000 fc5a 	bl	8000e9c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80005e8:	f000 fb1c 	bl	8000c24 <SSD1306_UpdateScreen>
 	  #endif
	  while(1);
 80005ec:	e7fe      	b.n	80005ec <main+0x11c>
  }

  BYTE readBuf[30];
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80005ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005f2:	463b      	mov	r3, r7
 80005f4:	211e      	movs	r1, #30
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 f882 	bl	8006700 <f_gets>
 80005fc:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
  if (rres == 0)
 8000600:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10b      	bne.n	8000620 <main+0x150>
  {
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fbb0 	bl	8000d70 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-RdF", &Font_11x18, 1); // error reading file
 8000610:	2201      	movs	r2, #1
 8000612:	491f      	ldr	r1, [pc, #124]	; (8000690 <main+0x1c0>)
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <main+0x1d4>)
 8000616:	f000 fc41 	bl	8000e9c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800061a:	f000 fb03 	bl	8000c24 <SSD1306_UpdateScreen>
      #endif
	  while(1);
 800061e:	e7fe      	b.n	800061e <main+0x14e>
  }
  f_close(&fil);
 8000620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000624:	4618      	mov	r0, r3
 8000626:	f005 ff8c 	bl	8006542 <f_close>
  #ifdef DEBUG
  SSD1306_GotoXY (0,0);
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fb9f 	bl	8000d70 <SSD1306_GotoXY>
  SSD1306_Puts(strcat("File: ", filename), &Font_11x18, 1);
 8000632:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <main+0x1d8>)
 8000638:	f006 f928 	bl	800688c <strcat>
 800063c:	4603      	mov	r3, r0
 800063e:	2201      	movs	r2, #1
 8000640:	4913      	ldr	r1, [pc, #76]	; (8000690 <main+0x1c0>)
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc2a 	bl	8000e9c <SSD1306_Puts>
  SSD1306_GotoXY (11,0);
 8000648:	2100      	movs	r1, #0
 800064a:	200b      	movs	r0, #11
 800064c:	f000 fb90 	bl	8000d70 <SSD1306_GotoXY>
  SSD1306_Puts(readBuf, &Font_11x18, 1);
 8000650:	463b      	mov	r3, r7
 8000652:	2201      	movs	r2, #1
 8000654:	490e      	ldr	r1, [pc, #56]	; (8000690 <main+0x1c0>)
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fc20 	bl	8000e9c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800065c:	f000 fae2 	bl	8000c24 <SSD1306_UpdateScreen>
  HAL_Delay(2000);
 8000660:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000664:	f000 ff6a 	bl	800153c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_GotoXY (0,21);
 8000668:	2115      	movs	r1, #21
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fb80 	bl	8000d70 <SSD1306_GotoXY>
	  SSD1306_Puts ("HEPL WORLD :)", &Font_11x18, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	4907      	ldr	r1, [pc, #28]	; (8000690 <main+0x1c0>)
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <main+0x1dc>)
 8000676:	f000 fc11 	bl	8000e9c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 800067a:	f000 fad3 	bl	8000c24 <SSD1306_UpdateScreen>

	  HAL_Delay (2000);
 800067e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000682:	f000 ff5b 	bl	800153c <HAL_Delay>
	  SSD1306_GotoXY (0,21);
 8000686:	e7ef      	b.n	8000668 <main+0x198>
 8000688:	080068c4 	.word	0x080068c4
 800068c:	080068d0 	.word	0x080068d0
 8000690:	20000000 	.word	0x20000000
 8000694:	080068d4 	.word	0x080068d4
 8000698:	080068e0 	.word	0x080068e0
 800069c:	080068e4 	.word	0x080068e4
 80006a0:	080068f0 	.word	0x080068f0
 80006a4:	080068fc 	.word	0x080068fc
 80006a8:	08006908 	.word	0x08006908
 80006ac:	08006910 	.word	0x08006910

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 f8dc 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d6:	f001 fefd 	bl	80024d4 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 f9d6 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e4:	2310      	movs	r3, #16
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f0:	2360      	movs	r3, #96	; 0x60
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 ff3f 	bl	8002580 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000708:	f000 f9c2 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fb3f 	bl	8002da8 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000730:	f000 f9ae 	bl	8000a90 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	; 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000748:	2204      	movs	r2, #4
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_I2C1_Init+0x74>)
 8000778:	f001 f97c 	bl	8001a74 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f985 	bl	8000a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C1_Init+0x74>)
 800078a:	f001 fdfd 	bl	8002388 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f97c 	bl	8000a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2C1_Init+0x74>)
 800079c:	f001 fe3f 	bl	800241e <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f973 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000044 	.word	0x20000044
 80007b4:	40005400 	.word	0x40005400

080007b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_LPUART1_UART_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_LPUART1_UART_Init+0x58>)
 80007c6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_LPUART1_UART_Init+0x50>)
 80007f6:	f003 f8da 	bl	80039ae <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 f946 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000098 	.word	0x20000098
 800080c:	40008000 	.word	0x40008000
 8000810:	00033324 	.word	0x00033324

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI1_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x74>)
 800082e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI1_Init+0x74>)
 8000874:	f002 fff8 	bl	8003868 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f907 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000011c 	.word	0x2000011c
 800088c:	40013000 	.word	0x40013000

08000890 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_SPI2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_SPI2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_SPI2_Init+0x74>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI2_Init+0x74>)
 80008aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI2_Init+0x74>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_SPI2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI2_Init+0x74>)
 80008de:	2207      	movs	r2, #7
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_SPI2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI2_Init+0x74>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_SPI2_Init+0x74>)
 80008f0:	f002 ffba 	bl	8003868 <HAL_SPI_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f8c9 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000180 	.word	0x20000180
 8000908:	40003800 	.word	0x40003800

0800090c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_SPI3_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_SPI3_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_SPI3_Init+0x74>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_SPI3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI3_Init+0x74>)
 8000926:	f44f 7240 	mov.w	r2, #768	; 0x300
 800092a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_SPI3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI3_Init+0x74>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI3_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI3_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI3_Init+0x74>)
 800095a:	2207      	movs	r2, #7
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_SPI3_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI3_Init+0x74>)
 8000966:	2208      	movs	r2, #8
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_SPI3_Init+0x74>)
 800096c:	f002 ff7c 	bl	8003868 <HAL_SPI_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f88b 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001e4 	.word	0x200001e4
 8000984:	40003c00 	.word	0x40003c00

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <MX_GPIO_Init+0xfc>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f248 0110 	movw	r1, #32784	; 0x8010
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 f828 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SD_CS_Pin|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8
 80009f4:	2200      	movs	r2, #0
 80009f6:	f240 3185 	movw	r1, #901	; 0x385
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_GPIO_Init+0x100>)
 80009fc:	f001 f822 	bl	8001a44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0x104>)
 8000a06:	f001 f81d 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000a0a:	f248 0310 	movw	r3, #32784	; 0x8010
 8000a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f000 fe93 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SD_CS_Pin PB2 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = SPI2_SD_CS_Pin|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8
 8000a2a:	f240 3385 	movw	r3, #901	; 0x385
 8000a2e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_GPIO_Init+0x100>)
 8000a44:	f000 fe84 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x100>)
 8000a5c:	f000 fe78 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a60:	2308      	movs	r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x104>)
 8000a78:	f000 fe6a 	bl	8001750 <HAL_GPIO_Init>

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	48001c00 	.word	0x48001c00

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000aa2:	f000 fa21 	bl	8000ee8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000aa6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2178      	movs	r1, #120	; 0x78
 8000aae:	485b      	ldr	r0, [pc, #364]	; (8000c1c <SSD1306_Init+0x180>)
 8000ab0:	f001 f964 	bl	8001d7c <HAL_I2C_IsDeviceReady>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e0a9      	b.n	8000c12 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000abe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ac2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ac4:	e002      	b.n	8000acc <SSD1306_Init+0x30>
		p--;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f9      	bne.n	8000ac6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ad2:	22ae      	movs	r2, #174	; 0xae
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2078      	movs	r0, #120	; 0x78
 8000ad8:	f000 fa82 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000adc:	2220      	movs	r2, #32
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2078      	movs	r0, #120	; 0x78
 8000ae2:	f000 fa7d 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2078      	movs	r0, #120	; 0x78
 8000aec:	f000 fa78 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000af0:	22b0      	movs	r2, #176	; 0xb0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2078      	movs	r0, #120	; 0x78
 8000af6:	f000 fa73 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000afa:	22c8      	movs	r2, #200	; 0xc8
 8000afc:	2100      	movs	r1, #0
 8000afe:	2078      	movs	r0, #120	; 0x78
 8000b00:	f000 fa6e 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2078      	movs	r0, #120	; 0x78
 8000b0a:	f000 fa69 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b0e:	2210      	movs	r2, #16
 8000b10:	2100      	movs	r1, #0
 8000b12:	2078      	movs	r0, #120	; 0x78
 8000b14:	f000 fa64 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b18:	2240      	movs	r2, #64	; 0x40
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2078      	movs	r0, #120	; 0x78
 8000b1e:	f000 fa5f 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b22:	2281      	movs	r2, #129	; 0x81
 8000b24:	2100      	movs	r1, #0
 8000b26:	2078      	movs	r0, #120	; 0x78
 8000b28:	f000 fa5a 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b2c:	22ff      	movs	r2, #255	; 0xff
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2078      	movs	r0, #120	; 0x78
 8000b32:	f000 fa55 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b36:	22a1      	movs	r2, #161	; 0xa1
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2078      	movs	r0, #120	; 0x78
 8000b3c:	f000 fa50 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000b40:	22a6      	movs	r2, #166	; 0xa6
 8000b42:	2100      	movs	r1, #0
 8000b44:	2078      	movs	r0, #120	; 0x78
 8000b46:	f000 fa4b 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1:32)
 8000b4a:	22a8      	movs	r2, #168	; 0xa8
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2078      	movs	r0, #120	; 0x78
 8000b50:	f000 fa46 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 8000b54:	221f      	movs	r2, #31
 8000b56:	2100      	movs	r1, #0
 8000b58:	2078      	movs	r0, #120	; 0x78
 8000b5a:	f000 fa41 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b5e:	22a4      	movs	r2, #164	; 0xa4
 8000b60:	2100      	movs	r1, #0
 8000b62:	2078      	movs	r0, #120	; 0x78
 8000b64:	f000 fa3c 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000b68:	22d3      	movs	r2, #211	; 0xd3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2078      	movs	r0, #120	; 0x78
 8000b6e:	f000 fa37 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-no offset
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2078      	movs	r0, #120	; 0x78
 8000b78:	f000 fa32 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b7c:	22d5      	movs	r2, #213	; 0xd5
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2078      	movs	r0, #120	; 0x78
 8000b82:	f000 fa2d 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000b86:	22f0      	movs	r2, #240	; 0xf0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2078      	movs	r0, #120	; 0x78
 8000b8c:	f000 fa28 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b90:	22d9      	movs	r2, #217	; 0xd9
 8000b92:	2100      	movs	r1, #0
 8000b94:	2078      	movs	r0, #120	; 0x78
 8000b96:	f000 fa23 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b9a:	2222      	movs	r2, #34	; 0x22
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2078      	movs	r0, #120	; 0x78
 8000ba0:	f000 fa1e 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ba4:	22da      	movs	r2, #218	; 0xda
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2078      	movs	r0, #120	; 0x78
 8000baa:	f000 fa19 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000bae:	2212      	movs	r2, #18
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 fa14 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000bb8:	22db      	movs	r2, #219	; 0xdb
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 fa0f 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fa0a 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bcc:	228d      	movs	r2, #141	; 0x8d
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fa05 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fa00 	bl	8000fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000be0:	22af      	movs	r2, #175	; 0xaf
 8000be2:	2100      	movs	r1, #0
 8000be4:	2078      	movs	r0, #120	; 0x78
 8000be6:	f000 f9fb 	bl	8000fe0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000bea:	222e      	movs	r2, #46	; 0x2e
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f000 f9f6 	bl	8000fe0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f843 	bl	8000c80 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000bfa:	f000 f813 	bl	8000c24 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <SSD1306_Init+0x184>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SSD1306_Init+0x184>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SSD1306_Init+0x184>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000044 	.word	0x20000044
 8000c20:	20000448 	.word	0x20000448

08000c24 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e01d      	b.n	8000c6c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3b50      	subs	r3, #80	; 0x50
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2078      	movs	r0, #120	; 0x78
 8000c3c:	f000 f9d0 	bl	8000fe0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f000 f9cb 	bl	8000fe0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 f9c6 	bl	8000fe0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	01db      	lsls	r3, r3, #7
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <SSD1306_UpdateScreen+0x58>)
 8000c5a:	441a      	add	r2, r3
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	2078      	movs	r0, #120	; 0x78
 8000c62:	f000 f957 	bl	8000f14 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d9de      	bls.n	8000c30 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000248 	.word	0x20000248

08000c80 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <SSD1306_Fill+0x14>
 8000c90:	2300      	movs	r3, #0
 8000c92:	e000      	b.n	8000c96 <SSD1306_Fill+0x16>
 8000c94:	23ff      	movs	r3, #255	; 0xff
 8000c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <SSD1306_Fill+0x2c>)
 8000c9e:	f005 fded 	bl	800687c <memset>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000248 	.word	0x20000248

08000cb0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	70fb      	strb	r3, [r7, #3]
	if (
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc6:	d848      	bhi.n	8000d5a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	2b1f      	cmp	r3, #31
 8000ccc:	d845      	bhi.n	8000d5a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <SSD1306_DrawPixel+0xb8>)
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf0c      	ite	eq
 8000cdc:	2301      	moveq	r3, #1
 8000cde:	2300      	movne	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d11a      	bne.n	8000d20 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cea:	88fa      	ldrh	r2, [r7, #6]
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	b298      	uxth	r0, r3
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	01db      	lsls	r3, r3, #7
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <SSD1306_DrawPixel+0xbc>)
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	b25a      	sxtb	r2, r3
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b259      	sxtb	r1, r3
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	4603      	mov	r3, r0
 8000d14:	01db      	lsls	r3, r3, #7
 8000d16:	4413      	add	r3, r2
 8000d18:	b2c9      	uxtb	r1, r1
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <SSD1306_DrawPixel+0xbc>)
 8000d1c:	54d1      	strb	r1, [r2, r3]
 8000d1e:	e01d      	b.n	8000d5c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	b298      	uxth	r0, r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	01db      	lsls	r3, r3, #7
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <SSD1306_DrawPixel+0xbc>)
 8000d30:	5cd3      	ldrb	r3, [r2, r3]
 8000d32:	b25a      	sxtb	r2, r3
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	4013      	ands	r3, r2
 8000d48:	b259      	sxtb	r1, r3
 8000d4a:	88fa      	ldrh	r2, [r7, #6]
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	01db      	lsls	r3, r3, #7
 8000d50:	4413      	add	r3, r2
 8000d52:	b2c9      	uxtb	r1, r1
 8000d54:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SSD1306_DrawPixel+0xbc>)
 8000d56:	54d1      	strb	r1, [r2, r3]
 8000d58:	e000      	b.n	8000d5c <SSD1306_DrawPixel+0xac>
		return;
 8000d5a:	bf00      	nop
	}
}
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000448 	.word	0x20000448
 8000d6c:	20000248 	.word	0x20000248

08000d70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d80:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SSD1306_GotoXY+0x28>)
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <SSD1306_GotoXY+0x28>)
 8000d88:	88bb      	ldrh	r3, [r7, #4]
 8000d8a:	8053      	strh	r3, [r2, #2]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000448 	.word	0x20000448

08000d9c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
	if (
 8000db8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dba:	dc07      	bgt.n	8000dcc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000dbc:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000dbe:	885b      	ldrh	r3, [r3, #2]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	785b      	ldrb	r3, [r3, #1]
 8000dc6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dc8:	2b1f      	cmp	r3, #31
 8000dca:	dd01      	ble.n	8000dd0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e05e      	b.n	8000e8e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e04b      	b.n	8000e6e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	3b20      	subs	r3, #32
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	7849      	ldrb	r1, [r1, #1]
 8000de2:	fb01 f303 	mul.w	r3, r1, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	440b      	add	r3, r1
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	e030      	b.n	8000e5c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d010      	beq.n	8000e2c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b298      	uxth	r0, r3
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000e18:	885a      	ldrh	r2, [r3, #2]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff ff43 	bl	8000cb0 <SSD1306_DrawPixel>
 8000e2a:	e014      	b.n	8000e56 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000e2e:	881a      	ldrh	r2, [r3, #0]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b298      	uxth	r0, r3
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000e3a:	885a      	ldrh	r2, [r3, #2]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b299      	uxth	r1, r3
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	f7ff ff2d 	bl	8000cb0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d3c8      	bcc.n	8000dfa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	461a      	mov	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d3ad      	bcc.n	8000dd6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <SSD1306_Putc+0xfc>)
 8000e8a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000448 	.word	0x20000448

08000e9c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000eaa:	e012      	b.n	8000ed2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff71 	bl	8000d9c <SSD1306_Putc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d002      	beq.n	8000ecc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	e008      	b.n	8000ede <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1e8      	bne.n	8000eac <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	781b      	ldrb	r3, [r3, #0]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <ssd1306_I2C_Init+0x28>)
 8000ef0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ef2:	e002      	b.n	8000efa <ssd1306_I2C_Init+0x12>
		p--;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f9      	bne.n	8000ef4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	0003d090 	.word	0x0003d090

08000f14 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b0c7      	sub	sp, #284	; 0x11c
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f22:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f26:	600a      	str	r2, [r1, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f2e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f32:	4622      	mov	r2, r4
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f3a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f3e:	4602      	mov	r2, r0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f56:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f5a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f68:	e015      	b.n	8000f96 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f72:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	441a      	add	r2, r3
 8000f7a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f7e:	3301      	adds	r3, #1
 8000f80:	7811      	ldrb	r1, [r2, #0]
 8000f82:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f86:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f8a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f90:	3301      	adds	r3, #1
 8000f92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fa0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000fa4:	8812      	ldrh	r2, [r2, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d8df      	bhi.n	8000f6a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000faa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	200a      	movs	r0, #10
 8000fca:	9000      	str	r0, [sp, #0]
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <ssd1306_I2C_WriteMulti+0xc8>)
 8000fce:	f000 fde1 	bl	8001b94 <HAL_I2C_Master_Transmit>
}
 8000fd2:	bf00      	nop
 8000fd4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	20000044 	.word	0x20000044

08000fe0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ff6:	797b      	ldrb	r3, [r7, #5]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	230a      	movs	r3, #10
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <ssd1306_I2C_Write+0x38>)
 800100a:	f000 fdc3 	bl	8001b94 <HAL_I2C_Master_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000044 	.word	0x20000044

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6613      	str	r3, [r2, #96]	; 0x60
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6593      	str	r3, [r2, #88]	; 0x58
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0a2      	sub	sp, #136	; 0x88
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2260      	movs	r2, #96	; 0x60
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fbf9 	bl	800687c <memset>
  if(hi2c->Instance==I2C1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a20      	ldr	r2, [pc, #128]	; (8001110 <HAL_I2C_MspInit+0xac>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d139      	bne.n	8001108 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001094:	2340      	movs	r3, #64	; 0x40
 8001096:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f8a5 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f7ff fcf0 	bl	8000a90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010dc:	2304      	movs	r3, #4
 80010de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 fb30 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3788      	adds	r7, #136	; 0x88
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0a2      	sub	sp, #136	; 0x88
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2260      	movs	r2, #96	; 0x60
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f005 fb9f 	bl	800687c <memset>
  if(huart->Instance==LPUART1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <HAL_UART_MspInit+0xac>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d138      	bne.n	80011ba <HAL_UART_MspInit+0xa2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001148:	2320      	movs	r3, #32
 800114a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4618      	mov	r0, r3
 8001156:	f002 f84b 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001160:	f7ff fc96 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0xb0>)
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0xb0>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0xb0>)
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0xb0>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <HAL_UART_MspInit+0xb0>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_UART_MspInit+0xb0>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001194:	230c      	movs	r3, #12
 8001196:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011a6:	2308      	movs	r3, #8
 80011a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f000 facb 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3788      	adds	r7, #136	; 0x88
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40008000 	.word	0x40008000
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	; 0x38
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a46      	ldr	r2, [pc, #280]	; (8001304 <HAL_SPI_MspInit+0x138>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d129      	bne.n	8001242 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	4a45      	ldr	r2, [pc, #276]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80011f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f8:	6613      	str	r3, [r2, #96]	; 0x60
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	623b      	str	r3, [r7, #32]
 8001204:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a3f      	ldr	r2, [pc, #252]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800121e:	23e0      	movs	r3, #224	; 0xe0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122e:	2305      	movs	r3, #5
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f000 fa88 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001240:	e05b      	b.n	80012fa <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_SPI_MspInit+0x140>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d129      	bne.n	80012a0 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001256:	6593      	str	r3, [r2, #88]	; 0x58
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800127c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	2305      	movs	r3, #5
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <HAL_SPI_MspInit+0x144>)
 800129a:	f000 fa59 	bl	8001750 <HAL_GPIO_Init>
}
 800129e:	e02c      	b.n	80012fa <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI3)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_SPI_MspInit+0x148>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d127      	bne.n	80012fa <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80012b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_SPI_MspInit+0x13c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012da:	2338      	movs	r3, #56	; 0x38
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ea:	2306      	movs	r3, #6
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <HAL_SPI_MspInit+0x144>)
 80012f6:	f000 fa2b 	bl	8001750 <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40013000 	.word	0x40013000
 8001308:	40021000 	.word	0x40021000
 800130c:	40003800 	.word	0x40003800
 8001310:	48000400 	.word	0x48000400
 8001314:	40003c00 	.word	0x40003c00

08001318 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <SDTimer_Handler+0x40>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <SDTimer_Handler+0x1c>
    Timer1--;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <SDTimer_Handler+0x40>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	3b01      	subs	r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SDTimer_Handler+0x40>)
 8001332:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <SDTimer_Handler+0x44>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <SDTimer_Handler+0x34>
    Timer2--;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <SDTimer_Handler+0x44>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <SDTimer_Handler+0x44>)
 800134a:	801a      	strh	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000450 	.word	0x20000450
 800135c:	20000452 	.word	0x20000452

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <SysTick_Handler+0x30>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <SysTick_Handler+0x30>)
 80013b8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <SysTick_Handler+0x30>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d904      	bls.n	80013ce <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Handler+0x30>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80013ca:	f7ff ffa5 	bl	8001318 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 f895 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000044e 	.word	0x2000044e

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f005 fa01 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff f84d 	bl	80004d0 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001444:	08007798 	.word	0x08007798
  ldr r2, =_sbss
 8001448:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800144c:	20000494 	.word	0x20000494

08001450 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_IRQHandler>

08001452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f943 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	200f      	movs	r0, #15
 8001464:	f000 f80e 	bl	8001484 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fdd2 	bl	800101c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_InitTick+0x70>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f941 	bl	8001736 <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d809      	bhi.n	80014d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f919 	bl	80016fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_InitTick+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e004      	b.n	80014e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e001      	b.n	80014e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000008 	.word	0x20000008
 80014f8:	2000000c 	.word	0x2000000c

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000010 	.word	0x20000010
 8001520:	20000454 	.word	0x20000454

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000454 	.word	0x20000454

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000010 	.word	0x20000010

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff47 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5c 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb0 	bl	80016a4 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	e154      	b.n	8001a0a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2101      	movs	r1, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8146 	beq.w	8001a04 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b01      	cmp	r3, #1
 8001782:	d005      	beq.n	8001790 <HAL_GPIO_Init+0x40>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d130      	bne.n	80017f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c6:	2201      	movs	r2, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	f003 0201 	and.w	r2, r3, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d017      	beq.n	800182e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d123      	bne.n	8001882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	6939      	ldr	r1, [r7, #16]
 800187e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0203 	and.w	r2, r3, #3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80a0 	beq.w	8001a04 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c4:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <HAL_GPIO_Init+0x2d8>)
 80018c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c8:	4a57      	ldr	r2, [pc, #348]	; (8001a28 <HAL_GPIO_Init+0x2d8>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6613      	str	r3, [r2, #96]	; 0x60
 80018d0:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <HAL_GPIO_Init+0x2d8>)
 80018d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018dc:	4a53      	ldr	r2, [pc, #332]	; (8001a2c <HAL_GPIO_Init+0x2dc>)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001906:	d019      	beq.n	800193c <HAL_GPIO_Init+0x1ec>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_GPIO_Init+0x2e0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <HAL_GPIO_Init+0x1e8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2e4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1e4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <HAL_GPIO_Init+0x2e8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1e0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <HAL_GPIO_Init+0x2ec>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1dc>
 8001928:	2304      	movs	r3, #4
 800192a:	e008      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 800192c:	2307      	movs	r3, #7
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001930:	2303      	movs	r3, #3
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 800193c:	2300      	movs	r3, #0
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194e:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_GPIO_Init+0x2dc>)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800195c:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001980:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_GPIO_Init+0x2f0>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f47f aea3 	bne.w	8001760 <HAL_GPIO_Init+0x10>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800
 8001a38:	48000c00 	.word	0x48000c00
 8001a3c:	48001000 	.word	0x48001000
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e081      	b.n	8001b8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fae2 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e006      	b.n	8001afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d104      	bne.n	8001b0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69d9      	ldr	r1, [r3, #28]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	817b      	strh	r3, [r7, #10]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	f040 80da 	bne.w	8001d6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x30>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0d3      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1d8>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bcc:	f7ff fcaa 	bl	8001524 <HAL_GetTick>
 8001bd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2319      	movs	r3, #25
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f9f7 	bl	8001fd2 <I2C_WaitOnFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0be      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2221      	movs	r2, #33	; 0x21
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	893a      	ldrh	r2, [r7, #8]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	d90e      	bls.n	8001c3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	22ff      	movs	r2, #255	; 0xff
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fb74 	bl	8002324 <I2C_TransferConfig>
 8001c3c:	e06c      	b.n	8001d18 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	8979      	ldrh	r1, [r7, #10]
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fb63 	bl	8002324 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c5e:	e05b      	b.n	8001d18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	6a39      	ldr	r1, [r7, #32]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f9f4 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e07b      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d034      	beq.n	8001d18 <HAL_I2C_Master_Transmit+0x184>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d130      	bne.n	8001d18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f986 	bl	8001fd2 <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04d      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d90e      	bls.n	8001cf8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	8979      	ldrh	r1, [r7, #10]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fb17 	bl	8002324 <I2C_TransferConfig>
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fb06 	bl	8002324 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d19e      	bne.n	8001c60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f9d3 	bl	80020d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e01a      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	80002000 	.word	0x80002000
 8001d78:	fe00e800 	.word	0xfe00e800

08001d7c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	f040 80f1 	bne.w	8001f80 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	e0e7      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2C_IsDeviceReady+0x44>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0e0      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_I2C_IsDeviceReady+0x72>
 8001dde:	897b      	ldrh	r3, [r7, #10]
 8001de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dec:	e004      	b.n	8001df8 <HAL_I2C_IsDeviceReady+0x7c>
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fb91 	bl	8001524 <HAL_GetTick>
 8001e02:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e30:	e034      	b.n	8001e9c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d01a      	beq.n	8001e70 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e3a:	f7ff fb73 	bl	8001524 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d302      	bcc.n	8001e50 <HAL_I2C_IsDeviceReady+0xd4>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10f      	bne.n	8001e70 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e088      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e9c:	7ffb      	ldrb	r3, [r7, #31]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_I2C_IsDeviceReady+0x12c>
 8001ea2:	7fbb      	ldrb	r3, [r7, #30]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0c4      	beq.n	8001e32 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d01a      	beq.n	8001eec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2120      	movs	r1, #32
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f886 	bl	8001fd2 <I2C_WaitOnFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e058      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e04a      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f86b 	bl	8001fd2 <I2C_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e03d      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2220      	movs	r2, #32
 8001f14:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d118      	bne.n	8001f50 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	2120      	movs	r1, #32
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f84a 	bl	8001fd2 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e01c      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	f63f af3b 	bhi.w	8001dd6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001f80:	2302      	movs	r3, #2
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d103      	bne.n	8001fa8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d007      	beq.n	8001fc6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	619a      	str	r2, [r3, #24]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe2:	e022      	b.n	800202a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fea:	d01e      	beq.n	800202a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fec:	f7ff fa9a 	bl	8001524 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d302      	bcc.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d113      	bne.n	800202a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4013      	ands	r3, r2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	429a      	cmp	r2, r3
 8002046:	d0cd      	beq.n	8001fe4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205e:	e02c      	b.n	80020ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f871 	bl	800214c <I2C_IsErrorOccurred>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e02a      	b.n	80020ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d01e      	beq.n	80020ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207c:	f7ff fa52 	bl	8001524 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	d302      	bcc.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d113      	bne.n	80020ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d1cb      	bne.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020de:	e028      	b.n	8002132 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f831 	bl	800214c <I2C_IsErrorOccurred>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e026      	b.n	8002142 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7ff fa16 	bl	8001524 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e007      	b.n	8002142 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b20      	cmp	r3, #32
 800213e:	d1cf      	bne.n	80020e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d075      	beq.n	8002264 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002180:	e056      	b.n	8002230 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d052      	beq.n	8002230 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7ff f9cb 	bl	8001524 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_IsErrorOccurred+0x54>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d147      	bne.n	8002230 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c2:	d12e      	bne.n	8002222 <I2C_IsErrorOccurred+0xd6>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ca:	d02a      	beq.n	8002222 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d027      	beq.n	8002222 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021e2:	f7ff f99f 	bl	8001524 <HAL_GetTick>
 80021e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e8:	e01b      	b.n	8002222 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021ea:	f7ff f99b 	bl	8001524 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b19      	cmp	r3, #25
 80021f6:	d914      	bls.n	8002222 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b20      	cmp	r3, #32
 800222e:	d1dc      	bne.n	80021ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b20      	cmp	r3, #32
 800223c:	d003      	beq.n	8002246 <I2C_IsErrorOccurred+0xfa>
 800223e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002242:	2b00      	cmp	r3, #0
 8002244:	d09d      	beq.n	8002182 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002286:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f043 0308 	orr.w	r3, r3, #8
 800229e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01c      	beq.n	8002314 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff fe55 	bl	8001f8a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <I2C_IsErrorOccurred+0x1d4>)
 80022ec:	400b      	ands	r3, r1
 80022ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002318:	4618      	mov	r0, r3
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	4613      	mov	r3, r2
 8002334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800233c:	7a7b      	ldrb	r3, [r7, #9]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002344:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	4313      	orrs	r3, r2
 800234e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002352:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	0d5b      	lsrs	r3, r3, #21
 800235e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <I2C_TransferConfig+0x60>)
 8002364:	430b      	orrs	r3, r1
 8002366:	43db      	mvns	r3, r3
 8002368:	ea02 0103 	and.w	r1, r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	03ff63ff 	.word	0x03ff63ff

08002388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b20      	cmp	r3, #32
 800239c:	d138      	bne.n	8002410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e032      	b.n	8002412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6819      	ldr	r1, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	d139      	bne.n	80024a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800243e:	2302      	movs	r3, #2
 8002440:	e033      	b.n	80024aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2224      	movs	r2, #36	; 0x24
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002470:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40007000 	.word	0x40007000

080024d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e2:	d130      	bne.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f0:	d038      	beq.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2232      	movs	r2, #50	; 0x32
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	3301      	adds	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002518:	e002      	b.n	8002520 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3b01      	subs	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252c:	d102      	bne.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x60>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f2      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002540:	d110      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e00f      	b.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d007      	beq.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40007000 	.word	0x40007000
 8002578:	20000008 	.word	0x20000008
 800257c:	431bde83 	.word	0x431bde83

08002580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f000 bc02 	b.w	8002d98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002594:	4b96      	ldr	r3, [pc, #600]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259e:	4b94      	ldr	r3, [pc, #592]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80e4 	beq.w	800277e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_RCC_OscConfig+0x4c>
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	f040 808b 	bne.w	80026da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 8087 	bne.w	80026da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025cc:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_OscConfig+0x64>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e3d9      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_RCC_OscConfig+0x7e>
 80025f4:	4b7e      	ldr	r3, [pc, #504]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fc:	e005      	b.n	800260a <HAL_RCC_OscConfig+0x8a>
 80025fe:	4b7c      	ldr	r3, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260a:	4293      	cmp	r3, r2
 800260c:	d223      	bcs.n	8002656 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fd8c 	bl	8003130 <RCC_SetFlashLatencyFromMSIRange>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e3ba      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a72      	ldr	r2, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	496d      	ldr	r1, [pc, #436]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002640:	4b6b      	ldr	r3, [pc, #428]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	4968      	ldr	r1, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
 8002654:	e025      	b.n	80026a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002656:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a65      	ldr	r2, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4960      	ldr	r1, [pc, #384]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002674:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	495b      	ldr	r1, [pc, #364]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fd4c 	bl	8003130 <RCC_SetFlashLatencyFromMSIRange>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e37a      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a2:	f000 fc81 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4950      	ldr	r1, [pc, #320]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a4e      	ldr	r2, [pc, #312]	; (80027f8 <HAL_RCC_OscConfig+0x278>)
 80026c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026c2:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <HAL_RCC_OscConfig+0x27c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fedc 	bl	8001484 <HAL_InitTick>
 80026cc:	4603      	mov	r3, r0
 80026ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d052      	beq.n	800277c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	e35e      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d032      	beq.n	8002748 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026e2:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ee:	f7fe ff19 	bl	8001524 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f6:	f7fe ff15 	bl	8001524 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e347      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4930      	ldr	r1, [pc, #192]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	492b      	ldr	r1, [pc, #172]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
 8002746:	e01a      	b.n	800277e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002754:	f7fe fee6 	bl	8001524 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275c:	f7fe fee2 	bl	8001524 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e314      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1dc>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d073      	beq.n	8002872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d005      	beq.n	800279c <HAL_RCC_OscConfig+0x21c>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d10e      	bne.n	80027b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d10b      	bne.n	80027b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d063      	beq.n	8002870 <HAL_RCC_OscConfig+0x2f0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d15f      	bne.n	8002870 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e2f1      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x24c>
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e025      	b.n	8002818 <HAL_RCC_OscConfig+0x298>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d4:	d114      	bne.n	8002800 <HAL_RCC_OscConfig+0x280>
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a02      	ldr	r2, [pc, #8]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e013      	b.n	8002818 <HAL_RCC_OscConfig+0x298>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	080076c0 	.word	0x080076c0
 80027f8:	20000008 	.word	0x20000008
 80027fc:	2000000c 	.word	0x2000000c
 8002800:	4ba0      	ldr	r3, [pc, #640]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a9f      	ldr	r2, [pc, #636]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b9d      	ldr	r3, [pc, #628]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a9c      	ldr	r2, [pc, #624]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fe80 	bl	8001524 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fe7c 	bl	8001524 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e2ae      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283a:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x2a8>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fe6c 	bl	8001524 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe fe68 	bl	8001524 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e29a      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x2d0>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d060      	beq.n	8002940 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x310>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d119      	bne.n	80028be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d116      	bne.n	80028be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002890:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_OscConfig+0x328>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e277      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	4973      	ldr	r1, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028bc:	e040      	b.n	8002940 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d023      	beq.n	800290e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fe27 	bl	8001524 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fe23 	bl	8001524 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e255      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ec:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	495f      	ldr	r1, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e018      	b.n	8002940 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fe03 	bl	8001524 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fdff 	bl	8001524 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e231      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d03c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01c      	beq.n	800298e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fdde 	bl	8001524 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fdda 	bl	8001524 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e20c      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <HAL_RCC_OscConfig+0x3ec>
 800298c:	e01b      	b.n	80029c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002994:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fdc1 	bl	8001524 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fdbd 	bl	8001524 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1ef      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ef      	bne.n	80029a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80a6 	beq.w	8002b20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a00:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_RCC_OscConfig+0x508>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d118      	bne.n	8002a3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_OscConfig+0x508>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_RCC_OscConfig+0x508>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fd84 	bl	8001524 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe fd80 	bl	8001524 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1b2      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_RCC_OscConfig+0x508>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d108      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4d8>
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a56:	e029      	b.n	8002aac <HAL_RCC_OscConfig+0x52c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d115      	bne.n	8002a8c <HAL_RCC_OscConfig+0x50c>
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <HAL_RCC_OscConfig+0x504>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x52c>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	4b9a      	ldr	r3, [pc, #616]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	4a99      	ldr	r2, [pc, #612]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a9c:	4b96      	ldr	r3, [pc, #600]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	4a95      	ldr	r2, [pc, #596]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d016      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fd36 	bl	8001524 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fd32 	bl	8001524 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e162      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ed      	beq.n	8002abc <HAL_RCC_OscConfig+0x53c>
 8002ae0:	e015      	b.n	8002b0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fd1f 	bl	8001524 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe fd1b 	bl	8001524 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e14b      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b00:	4b7d      	ldr	r3, [pc, #500]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ed      	bne.n	8002aea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b14:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	4a77      	ldr	r2, [pc, #476]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d03c      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01c      	beq.n	8002b6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b34:	4b70      	ldr	r3, [pc, #448]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b3a:	4a6f      	ldr	r2, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fcee 	bl	8001524 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4c:	f7fe fcea 	bl	8001524 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e11c      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b5e:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ef      	beq.n	8002b4c <HAL_RCC_OscConfig+0x5cc>
 8002b6c:	e01b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b6e:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b74:	4a60      	ldr	r2, [pc, #384]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fcd1 	bl	8001524 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b86:	f7fe fccd 	bl	8001524 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0ff      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b98:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ef      	bne.n	8002b86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80f3 	beq.w	8002d96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	f040 80c9 	bne.w	8002d4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bba:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d12c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d123      	bne.n	8002c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d11b      	bne.n	8002c28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d113      	bne.n	8002c28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d109      	bne.n	8002c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d06b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d062      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0ac      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c4a:	f7fe fc6b 	bl	8001524 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fc67 	bl	8001524 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e099      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x77c>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c8a:	0212      	lsls	r2, r2, #8
 8002c8c:	4311      	orrs	r1, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c92:	0852      	lsrs	r2, r2, #1
 8002c94:	3a01      	subs	r2, #1
 8002c96:	0552      	lsls	r2, r2, #21
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c9e:	0852      	lsrs	r2, r2, #1
 8002ca0:	3a01      	subs	r2, #1
 8002ca2:	0652      	lsls	r2, r2, #25
 8002ca4:	4311      	orrs	r1, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002caa:	06d2      	lsls	r2, r2, #27
 8002cac:	430a      	orrs	r2, r1
 8002cae:	4912      	ldr	r1, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ccc:	f7fe fc2a 	bl	8001524 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fc26 	bl	8001524 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e058      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <HAL_RCC_OscConfig+0x778>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf2:	e050      	b.n	8002d96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e04f      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d144      	bne.n	8002d96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d24:	f7fe fbfe 	bl	8001524 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fbfa 	bl	8001524 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e02c      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x7ac>
 8002d4a:	e024      	b.n	8002d96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d01f      	beq.n	8002d92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fbe1 	bl	8001524 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fbdd 	bl	8001524 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e00f      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4905      	ldr	r1, [pc, #20]	; (8002da0 <HAL_RCC_OscConfig+0x820>)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x824>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e001      	b.n	8002d96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	feeefffc 	.word	0xfeeefffc

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0e7      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4970      	ldr	r1, [pc, #448]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0cf      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4960      	ldr	r1, [pc, #384]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04c      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0a6      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09a      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e086      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4943      	ldr	r1, [pc, #268]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fb48 	bl	8001524 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fb44 	bl	8001524 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e06e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	492b      	ldr	r1, [pc, #172]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eee:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d210      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4923      	ldr	r1, [pc, #140]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e036      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4918      	ldr	r1, [pc, #96]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4910      	ldr	r1, [pc, #64]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5c:	f000 f824 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	490b      	ldr	r1, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fa7f 	bl	8001484 <HAL_InitTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	080076c0 	.word	0x080076c0
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d121      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d11e      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003004:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d102      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e004      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d101      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800302c:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 800302e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d134      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0xa6>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d003      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0xac>
 800304c:	e005      	b.n	800305a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003050:	617b      	str	r3, [r7, #20]
      break;
 8003052:	e005      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003056:	617b      	str	r3, [r7, #20]
      break;
 8003058:	e002      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	617b      	str	r3, [r7, #20]
      break;
 800305e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	3301      	adds	r3, #1
 800306c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	fb03 f202 	mul.w	r2, r3, r2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0e5b      	lsrs	r3, r3, #25
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	3301      	adds	r3, #1
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	080076d8 	.word	0x080076d8
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000008 	.word	0x20000008

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4904      	ldr	r1, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	080076d0 	.word	0x080076d0

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003108:	f7ff ffda 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_RCC_GetPCLK2Freq+0x28>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	080076d0 	.word	0x080076d0

08003130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003148:	f7ff f9b6 	bl	80024b8 <HAL_PWREx_GetVoltageRange>
 800314c:	6178      	str	r0, [r7, #20]
 800314e:	e014      	b.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315a:	6593      	str	r3, [r2, #88]	; 0x58
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003168:	f7ff f9a6 	bl	80024b8 <HAL_PWREx_GetVoltageRange>
 800316c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003178:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003180:	d10b      	bne.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d919      	bls.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2ba0      	cmp	r3, #160	; 0xa0
 800318c:	d902      	bls.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800318e:	2302      	movs	r3, #2
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	e013      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003194:	2301      	movs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e010      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b80      	cmp	r3, #128	; 0x80
 800319e:	d902      	bls.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031a0:	2303      	movs	r3, #3
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e00a      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d102      	bne.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ac:	2302      	movs	r3, #2
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e004      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b70      	cmp	r3, #112	; 0x70
 80031b6:	d101      	bne.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b8:	2301      	movs	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 0207 	bic.w	r2, r3, #7
 80031c4:	4909      	ldr	r1, [pc, #36]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40022000 	.word	0x40022000

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003208:	2b00      	cmp	r3, #0
 800320a:	d031      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003214:	d01a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003216:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800321a:	d814      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003224:	d10f      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003226:	4b5d      	ldr	r3, [pc, #372]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a5c      	ldr	r2, [pc, #368]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003232:	e00c      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fa22 	bl	8003684 <RCCEx_PLLSAI1_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003244:	e003      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	74fb      	strb	r3, [r7, #19]
      break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800324c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003254:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	494e      	ldr	r1, [pc, #312]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 809e 	beq.w	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003282:	4b46      	ldr	r3, [pc, #280]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	4b40      	ldr	r3, [pc, #256]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	4a3f      	ldr	r2, [pc, #252]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800329e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6593      	str	r3, [r2, #88]	; 0x58
 80032a4:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b0:	2301      	movs	r3, #1
 80032b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b4:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a39      	ldr	r2, [pc, #228]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032c0:	f7fe f930 	bl	8001524 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c6:	e009      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fe f92c 	bl	8001524 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d902      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	74fb      	strb	r3, [r7, #19]
        break;
 80032da:	e005      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ef      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d15a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01e      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	429a      	cmp	r2, r3
 8003308:	d019      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003316:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003336:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d016      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe f8ec 	bl	8001524 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334e:	e00b      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe f8e8 	bl	8001524 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d902      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	74fb      	strb	r3, [r7, #19]
            break;
 8003366:	e006      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ec      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003392:	e009      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	74bb      	strb	r3, [r7, #18]
 8003398:	e006      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a8:	7c7b      	ldrb	r3, [r7, #17]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	4a8c      	ldr	r2, [pc, #560]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033c6:	4b87      	ldr	r3, [pc, #540]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f023 0203 	bic.w	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4983      	ldr	r1, [pc, #524]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033e8:	4b7e      	ldr	r3, [pc, #504]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 020c 	bic.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	497b      	ldr	r1, [pc, #492]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800340a:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	4972      	ldr	r1, [pc, #456]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800342c:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	496a      	ldr	r1, [pc, #424]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344e:	4b65      	ldr	r3, [pc, #404]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	4961      	ldr	r1, [pc, #388]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003470:	4b5c      	ldr	r3, [pc, #368]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4959      	ldr	r1, [pc, #356]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4950      	ldr	r1, [pc, #320]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	4948      	ldr	r1, [pc, #288]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	493f      	ldr	r1, [pc, #252]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d028      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f8:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	4937      	ldr	r1, [pc, #220]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003516:	d106      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003518:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003522:	60d3      	str	r3, [r2, #12]
 8003524:	e011      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800352e:	d10c      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f8a4 	bl	8003684 <RCCEx_PLLSAI1_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d028      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003564:	491f      	ldr	r1, [pc, #124]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003574:	d106      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800357c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003580:	60d3      	str	r3, [r2, #12]
 8003582:	e011      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f875 	bl	8003684 <RCCEx_PLLSAI1_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	4908      	ldr	r1, [pc, #32]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d2:	d109      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a02      	ldr	r2, [pc, #8]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035de:	60d3      	str	r3, [r2, #12]
 80035e0:	e014      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f0:	d10c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2101      	movs	r1, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f843 	bl	8003684 <RCCEx_PLLSAI1_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01c      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	4916      	ldr	r1, [pc, #88]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003636:	d10c      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2102      	movs	r1, #2
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f820 	bl	8003684 <RCCEx_PLLSAI1_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	4904      	ldr	r1, [pc, #16]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003674:	7cbb      	ldrb	r3, [r7, #18]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003692:	4b74      	ldr	r3, [pc, #464]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800369e:	4b71      	ldr	r3, [pc, #452]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d10d      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
       ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036b6:	4b6b      	ldr	r3, [pc, #428]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
       ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d047      	beq.n	800375a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e044      	b.n	800375a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d018      	beq.n	800370a <RCCEx_PLLSAI1_Config+0x86>
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d825      	bhi.n	8003728 <RCCEx_PLLSAI1_Config+0xa4>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d002      	beq.n	80036e6 <RCCEx_PLLSAI1_Config+0x62>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d009      	beq.n	80036f8 <RCCEx_PLLSAI1_Config+0x74>
 80036e4:	e020      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e6:	4b5f      	ldr	r3, [pc, #380]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11d      	bne.n	800372e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e01a      	b.n	800372e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f8:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003708:	e013      	b.n	8003732 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800370a:	4b56      	ldr	r3, [pc, #344]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003716:	4b53      	ldr	r3, [pc, #332]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003726:	e006      	b.n	8003736 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e004      	b.n	8003738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003736:	bf00      	nop
    }

    if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800373e:	4b49      	ldr	r3, [pc, #292]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	430b      	orrs	r3, r1
 8003754:	4943      	ldr	r1, [pc, #268]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d17c      	bne.n	800385a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003760:	4b40      	ldr	r3, [pc, #256]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fd feda 	bl	8001524 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003774:	f7fd fed6 	bl	8001524 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
        break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003788:	4b36      	ldr	r3, [pc, #216]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ef      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d15f      	bne.n	800385a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a0:	4b30      	ldr	r3, [pc, #192]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80037a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	0211      	lsls	r1, r2, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	06d2      	lsls	r2, r2, #27
 80037b8:	430a      	orrs	r2, r1
 80037ba:	492a      	ldr	r1, [pc, #168]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	610b      	str	r3, [r1, #16]
 80037c0:	e027      	b.n	8003812 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d112      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6892      	ldr	r2, [r2, #8]
 80037d8:	0211      	lsls	r1, r2, #8
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6912      	ldr	r2, [r2, #16]
 80037de:	0852      	lsrs	r2, r2, #1
 80037e0:	3a01      	subs	r2, #1
 80037e2:	0552      	lsls	r2, r2, #21
 80037e4:	430a      	orrs	r2, r1
 80037e6:	491f      	ldr	r1, [pc, #124]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	610b      	str	r3, [r1, #16]
 80037ec:	e011      	b.n	8003812 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6892      	ldr	r2, [r2, #8]
 80037fe:	0211      	lsls	r1, r2, #8
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6952      	ldr	r2, [r2, #20]
 8003804:	0852      	lsrs	r2, r2, #1
 8003806:	3a01      	subs	r2, #1
 8003808:	0652      	lsls	r2, r2, #25
 800380a:	430a      	orrs	r2, r1
 800380c:	4915      	ldr	r1, [pc, #84]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800381c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fd fe81 	bl	8001524 <HAL_GetTick>
 8003822:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003824:	e009      	b.n	800383a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003826:	f7fd fe7d 	bl	8001524 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d902      	bls.n	800383a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	73fb      	strb	r3, [r7, #15]
          break;
 8003838:	e005      	b.n	8003846 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ef      	beq.n	8003826 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	4903      	ldr	r1, [pc, #12]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003856:	4313      	orrs	r3, r2
 8003858:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e095      	b.n	80039a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d108      	bne.n	8003894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388a:	d009      	beq.n	80038a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
 8003892:	e005      	b.n	80038a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fc86 	bl	80011cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e0:	d902      	bls.n	80038e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e002      	b.n	80038ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038f6:	d007      	beq.n	8003908 <HAL_SPI_Init+0xa0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003900:	d002      	beq.n	8003908 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	ea42 0103 	orr.w	r1, r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f003 0204 	and.w	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003984:	ea42 0103 	orr.w	r1, r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e040      	b.n	8003a42 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd fba1 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2224      	movs	r2, #36	; 0x24
 80039da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f82d 	bl	8003a4c <UART_SetConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e022      	b.n	8003a42 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa7b 	bl	8003f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fb02 	bl	8004044 <UART_CheckIdleState>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a50:	b08a      	sub	sp, #40	; 0x28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <UART_SetConfig+0x2a8>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a93      	ldr	r2, [pc, #588]	; (8003cf8 <UART_SetConfig+0x2ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a8a      	ldr	r2, [pc, #552]	; (8003cfc <UART_SetConfig+0x2b0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d126      	bne.n	8003b24 <UART_SetConfig+0xd8>
 8003ad6:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <UART_SetConfig+0x2b4>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d81b      	bhi.n	8003b1c <UART_SetConfig+0xd0>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0xa0>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003afd 	.word	0x08003afd
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b15 	.word	0x08003b15
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e0ab      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b04:	2302      	movs	r3, #2
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e0a7      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e0a3      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b14:	2308      	movs	r3, #8
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e09f      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e09b      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <UART_SetConfig+0x2b8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d138      	bne.n	8003ba0 <UART_SetConfig+0x154>
 8003b2e:	4b74      	ldr	r3, [pc, #464]	; (8003d00 <UART_SetConfig+0x2b4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	d82d      	bhi.n	8003b98 <UART_SetConfig+0x14c>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0xf8>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003b99 	.word	0x08003b99
 8003b4c:	08003b99 	.word	0x08003b99
 8003b50:	08003b99 	.word	0x08003b99
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003b99 	.word	0x08003b99
 8003b5c:	08003b99 	.word	0x08003b99
 8003b60:	08003b99 	.word	0x08003b99
 8003b64:	08003b81 	.word	0x08003b81
 8003b68:	08003b99 	.word	0x08003b99
 8003b6c:	08003b99 	.word	0x08003b99
 8003b70:	08003b99 	.word	0x08003b99
 8003b74:	08003b91 	.word	0x08003b91
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e06d      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e069      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e065      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b90:	2308      	movs	r3, #8
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	e061      	b.n	8003c5c <UART_SetConfig+0x210>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9e:	e05d      	b.n	8003c5c <UART_SetConfig+0x210>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <UART_SetConfig+0x2bc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d125      	bne.n	8003bf6 <UART_SetConfig+0x1aa>
 8003baa:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <UART_SetConfig+0x2b4>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d016      	beq.n	8003be6 <UART_SetConfig+0x19a>
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d818      	bhi.n	8003bee <UART_SetConfig+0x1a2>
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d00a      	beq.n	8003bd6 <UART_SetConfig+0x18a>
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d814      	bhi.n	8003bee <UART_SetConfig+0x1a2>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <UART_SetConfig+0x182>
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d008      	beq.n	8003bde <UART_SetConfig+0x192>
 8003bcc:	e00f      	b.n	8003bee <UART_SetConfig+0x1a2>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e042      	b.n	8003c5c <UART_SetConfig+0x210>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bdc:	e03e      	b.n	8003c5c <UART_SetConfig+0x210>
 8003bde:	2304      	movs	r3, #4
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be4:	e03a      	b.n	8003c5c <UART_SetConfig+0x210>
 8003be6:	2308      	movs	r3, #8
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bec:	e036      	b.n	8003c5c <UART_SetConfig+0x210>
 8003bee:	2310      	movs	r3, #16
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf4:	e032      	b.n	8003c5c <UART_SetConfig+0x210>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	; (8003cf8 <UART_SetConfig+0x2ac>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d12a      	bne.n	8003c56 <UART_SetConfig+0x20a>
 8003c00:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <UART_SetConfig+0x2b4>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c0e:	d01a      	beq.n	8003c46 <UART_SetConfig+0x1fa>
 8003c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c14:	d81b      	bhi.n	8003c4e <UART_SetConfig+0x202>
 8003c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c1a:	d00c      	beq.n	8003c36 <UART_SetConfig+0x1ea>
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c20:	d815      	bhi.n	8003c4e <UART_SetConfig+0x202>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <UART_SetConfig+0x1e2>
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d008      	beq.n	8003c3e <UART_SetConfig+0x1f2>
 8003c2c:	e00f      	b.n	8003c4e <UART_SetConfig+0x202>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c34:	e012      	b.n	8003c5c <UART_SetConfig+0x210>
 8003c36:	2302      	movs	r3, #2
 8003c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3c:	e00e      	b.n	8003c5c <UART_SetConfig+0x210>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c44:	e00a      	b.n	8003c5c <UART_SetConfig+0x210>
 8003c46:	2308      	movs	r3, #8
 8003c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4c:	e006      	b.n	8003c5c <UART_SetConfig+0x210>
 8003c4e:	2310      	movs	r3, #16
 8003c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c54:	e002      	b.n	8003c5c <UART_SetConfig+0x210>
 8003c56:	2310      	movs	r3, #16
 8003c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <UART_SetConfig+0x2ac>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f040 808a 	bne.w	8003d7c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d824      	bhi.n	8003cba <UART_SetConfig+0x26e>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x22c>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003cbb 	.word	0x08003cbb
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cbb 	.word	0x08003cbb
 8003c88:	08003cab 	.word	0x08003cab
 8003c8c:	08003cbb 	.word	0x08003cbb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003cbb 	.word	0x08003cbb
 8003c98:	08003cb3 	.word	0x08003cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7ff fa1c 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61f8      	str	r0, [r7, #28]
        break;
 8003ca2:	e010      	b.n	8003cc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <UART_SetConfig+0x2c0>)
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e00d      	b.n	8003cc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003caa:	f7ff f97d 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003cae:	61f8      	str	r0, [r7, #28]
        break;
 8003cb0:	e009      	b.n	8003cc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb6:	61fb      	str	r3, [r7, #28]
        break;
 8003cb8:	e005      	b.n	8003cc6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8109 	beq.w	8003ee0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d305      	bcc.n	8003cea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d912      	bls.n	8003d10 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cf0:	e0f6      	b.n	8003ee0 <UART_SetConfig+0x494>
 8003cf2:	bf00      	nop
 8003cf4:	efff69f3 	.word	0xefff69f3
 8003cf8:	40008000 	.word	0x40008000
 8003cfc:	40013800 	.word	0x40013800
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40004400 	.word	0x40004400
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2200      	movs	r2, #0
 8003d14:	461c      	mov	r4, r3
 8003d16:	4615      	mov	r5, r2
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	022b      	lsls	r3, r5, #8
 8003d22:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d26:	0222      	lsls	r2, r4, #8
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	6849      	ldr	r1, [r1, #4]
 8003d2c:	0849      	lsrs	r1, r1, #1
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4688      	mov	r8, r1
 8003d32:	4681      	mov	r9, r0
 8003d34:	eb12 0a08 	adds.w	sl, r2, r8
 8003d38:	eb43 0b09 	adc.w	fp, r3, r9
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d4a:	4650      	mov	r0, sl
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	f7fc fa3d 	bl	80001cc <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4613      	mov	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d308      	bcc.n	8003d74 <UART_SetConfig+0x328>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d68:	d204      	bcs.n	8003d74 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	e0b5      	b.n	8003ee0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d7a:	e0b1      	b.n	8003ee0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d15d      	bne.n	8003e42 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d827      	bhi.n	8003dde <UART_SetConfig+0x392>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x348>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003ddf 	.word	0x08003ddf
 8003da4:	08003dcf 	.word	0x08003dcf
 8003da8:	08003ddf 	.word	0x08003ddf
 8003dac:	08003ddf 	.word	0x08003ddf
 8003db0:	08003ddf 	.word	0x08003ddf
 8003db4:	08003dd7 	.word	0x08003dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7ff f98e 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	61f8      	str	r0, [r7, #28]
        break;
 8003dbe:	e014      	b.n	8003dea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7ff f9a0 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	61f8      	str	r0, [r7, #28]
        break;
 8003dc6:	e010      	b.n	8003dea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <UART_SetConfig+0x4b0>)
 8003dca:	61fb      	str	r3, [r7, #28]
        break;
 8003dcc:	e00d      	b.n	8003dea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dce:	f7ff f8eb 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003dd2:	61f8      	str	r0, [r7, #28]
        break;
 8003dd4:	e009      	b.n	8003dea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	61fb      	str	r3, [r7, #28]
        break;
 8003ddc:	e005      	b.n	8003dea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d077      	beq.n	8003ee0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005a      	lsls	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0f      	cmp	r3, #15
 8003e0a:	d916      	bls.n	8003e3a <UART_SetConfig+0x3ee>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d212      	bcs.n	8003e3a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f023 030f 	bic.w	r3, r3, #15
 8003e1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	8afb      	ldrh	r3, [r7, #22]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	8afa      	ldrh	r2, [r7, #22]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e052      	b.n	8003ee0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e40:	e04e      	b.n	8003ee0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d827      	bhi.n	8003e9a <UART_SetConfig+0x44e>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x404>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e7d 	.word	0x08003e7d
 8003e58:	08003e85 	.word	0x08003e85
 8003e5c:	08003e9b 	.word	0x08003e9b
 8003e60:	08003e8b 	.word	0x08003e8b
 8003e64:	08003e9b 	.word	0x08003e9b
 8003e68:	08003e9b 	.word	0x08003e9b
 8003e6c:	08003e9b 	.word	0x08003e9b
 8003e70:	08003e93 	.word	0x08003e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7ff f930 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003e78:	61f8      	str	r0, [r7, #28]
        break;
 8003e7a:	e014      	b.n	8003ea6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e7c:	f7ff f942 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003e80:	61f8      	str	r0, [r7, #28]
        break;
 8003e82:	e010      	b.n	8003ea6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e84:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <UART_SetConfig+0x4b0>)
 8003e86:	61fb      	str	r3, [r7, #28]
        break;
 8003e88:	e00d      	b.n	8003ea6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8a:	f7ff f88d 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8003e8e:	61f8      	str	r0, [r7, #28]
        break;
 8003e90:	e009      	b.n	8003ea6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e96:	61fb      	str	r3, [r7, #28]
        break;
 8003e98:	e005      	b.n	8003ea6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ea4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d019      	beq.n	8003ee0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	085a      	lsrs	r2, r3, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d909      	bls.n	8003eda <UART_SetConfig+0x48e>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d205      	bcs.n	8003eda <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e002      	b.n	8003ee0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	; 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	00f42400 	.word	0x00f42400

08003f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01a      	beq.n	8004016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ffe:	d10a      	bne.n	8004016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
  }
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004054:	f7fd fa66 	bl	8001524 <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b08      	cmp	r3, #8
 8004066:	d10e      	bne.n	8004086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f82d 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e023      	b.n	80040ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d10e      	bne.n	80040b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f817 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e00d      	b.n	80040ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b09c      	sub	sp, #112	; 0x70
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	e0a5      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	f000 80a1 	beq.w	8004234 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fd fa17 	bl	8001524 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <UART_WaitOnFlagUntilTimeout+0x32>
 8004102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004104:	2b00      	cmp	r3, #0
 8004106:	d13e      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800411c:	667b      	str	r3, [r7, #100]	; 0x64
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004128:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800412c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e6      	bne.n	8004108 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	663b      	str	r3, [r7, #96]	; 0x60
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800415a:	64ba      	str	r2, [r7, #72]	; 0x48
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e067      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d04f      	beq.n	8004234 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a2:	d147      	bne.n	8004234 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
 80041ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e6      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	613b      	str	r3, [r7, #16]
   return(result);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004200:	623a      	str	r2, [r7, #32]
 8004202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69f9      	ldr	r1, [r7, #28]
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	61bb      	str	r3, [r7, #24]
   return(result);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e010      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	429a      	cmp	r2, r3
 8004250:	f43f af4a 	beq.w	80040e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3770      	adds	r7, #112	; 0x70
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <MX_FATFS_Init+0x18>)
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <MX_FATFS_Init+0x1c>)
 8004268:	f002 fad4 	bl	8006814 <FATFS_LinkDriver>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <MX_FATFS_Init+0x20>)
 8004272:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004274:	bf00      	nop
 8004276:	bd80      	pop	{r7, pc}
 8004278:	2000045c 	.word	0x2000045c
 800427c:	20000014 	.word	0x20000014
 8004280:	20000458 	.word	0x20000458

08004284 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004288:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <USER_initialize+0x24>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <USER_initialize+0x24>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000011 	.word	0x20000011

080042bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <USER_status+0x24>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <USER_status+0x24>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000011 	.word	0x20000011

080042e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80042f4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004312:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	603a      	str	r2, [r7, #0]
 800432a:	71fb      	strb	r3, [r7, #7]
 800432c:	460b      	mov	r3, r1
 800432e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
    return res;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	4a08      	ldr	r2, [pc, #32]	; (8004374 <disk_status+0x30>)
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	79fa      	ldrb	r2, [r7, #7]
 800435c:	4905      	ldr	r1, [pc, #20]	; (8004374 <disk_status+0x30>)
 800435e:	440a      	add	r2, r1
 8004360:	7a12      	ldrb	r2, [r2, #8]
 8004362:	4610      	mov	r0, r2
 8004364:	4798      	blx	r3
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
  return stat;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000488 	.word	0x20000488

08004378 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	4a0d      	ldr	r2, [pc, #52]	; (80043c0 <disk_initialize+0x48>)
 800438a:	5cd3      	ldrb	r3, [r2, r3]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d111      	bne.n	80043b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <disk_initialize+0x48>)
 8004394:	2101      	movs	r1, #1
 8004396:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <disk_initialize+0x48>)
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	79fa      	ldrb	r2, [r7, #7]
 80043a6:	4906      	ldr	r1, [pc, #24]	; (80043c0 <disk_initialize+0x48>)
 80043a8:	440a      	add	r2, r1
 80043aa:	7a12      	ldrb	r2, [r2, #8]
 80043ac:	4610      	mov	r0, r2
 80043ae:	4798      	blx	r3
 80043b0:	4603      	mov	r3, r0
 80043b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000488 	.word	0x20000488

080043c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <disk_read+0x3c>)
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	689c      	ldr	r4, [r3, #8]
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <disk_read+0x3c>)
 80043e4:	4413      	add	r3, r2
 80043e6:	7a18      	ldrb	r0, [r3, #8]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	47a0      	blx	r4
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000488 	.word	0x20000488

08004404 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <disk_write+0x3c>)
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	68dc      	ldr	r4, [r3, #12]
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <disk_write+0x3c>)
 8004424:	4413      	add	r3, r2
 8004426:	7a18      	ldrb	r0, [r3, #8]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	47a0      	blx	r4
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]
  return res;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	bf00      	nop
 8004440:	20000488 	.word	0x20000488

08004444 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	603a      	str	r2, [r7, #0]
 800444e:	71fb      	strb	r3, [r7, #7]
 8004450:	460b      	mov	r3, r1
 8004452:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <disk_ioctl+0x38>)
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	79fa      	ldrb	r2, [r7, #7]
 8004462:	4906      	ldr	r1, [pc, #24]	; (800447c <disk_ioctl+0x38>)
 8004464:	440a      	add	r2, r1
 8004466:	7a10      	ldrb	r0, [r2, #8]
 8004468:	79b9      	ldrb	r1, [r7, #6]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4798      	blx	r3
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]
  return res;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000488 	.word	0x20000488

08004480 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3301      	adds	r3, #1
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004490:	89fb      	ldrh	r3, [r7, #14]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	b21a      	sxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b21b      	sxth	r3, r3
 800449c:	4313      	orrs	r3, r2
 800449e:	b21b      	sxth	r3, r3
 80044a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80044a2:	89fb      	ldrh	r3, [r7, #14]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3303      	adds	r3, #3
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	3202      	adds	r2, #2
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	3201      	adds	r2, #1
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	887a      	ldrh	r2, [r7, #2]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	0a1b      	lsrs	r3, r3, #8
 800456a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	1c53      	adds	r3, r2, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1c59      	adds	r1, r3, #1
 80045a8:	6179      	str	r1, [r7, #20]
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f1      	bne.n	800459e <mem_cpy+0x1a>
	}
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	617a      	str	r2, [r7, #20]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f3      	bne.n	80045d6 <mem_set+0x10>
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	61fa      	str	r2, [r7, #28]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	61ba      	str	r2, [r7, #24]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	1acb      	subs	r3, r1, r3
 8004628:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3b01      	subs	r3, #1
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <mem_cmp+0x40>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0eb      	beq.n	8004614 <mem_cmp+0x18>

	return r;
 800463c:	697b      	ldr	r3, [r7, #20]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004654:	e002      	b.n	800465c <chk_chr+0x12>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3301      	adds	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <chk_chr+0x26>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4293      	cmp	r3, r2
 800466e:	d1f2      	bne.n	8004656 <chk_chr+0xc>
	return *str;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	781b      	ldrb	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e029      	b.n	80046e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004694:	4a27      	ldr	r2, [pc, #156]	; (8004734 <chk_lock+0xb4>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	4413      	add	r3, r2
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01d      	beq.n	80046de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046a2:	4a24      	ldr	r2, [pc, #144]	; (8004734 <chk_lock+0xb4>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4413      	add	r3, r2
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d116      	bne.n	80046e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <chk_lock+0xb4>)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4413      	add	r3, r2
 80046bc:	3304      	adds	r3, #4
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d10c      	bne.n	80046e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80046c8:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <chk_lock+0xb4>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	4413      	add	r3, r2
 80046d0:	3308      	adds	r3, #8
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80046d8:	429a      	cmp	r2, r3
 80046da:	d102      	bne.n	80046e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80046dc:	e007      	b.n	80046ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d9d2      	bls.n	8004694 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d109      	bne.n	8004708 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <chk_lock+0x80>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d101      	bne.n	8004704 <chk_lock+0x84>
 8004700:	2300      	movs	r3, #0
 8004702:	e010      	b.n	8004726 <chk_lock+0xa6>
 8004704:	2312      	movs	r3, #18
 8004706:	e00e      	b.n	8004726 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d108      	bne.n	8004720 <chk_lock+0xa0>
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <chk_lock+0xb4>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	4413      	add	r3, r2
 8004716:	330c      	adds	r3, #12
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471e:	d101      	bne.n	8004724 <chk_lock+0xa4>
 8004720:	2310      	movs	r3, #16
 8004722:	e000      	b.n	8004726 <chk_lock+0xa6>
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000468 	.word	0x20000468

08004738 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	e002      	b.n	800474a <enq_lock+0x12>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3301      	adds	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d806      	bhi.n	800475e <enq_lock+0x26>
 8004750:	4a09      	ldr	r2, [pc, #36]	; (8004778 <enq_lock+0x40>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	4413      	add	r3, r2
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f2      	bne.n	8004744 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000468 	.word	0x20000468

0800477c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e01f      	b.n	80047cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800478c:	4a41      	ldr	r2, [pc, #260]	; (8004894 <inc_lock+0x118>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d113      	bne.n	80047c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800479e:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <inc_lock+0x118>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d109      	bne.n	80047c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80047b2:	4a38      	ldr	r2, [pc, #224]	; (8004894 <inc_lock+0x118>)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	4413      	add	r3, r2
 80047ba:	3308      	adds	r3, #8
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d006      	beq.n	80047d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d9dc      	bls.n	800478c <inc_lock+0x10>
 80047d2:	e000      	b.n	80047d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80047d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d132      	bne.n	8004842 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e002      	b.n	80047e8 <inc_lock+0x6c>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d806      	bhi.n	80047fc <inc_lock+0x80>
 80047ee:	4a29      	ldr	r2, [pc, #164]	; (8004894 <inc_lock+0x118>)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4413      	add	r3, r2
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f2      	bne.n	80047e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d101      	bne.n	8004806 <inc_lock+0x8a>
 8004802:	2300      	movs	r3, #0
 8004804:	e040      	b.n	8004888 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4922      	ldr	r1, [pc, #136]	; (8004894 <inc_lock+0x118>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	440b      	add	r3, r1
 8004812:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	491e      	ldr	r1, [pc, #120]	; (8004894 <inc_lock+0x118>)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	440b      	add	r3, r1
 8004820:	3304      	adds	r3, #4
 8004822:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	491a      	ldr	r1, [pc, #104]	; (8004894 <inc_lock+0x118>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	440b      	add	r3, r1
 8004830:	3308      	adds	r3, #8
 8004832:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004834:	4a17      	ldr	r2, [pc, #92]	; (8004894 <inc_lock+0x118>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	4413      	add	r3, r2
 800483c:	330c      	adds	r3, #12
 800483e:	2200      	movs	r2, #0
 8004840:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <inc_lock+0xe0>
 8004848:	4a12      	ldr	r2, [pc, #72]	; (8004894 <inc_lock+0x118>)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	4413      	add	r3, r2
 8004850:	330c      	adds	r3, #12
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <inc_lock+0xe0>
 8004858:	2300      	movs	r3, #0
 800485a:	e015      	b.n	8004888 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <inc_lock+0xf8>
 8004862:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <inc_lock+0x118>)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	4413      	add	r3, r2
 800486a:	330c      	adds	r3, #12
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	e001      	b.n	8004878 <inc_lock+0xfc>
 8004874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004878:	4906      	ldr	r1, [pc, #24]	; (8004894 <inc_lock+0x118>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	440b      	add	r3, r1
 8004880:	330c      	adds	r3, #12
 8004882:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	20000468 	.word	0x20000468

08004898 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d825      	bhi.n	80048f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <dec_lock+0x74>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	4413      	add	r3, r2
 80048b4:	330c      	adds	r3, #12
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c0:	d101      	bne.n	80048c6 <dec_lock+0x2e>
 80048c2:	2300      	movs	r3, #0
 80048c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <dec_lock+0x3a>
 80048cc:	89fb      	ldrh	r3, [r7, #14]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <dec_lock+0x74>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	330c      	adds	r3, #12
 80048dc:	89fa      	ldrh	r2, [r7, #14]
 80048de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d105      	bne.n	80048f2 <dec_lock+0x5a>
 80048e6:	4a09      	ldr	r2, [pc, #36]	; (800490c <dec_lock+0x74>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	4413      	add	r3, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	737b      	strb	r3, [r7, #13]
 80048f6:	e001      	b.n	80048fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80048f8:	2302      	movs	r3, #2
 80048fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80048fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000468 	.word	0x20000468

08004910 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e010      	b.n	8004940 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800491e:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <clear_lock+0x44>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d105      	bne.n	800493a <clear_lock+0x2a>
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <clear_lock+0x44>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	4413      	add	r3, r2
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d9eb      	bls.n	800491e <clear_lock+0xe>
	}
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	20000468 	.word	0x20000468

08004958 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	78db      	ldrb	r3, [r3, #3]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d034      	beq.n	80049d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7858      	ldrb	r0, [r3, #1]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800497c:	2301      	movs	r3, #1
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	f7ff fd40 	bl	8004404 <disk_write>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <sync_window+0x38>
			res = FR_DISK_ERR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e022      	b.n	80049d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	1ad2      	subs	r2, r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d217      	bcs.n	80049d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	789b      	ldrb	r3, [r3, #2]
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	e010      	b.n	80049d0 <sync_window+0x78>
					wsect += fs->fsize;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	7858      	ldrb	r0, [r3, #1]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80049c2:	2301      	movs	r3, #1
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	f7ff fd1d 	bl	8004404 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d8eb      	bhi.n	80049ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d01b      	beq.n	8004a30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ffad 	bl	8004958 <sync_window>
 80049fe:	4603      	mov	r3, r0
 8004a00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d113      	bne.n	8004a30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7858      	ldrb	r0, [r3, #1]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a12:	2301      	movs	r3, #1
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	f7ff fcd5 	bl	80043c4 <disk_read>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff87 	bl	8004958 <sync_window>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d158      	bne.n	8004b06 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d148      	bne.n	8004aee <sync_fs+0xb2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	791b      	ldrb	r3, [r3, #4]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d144      	bne.n	8004aee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3330      	adds	r3, #48	; 0x30
 8004a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fda9 	bl	80045c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3330      	adds	r3, #48	; 0x30
 8004a78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fd38 	bl	80044f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3330      	adds	r3, #48	; 0x30
 8004a8a:	4921      	ldr	r1, [pc, #132]	; (8004b10 <sync_fs+0xd4>)
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fd4d 	bl	800452c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3330      	adds	r3, #48	; 0x30
 8004a96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a9a:	491e      	ldr	r1, [pc, #120]	; (8004b14 <sync_fs+0xd8>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fd45 	bl	800452c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3330      	adds	r3, #48	; 0x30
 8004aa6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7ff fd3b 	bl	800452c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3330      	adds	r3, #48	; 0x30
 8004aba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f7ff fd31 	bl	800452c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7858      	ldrb	r0, [r3, #1]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f7ff fc8e 	bl	8004404 <disk_write>
			fs->fsi_flag = 0;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	2200      	movs	r2, #0
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fca4 	bl	8004444 <disk_ioctl>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <sync_fs+0xca>
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	41615252 	.word	0x41615252
 8004b14:	61417272 	.word	0x61417272

08004b18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	3b02      	subs	r3, #2
 8004b26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	3b02      	subs	r3, #2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d301      	bcc.n	8004b38 <clust2sect+0x20>
 8004b34:	2300      	movs	r3, #0
 8004b36:	e008      	b.n	8004b4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	895b      	ldrh	r3, [r3, #10]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	fb03 f202 	mul.w	r2, r3, r2
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	4413      	add	r3, r2
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d904      	bls.n	8004b76 <get_fat+0x20>
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004b76:	2301      	movs	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e08f      	b.n	8004c9c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d062      	beq.n	8004c50 <get_fat+0xfa>
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	dc7c      	bgt.n	8004c88 <get_fat+0x132>
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d002      	beq.n	8004b98 <get_fat+0x42>
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d042      	beq.n	8004c1c <get_fat+0xc6>
 8004b96:	e077      	b.n	8004c88 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0a5b      	lsrs	r3, r3, #9
 8004bae:	4413      	add	r3, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6938      	ldr	r0, [r7, #16]
 8004bb4:	f7ff ff14 	bl	80049e0 <move_window>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d167      	bne.n	8004c8e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	60fa      	str	r2, [r7, #12]
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	0a5b      	lsrs	r3, r3, #9
 8004bda:	4413      	add	r3, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6938      	ldr	r0, [r7, #16]
 8004be0:	f7ff fefe 	bl	80049e0 <move_window>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d153      	bne.n	8004c92 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <get_fat+0xbc>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	e002      	b.n	8004c18 <get_fat+0xc2>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c18:	617b      	str	r3, [r7, #20]
			break;
 8004c1a:	e03f      	b.n	8004c9c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	4413      	add	r3, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	6938      	ldr	r0, [r7, #16]
 8004c2a:	f7ff fed9 	bl	80049e0 <move_window>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d130      	bne.n	8004c96 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004c42:	4413      	add	r3, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fc1b 	bl	8004480 <ld_word>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	617b      	str	r3, [r7, #20]
			break;
 8004c4e:	e025      	b.n	8004c9c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	09db      	lsrs	r3, r3, #7
 8004c58:	4413      	add	r3, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6938      	ldr	r0, [r7, #16]
 8004c5e:	f7ff febf 	bl	80049e0 <move_window>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d118      	bne.n	8004c9a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004c76:	4413      	add	r3, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fc19 	bl	80044b0 <ld_dword>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c84:	617b      	str	r3, [r7, #20]
			break;
 8004c86:	e009      	b.n	8004c9c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e006      	b.n	8004c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c9a:	bf00      	nop
		}
	}

	return val;
 8004c9c:	697b      	ldr	r3, [r7, #20]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004ca6:	b590      	push	{r4, r7, lr}
 8004ca8:	b089      	sub	sp, #36	; 0x24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f240 80d2 	bls.w	8004e62 <put_fat+0x1bc>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	f080 80cc 	bcs.w	8004e62 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	f000 8096 	beq.w	8004e00 <put_fat+0x15a>
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	f300 80cd 	bgt.w	8004e74 <put_fat+0x1ce>
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d002      	beq.n	8004ce4 <put_fat+0x3e>
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d06e      	beq.n	8004dc0 <put_fat+0x11a>
 8004ce2:	e0c7      	b.n	8004e74 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	0a5b      	lsrs	r3, r3, #9
 8004cfa:	4413      	add	r3, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fe6e 	bl	80049e0 <move_window>
 8004d04:	4603      	mov	r3, r0
 8004d06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d08:	7ffb      	ldrb	r3, [r7, #31]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 80ab 	bne.w	8004e66 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	1c59      	adds	r1, r3, #1
 8004d1a:	61b9      	str	r1, [r7, #24]
 8004d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d20:	4413      	add	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <put_fat+0xa4>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	b25a      	sxtb	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	b25b      	sxtb	r3, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e001      	b.n	8004d4e <put_fat+0xa8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	0a5b      	lsrs	r3, r3, #9
 8004d60:	4413      	add	r3, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff fe3b 	bl	80049e0 <move_window>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d17a      	bne.n	8004e6a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	4413      	add	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <put_fat+0xf0>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e00e      	b.n	8004db4 <put_fat+0x10e>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	f023 030f 	bic.w	r3, r3, #15
 8004da0:	b25a      	sxtb	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	b25b      	sxtb	r3, r3
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	70da      	strb	r2, [r3, #3]
			break;
 8004dbe:	e059      	b.n	8004e74 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	4413      	add	r3, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff fe07 	bl	80049e0 <move_window>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d148      	bne.n	8004e6e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004dea:	4413      	add	r3, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	b292      	uxth	r2, r2
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fb7f 	bl	80044f6 <st_word>
			fs->wflag = 1;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	70da      	strb	r2, [r3, #3]
			break;
 8004dfe:	e039      	b.n	8004e74 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	4413      	add	r3, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff fde7 	bl	80049e0 <move_window>
 8004e12:	4603      	mov	r3, r0
 8004e14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e16:	7ffb      	ldrb	r3, [r7, #31]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d12a      	bne.n	8004e72 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004e30:	4413      	add	r3, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fb3c 	bl	80044b0 <ld_dword>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e3e:	4323      	orrs	r3, r4
 8004e40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004e50:	4413      	add	r3, r2
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fb69 	bl	800452c <st_dword>
			fs->wflag = 1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	70da      	strb	r2, [r3, #3]
			break;
 8004e60:	e008      	b.n	8004e74 <put_fat+0x1ce>
		}
	}
 8004e62:	bf00      	nop
 8004e64:	e006      	b.n	8004e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e66:	bf00      	nop
 8004e68:	e004      	b.n	8004e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e72:	bf00      	nop
	return res;
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	; 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}

08004e7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b088      	sub	sp, #32
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d904      	bls.n	8004ea4 <remove_chain+0x26>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d301      	bcc.n	8004ea8 <remove_chain+0x2a>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e04b      	b.n	8004f40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	69b8      	ldr	r0, [r7, #24]
 8004eb6:	f7ff fef6 	bl	8004ca6 <put_fat>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <remove_chain+0x4a>
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	e03b      	b.n	8004f40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fe43 	bl	8004b56 <get_fat>
 8004ed0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d031      	beq.n	8004f3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <remove_chain+0x64>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e02e      	b.n	8004f40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d101      	bne.n	8004eee <remove_chain+0x70>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e028      	b.n	8004f40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004eee:	2200      	movs	r2, #0
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	69b8      	ldr	r0, [r7, #24]
 8004ef4:	f7ff fed7 	bl	8004ca6 <put_fat>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <remove_chain+0x88>
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	e01c      	b.n	8004f40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	3b02      	subs	r3, #2
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d20b      	bcs.n	8004f2c <remove_chain+0xae>
			fs->free_clst++;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	791b      	ldrb	r3, [r3, #4]
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3c6      	bcc.n	8004ec8 <remove_chain+0x4a>
 8004f3a:	e000      	b.n	8004f3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004f3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <create_chain+0x2c>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d31b      	bcc.n	8004fac <create_chain+0x64>
 8004f74:	2301      	movs	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e018      	b.n	8004fac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fdea 	bl	8004b56 <get_fat>
 8004f82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d801      	bhi.n	8004f8e <create_chain+0x46>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e070      	b.n	8005070 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d101      	bne.n	8004f9a <create_chain+0x52>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	e06a      	b.n	8005070 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d201      	bcs.n	8004fa8 <create_chain+0x60>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	e063      	b.n	8005070 <create_chain+0x128>
		scl = clst;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d307      	bcc.n	8004fd0 <create_chain+0x88>
				ncl = 2;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d901      	bls.n	8004fd0 <create_chain+0x88>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e04f      	b.n	8005070 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fdbf 	bl	8004b56 <get_fat>
 8004fd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <create_chain+0xa6>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d101      	bne.n	8004ff2 <create_chain+0xaa>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	e03e      	b.n	8005070 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d1da      	bne.n	8004fb0 <create_chain+0x68>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e038      	b.n	8005070 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ffe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6938      	ldr	r0, [r7, #16]
 8005008:	f7ff fe4d 	bl	8004ca6 <put_fat>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <create_chain+0xe2>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d006      	beq.n	800502a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6938      	ldr	r0, [r7, #16]
 8005022:	f7ff fe40 	bl	8004ca6 <put_fat>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <create_chain+0x116>
		fs->last_clst = ncl;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	3b02      	subs	r3, #2
 8005040:	429a      	cmp	r2, r3
 8005042:	d804      	bhi.n	800504e <create_chain+0x106>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	791b      	ldrb	r3, [r3, #4]
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	711a      	strb	r2, [r3, #4]
 800505c:	e007      	b.n	800506e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d102      	bne.n	800506a <create_chain+0x122>
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	e000      	b.n	800506c <create_chain+0x124>
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800506e:	69fb      	ldr	r3, [r7, #28]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	3304      	adds	r3, #4
 800508e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	0a5b      	lsrs	r3, r3, #9
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	8952      	ldrh	r2, [r2, #10]
 8005098:	fbb3 f3f2 	udiv	r3, r3, r2
 800509c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1d1a      	adds	r2, r3, #4
 80050a2:	613a      	str	r2, [r7, #16]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <clmt_clust+0x3a>
 80050ae:	2300      	movs	r3, #0
 80050b0:	e010      	b.n	80050d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d307      	bcc.n	80050ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3304      	adds	r3, #4
 80050c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050c8:	e7e9      	b.n	800509e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80050ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f6:	d204      	bcs.n	8005102 <dir_sdi+0x22>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005102:	2302      	movs	r3, #2
 8005104:	e063      	b.n	80051ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <dir_sdi+0x46>
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d902      	bls.n	8005126 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10c      	bne.n	8005146 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	8912      	ldrh	r2, [r2, #8]
 8005134:	4293      	cmp	r3, r2
 8005136:	d301      	bcc.n	800513c <dir_sdi+0x5c>
 8005138:	2302      	movs	r3, #2
 800513a:	e048      	b.n	80051ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	61da      	str	r2, [r3, #28]
 8005144:	e029      	b.n	800519a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	895b      	ldrh	r3, [r3, #10]
 800514a:	025b      	lsls	r3, r3, #9
 800514c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800514e:	e019      	b.n	8005184 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6979      	ldr	r1, [r7, #20]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fcfe 	bl	8004b56 <get_fat>
 800515a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d101      	bne.n	8005168 <dir_sdi+0x88>
 8005164:	2301      	movs	r3, #1
 8005166:	e032      	b.n	80051ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d904      	bls.n	8005178 <dir_sdi+0x98>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	429a      	cmp	r2, r3
 8005176:	d301      	bcc.n	800517c <dir_sdi+0x9c>
 8005178:	2302      	movs	r3, #2
 800517a:	e028      	b.n	80051ce <dir_sdi+0xee>
			ofs -= csz;
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d2e1      	bcs.n	8005150 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800518c:	6979      	ldr	r1, [r7, #20]
 800518e:	6938      	ldr	r0, [r7, #16]
 8005190:	f7ff fcc2 	bl	8004b18 <clust2sect>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <dir_sdi+0xcc>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e010      	b.n	80051ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	0a5b      	lsrs	r3, r3, #9
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	441a      	add	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	3320      	adds	r3, #32
 80051ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <dir_next+0x28>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fc:	d301      	bcc.n	8005202 <dir_next+0x2c>
 80051fe:	2304      	movs	r3, #4
 8005200:	e0aa      	b.n	8005358 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 8098 	bne.w	800533e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	8912      	ldrh	r2, [r2, #8]
 8005228:	4293      	cmp	r3, r2
 800522a:	f0c0 8088 	bcc.w	800533e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	61da      	str	r2, [r3, #28]
 8005234:	2304      	movs	r3, #4
 8005236:	e08f      	b.n	8005358 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	0a5b      	lsrs	r3, r3, #9
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	8952      	ldrh	r2, [r2, #10]
 8005240:	3a01      	subs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d17a      	bne.n	800533e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7ff fc80 	bl	8004b56 <get_fat>
 8005256:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d801      	bhi.n	8005262 <dir_next+0x8c>
 800525e:	2302      	movs	r3, #2
 8005260:	e07a      	b.n	8005358 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d101      	bne.n	800526e <dir_next+0x98>
 800526a:	2301      	movs	r3, #1
 800526c:	e074      	b.n	8005358 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	429a      	cmp	r2, r3
 8005276:	d358      	bcc.n	800532a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	61da      	str	r2, [r3, #28]
 8005284:	2304      	movs	r3, #4
 8005286:	e067      	b.n	8005358 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7ff fe59 	bl	8004f48 <create_chain>
 8005296:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <dir_next+0xcc>
 800529e:	2307      	movs	r3, #7
 80052a0:	e05a      	b.n	8005358 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <dir_next+0xd6>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e055      	b.n	8005358 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d101      	bne.n	80052b8 <dir_next+0xe2>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e04f      	b.n	8005358 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fb4d 	bl	8004958 <sync_window>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <dir_next+0xf2>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e047      	b.n	8005358 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3330      	adds	r3, #48	; 0x30
 80052cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f977 	bl	80045c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fc1a 	bl	8004b18 <clust2sect>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052ea:	e012      	b.n	8005312 <dir_next+0x13c>
						fs->wflag = 1;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fb30 	bl	8004958 <sync_window>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <dir_next+0x12c>
 80052fe:	2301      	movs	r3, #1
 8005300:	e02a      	b.n	8005358 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3301      	adds	r3, #1
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	62da      	str	r2, [r3, #44]	; 0x2c
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	895b      	ldrh	r3, [r3, #10]
 8005316:	461a      	mov	r2, r3
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4293      	cmp	r3, r2
 800531c:	d3e6      	bcc.n	80052ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7ff fbf0 	bl	8004b18 <clust2sect>
 8005338:	4602      	mov	r2, r0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005350:	441a      	add	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005370:	2100      	movs	r1, #0
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff feb4 	bl	80050e0 <dir_sdi>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d12b      	bne.n	80053da <dir_alloc+0x7a>
		n = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4619      	mov	r1, r3
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fb27 	bl	80049e0 <move_window>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11d      	bne.n	80053d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2be5      	cmp	r3, #229	; 0xe5
 80053a4:	d004      	beq.n	80053b0 <dir_alloc+0x50>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d107      	bne.n	80053c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	3301      	adds	r3, #1
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d102      	bne.n	80053c4 <dir_alloc+0x64>
 80053be:	e00c      	b.n	80053da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80053c4:	2101      	movs	r1, #1
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff ff05 	bl	80051d6 <dir_next>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0d7      	beq.n	8005386 <dir_alloc+0x26>
 80053d6:	e000      	b.n	80053da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80053d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d101      	bne.n	80053e4 <dir_alloc+0x84>
 80053e0:	2307      	movs	r3, #7
 80053e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	331a      	adds	r3, #26
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff f83f 	bl	8004480 <ld_word>
 8005402:	4603      	mov	r3, r0
 8005404:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d109      	bne.n	8005422 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff f834 	bl	8004480 <ld_word>
 8005418:	4603      	mov	r3, r0
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	331a      	adds	r3, #26
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	b292      	uxth	r2, r2
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff f857 	bl	80044f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d109      	bne.n	8005464 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f103 0214 	add.w	r2, r3, #20
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	b29b      	uxth	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7ff f849 	bl	80044f6 <st_word>
	}
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800547a:	2100      	movs	r1, #0
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fe2f 	bl	80050e0 <dir_sdi>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <dir_find+0x24>
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	e03e      	b.n	800550e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4619      	mov	r1, r3
 8005496:	6938      	ldr	r0, [r7, #16]
 8005498:	f7ff faa2 	bl	80049e0 <move_window>
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d12f      	bne.n	8005506 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <dir_find+0x4e>
 80054b4:	2304      	movs	r3, #4
 80054b6:	75fb      	strb	r3, [r7, #23]
 80054b8:	e028      	b.n	800550c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	330b      	adds	r3, #11
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	330b      	adds	r3, #11
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <dir_find+0x86>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a18      	ldr	r0, [r3, #32]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	220b      	movs	r2, #11
 80054e6:	4619      	mov	r1, r3
 80054e8:	f7ff f888 	bl	80045fc <mem_cmp>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054f2:	2100      	movs	r1, #0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff fe6e 	bl	80051d6 <dir_next>
 80054fa:	4603      	mov	r3, r0
 80054fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0c5      	beq.n	8005490 <dir_find+0x24>
 8005504:	e002      	b.n	800550c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800550a:	bf00      	nop

	return res;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005524:	2101      	movs	r1, #1
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff ff1a 	bl	8005360 <dir_alloc>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11c      	bne.n	8005570 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4619      	mov	r1, r3
 800553c:	68b8      	ldr	r0, [r7, #8]
 800553e:	f7ff fa4f 	bl	80049e0 <move_window>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d111      	bne.n	8005570 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	2220      	movs	r2, #32
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f836 	bl	80045c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a18      	ldr	r0, [r3, #32]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	220b      	movs	r2, #11
 8005564:	4619      	mov	r1, r3
 8005566:	f7ff f80d 	bl	8004584 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2201      	movs	r2, #1
 800556e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005592:	220b      	movs	r2, #11
 8005594:	2120      	movs	r1, #32
 8005596:	68b8      	ldr	r0, [r7, #8]
 8005598:	f7ff f815 	bl	80045c6 <mem_set>
	si = i = 0; ni = 8;
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	2308      	movs	r3, #8
 80055a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	61fa      	str	r2, [r7, #28]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80055b6:	7efb      	ldrb	r3, [r7, #27]
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d94e      	bls.n	800565a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80055bc:	7efb      	ldrb	r3, [r7, #27]
 80055be:	2b2f      	cmp	r3, #47	; 0x2f
 80055c0:	d006      	beq.n	80055d0 <create_name+0x54>
 80055c2:	7efb      	ldrb	r3, [r7, #27]
 80055c4:	2b5c      	cmp	r3, #92	; 0x5c
 80055c6:	d110      	bne.n	80055ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80055c8:	e002      	b.n	80055d0 <create_name+0x54>
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b2f      	cmp	r3, #47	; 0x2f
 80055da:	d0f6      	beq.n	80055ca <create_name+0x4e>
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b5c      	cmp	r3, #92	; 0x5c
 80055e6:	d0f0      	beq.n	80055ca <create_name+0x4e>
			break;
 80055e8:	e038      	b.n	800565c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80055ea:	7efb      	ldrb	r3, [r7, #27]
 80055ec:	2b2e      	cmp	r3, #46	; 0x2e
 80055ee:	d003      	beq.n	80055f8 <create_name+0x7c>
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d30c      	bcc.n	8005612 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b0b      	cmp	r3, #11
 80055fc:	d002      	beq.n	8005604 <create_name+0x88>
 80055fe:	7efb      	ldrb	r3, [r7, #27]
 8005600:	2b2e      	cmp	r3, #46	; 0x2e
 8005602:	d001      	beq.n	8005608 <create_name+0x8c>
 8005604:	2306      	movs	r3, #6
 8005606:	e044      	b.n	8005692 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005608:	2308      	movs	r3, #8
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	230b      	movs	r3, #11
 800560e:	617b      	str	r3, [r7, #20]
			continue;
 8005610:	e022      	b.n	8005658 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005612:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005616:	2b00      	cmp	r3, #0
 8005618:	da04      	bge.n	8005624 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800561a:	7efb      	ldrb	r3, [r7, #27]
 800561c:	3b80      	subs	r3, #128	; 0x80
 800561e:	4a1f      	ldr	r2, [pc, #124]	; (800569c <create_name+0x120>)
 8005620:	5cd3      	ldrb	r3, [r2, r3]
 8005622:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005624:	7efb      	ldrb	r3, [r7, #27]
 8005626:	4619      	mov	r1, r3
 8005628:	481d      	ldr	r0, [pc, #116]	; (80056a0 <create_name+0x124>)
 800562a:	f7ff f80e 	bl	800464a <chk_chr>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <create_name+0xbc>
 8005634:	2306      	movs	r3, #6
 8005636:	e02c      	b.n	8005692 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005638:	7efb      	ldrb	r3, [r7, #27]
 800563a:	2b60      	cmp	r3, #96	; 0x60
 800563c:	d905      	bls.n	800564a <create_name+0xce>
 800563e:	7efb      	ldrb	r3, [r7, #27]
 8005640:	2b7a      	cmp	r3, #122	; 0x7a
 8005642:	d802      	bhi.n	800564a <create_name+0xce>
 8005644:	7efb      	ldrb	r3, [r7, #27]
 8005646:	3b20      	subs	r3, #32
 8005648:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	613a      	str	r2, [r7, #16]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4413      	add	r3, r2
 8005654:	7efa      	ldrb	r2, [r7, #27]
 8005656:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005658:	e7a6      	b.n	80055a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800565a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	441a      	add	r2, r3
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <create_name+0xf4>
 800566c:	2306      	movs	r3, #6
 800566e:	e010      	b.n	8005692 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2be5      	cmp	r3, #229	; 0xe5
 8005676:	d102      	bne.n	800567e <create_name+0x102>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2205      	movs	r2, #5
 800567c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800567e:	7efb      	ldrb	r3, [r7, #27]
 8005680:	2b20      	cmp	r3, #32
 8005682:	d801      	bhi.n	8005688 <create_name+0x10c>
 8005684:	2204      	movs	r2, #4
 8005686:	e000      	b.n	800568a <create_name+0x10e>
 8005688:	2200      	movs	r2, #0
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	330b      	adds	r3, #11
 800568e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005690:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	08007708 	.word	0x08007708
 80056a0:	08006920 	.word	0x08006920

080056a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80056b8:	e002      	b.n	80056c0 <follow_path+0x1c>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b2f      	cmp	r3, #47	; 0x2f
 80056c6:	d0f8      	beq.n	80056ba <follow_path+0x16>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b5c      	cmp	r3, #92	; 0x5c
 80056ce:	d0f4      	beq.n	80056ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b1f      	cmp	r3, #31
 80056dc:	d80a      	bhi.n	80056f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80056e6:	2100      	movs	r1, #0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fcf9 	bl	80050e0 <dir_sdi>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]
 80056f2:	e043      	b.n	800577c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80056f4:	463b      	mov	r3, r7
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ff3f 	bl	800557c <create_name>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d134      	bne.n	8005772 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff feaf 	bl	800546c <dir_find>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005718:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d127      	bne.n	8005776 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d122      	bne.n	8005776 <follow_path+0xd2>
 8005730:	2305      	movs	r3, #5
 8005732:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005734:	e01f      	b.n	8005776 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11c      	bne.n	800577a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	799b      	ldrb	r3, [r3, #6]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800574c:	2305      	movs	r3, #5
 800574e:	75fb      	strb	r3, [r7, #23]
 8005750:	e014      	b.n	800577c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005760:	4413      	add	r3, r2
 8005762:	4619      	mov	r1, r3
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff fe42 	bl	80053ee <ld_clust>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005770:	e7c0      	b.n	80056f4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005772:	bf00      	nop
 8005774:	e002      	b.n	800577c <follow_path+0xd8>
				break;
 8005776:	bf00      	nop
 8005778:	e000      	b.n	800577c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800577a:	bf00      	nop
			}
		}
	}

	return res;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005786:	b480      	push	{r7}
 8005788:	b087      	sub	sp, #28
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295
 8005792:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d031      	beq.n	8005800 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e002      	b.n	80057aa <get_ldnumber+0x24>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3301      	adds	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d903      	bls.n	80057ba <get_ldnumber+0x34>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b3a      	cmp	r3, #58	; 0x3a
 80057b8:	d1f4      	bne.n	80057a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b3a      	cmp	r3, #58	; 0x3a
 80057c0:	d11c      	bne.n	80057fc <get_ldnumber+0x76>
			tp = *path;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	60fa      	str	r2, [r7, #12]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	3b30      	subs	r3, #48	; 0x30
 80057d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b09      	cmp	r3, #9
 80057d8:	d80e      	bhi.n	80057f8 <get_ldnumber+0x72>
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d10a      	bne.n	80057f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <get_ldnumber+0x72>
					vol = (int)i;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3301      	adds	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	e002      	b.n	8005802 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005800:	693b      	ldr	r3, [r7, #16]
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	70da      	strb	r2, [r3, #3]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f04f 32ff 	mov.w	r2, #4294967295
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff f8d8 	bl	80049e0 <move_window>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <check_fs+0x2a>
 8005836:	2304      	movs	r3, #4
 8005838:	e038      	b.n	80058ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3330      	adds	r3, #48	; 0x30
 800583e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fe1c 	bl	8004480 <ld_word>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005850:	429a      	cmp	r2, r3
 8005852:	d001      	beq.n	8005858 <check_fs+0x48>
 8005854:	2303      	movs	r3, #3
 8005856:	e029      	b.n	80058ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800585e:	2be9      	cmp	r3, #233	; 0xe9
 8005860:	d009      	beq.n	8005876 <check_fs+0x66>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005868:	2beb      	cmp	r3, #235	; 0xeb
 800586a:	d11e      	bne.n	80058aa <check_fs+0x9a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005872:	2b90      	cmp	r3, #144	; 0x90
 8005874:	d119      	bne.n	80058aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3330      	adds	r3, #48	; 0x30
 800587a:	3336      	adds	r3, #54	; 0x36
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fe17 	bl	80044b0 <ld_dword>
 8005882:	4603      	mov	r3, r0
 8005884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005888:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <check_fs+0xa4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <check_fs+0x82>
 800588e:	2300      	movs	r3, #0
 8005890:	e00c      	b.n	80058ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3330      	adds	r3, #48	; 0x30
 8005896:	3352      	adds	r3, #82	; 0x52
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fe09 	bl	80044b0 <ld_dword>
 800589e:	4603      	mov	r3, r0
 80058a0:	4a05      	ldr	r2, [pc, #20]	; (80058b8 <check_fs+0xa8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <check_fs+0x9a>
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80058aa:	2302      	movs	r3, #2
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	00544146 	.word	0x00544146
 80058b8:	33544146 	.word	0x33544146

080058bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b096      	sub	sp, #88	; 0x58
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ff58 	bl	8005786 <get_ldnumber>
 80058d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da01      	bge.n	80058e2 <find_volume+0x26>
 80058de:	230b      	movs	r3, #11
 80058e0:	e22d      	b.n	8005d3e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80058e2:	4aa1      	ldr	r2, [pc, #644]	; (8005b68 <find_volume+0x2ac>)
 80058e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <find_volume+0x3a>
 80058f2:	230c      	movs	r3, #12
 80058f4:	e223      	b.n	8005d3e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01a      	beq.n	8005942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fd17 	bl	8004344 <disk_status>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800591c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10c      	bne.n	8005942 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <find_volume+0x82>
 800592e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800593a:	230a      	movs	r3, #10
 800593c:	e1ff      	b.n	8005d3e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800593e:	2300      	movs	r3, #0
 8005940:	e1fd      	b.n	8005d3e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fd0f 	bl	8004378 <disk_initialize>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800596c:	2303      	movs	r3, #3
 800596e:	e1e6      	b.n	8005d3e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <find_volume+0xca>
 8005976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005982:	230a      	movs	r3, #10
 8005984:	e1db      	b.n	8005d3e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800598a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800598c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800598e:	f7ff ff3f 	bl	8005810 <check_fs>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800599c:	2b02      	cmp	r3, #2
 800599e:	d149      	bne.n	8005a34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059a0:	2300      	movs	r3, #0
 80059a2:	643b      	str	r3, [r7, #64]	; 0x40
 80059a4:	e01e      	b.n	80059e4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80059b4:	4413      	add	r3, r2
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	3304      	adds	r3, #4
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d006      	beq.n	80059d0 <find_volume+0x114>
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	3308      	adds	r3, #8
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fd72 	bl	80044b0 <ld_dword>
 80059cc:	4602      	mov	r2, r0
 80059ce:	e000      	b.n	80059d2 <find_volume+0x116>
 80059d0:	2200      	movs	r2, #0
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	3358      	adds	r3, #88	; 0x58
 80059d8:	443b      	add	r3, r7
 80059da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e0:	3301      	adds	r3, #1
 80059e2:	643b      	str	r3, [r7, #64]	; 0x40
 80059e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d9dd      	bls.n	80059a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80059ea:	2300      	movs	r3, #0
 80059ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80059ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <find_volume+0x13e>
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f6:	3b01      	subs	r3, #1
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	3358      	adds	r3, #88	; 0x58
 8005a00:	443b      	add	r3, r7
 8005a02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <find_volume+0x15e>
 8005a0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a12:	f7ff fefd 	bl	8005810 <check_fs>
 8005a16:	4603      	mov	r3, r0
 8005a18:	e000      	b.n	8005a1c <find_volume+0x160>
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d905      	bls.n	8005a34 <find_volume+0x178>
 8005a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d9e2      	bls.n	80059fa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d101      	bne.n	8005a40 <find_volume+0x184>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e17e      	b.n	8005d3e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d901      	bls.n	8005a4c <find_volume+0x190>
 8005a48:	230d      	movs	r3, #13
 8005a4a:	e178      	b.n	8005d3e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	3330      	adds	r3, #48	; 0x30
 8005a50:	330b      	adds	r3, #11
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fd14 	bl	8004480 <ld_word>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5e:	d001      	beq.n	8005a64 <find_volume+0x1a8>
 8005a60:	230d      	movs	r3, #13
 8005a62:	e16c      	b.n	8005d3e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	3330      	adds	r3, #48	; 0x30
 8005a68:	3316      	adds	r3, #22
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fd08 	bl	8004480 <ld_word>
 8005a70:	4603      	mov	r3, r0
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <find_volume+0x1cc>
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	3330      	adds	r3, #48	; 0x30
 8005a7e:	3324      	adds	r3, #36	; 0x24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fd15 	bl	80044b0 <ld_dword>
 8005a86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a8c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	789b      	ldrb	r3, [r3, #2]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d005      	beq.n	8005aac <find_volume+0x1f0>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	789b      	ldrb	r3, [r3, #2]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d001      	beq.n	8005aac <find_volume+0x1f0>
 8005aa8:	230d      	movs	r3, #13
 8005aaa:	e148      	b.n	8005d3e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	789b      	ldrb	r3, [r3, #2]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	895b      	ldrh	r3, [r3, #10]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <find_volume+0x224>
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	895b      	ldrh	r3, [r3, #10]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	895b      	ldrh	r3, [r3, #10]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <find_volume+0x228>
 8005ae0:	230d      	movs	r3, #13
 8005ae2:	e12c      	b.n	8005d3e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	3330      	adds	r3, #48	; 0x30
 8005ae8:	3311      	adds	r3, #17
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fcc8 	bl	8004480 <ld_word>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	891b      	ldrh	r3, [r3, #8]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <find_volume+0x24e>
 8005b06:	230d      	movs	r3, #13
 8005b08:	e119      	b.n	8005d3e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	3330      	adds	r3, #48	; 0x30
 8005b0e:	3313      	adds	r3, #19
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fcb5 	bl	8004480 <ld_word>
 8005b16:	4603      	mov	r3, r0
 8005b18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d106      	bne.n	8005b2e <find_volume+0x272>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	3330      	adds	r3, #48	; 0x30
 8005b24:	3320      	adds	r3, #32
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fcc2 	bl	80044b0 <ld_dword>
 8005b2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	3330      	adds	r3, #48	; 0x30
 8005b32:	330e      	adds	r3, #14
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fca3 	bl	8004480 <ld_word>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <find_volume+0x28c>
 8005b44:	230d      	movs	r3, #13
 8005b46:	e0fa      	b.n	8005d3e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005b48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4c:	4413      	add	r3, r2
 8005b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b50:	8912      	ldrh	r2, [r2, #8]
 8005b52:	0912      	lsrs	r2, r2, #4
 8005b54:	b292      	uxth	r2, r2
 8005b56:	4413      	add	r3, r2
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d204      	bcs.n	8005b6c <find_volume+0x2b0>
 8005b62:	230d      	movs	r3, #13
 8005b64:	e0eb      	b.n	8005d3e <find_volume+0x482>
 8005b66:	bf00      	nop
 8005b68:	20000460 	.word	0x20000460
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b74:	8952      	ldrh	r2, [r2, #10]
 8005b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <find_volume+0x2ca>
 8005b82:	230d      	movs	r3, #13
 8005b84:	e0db      	b.n	8005d3e <find_volume+0x482>
		fmt = FS_FAT32;
 8005b86:	2303      	movs	r3, #3
 8005b88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d802      	bhi.n	8005b9c <find_volume+0x2e0>
 8005b96:	2302      	movs	r3, #2
 8005b98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d802      	bhi.n	8005bac <find_volume+0x2f0>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bb8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005bba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbe:	441a      	add	r2, r3
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	441a      	add	r2, r3
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d11e      	bne.n	8005c14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	3330      	adds	r3, #48	; 0x30
 8005bda:	332a      	adds	r3, #42	; 0x2a
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fc4f 	bl	8004480 <ld_word>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <find_volume+0x330>
 8005be8:	230d      	movs	r3, #13
 8005bea:	e0a8      	b.n	8005d3e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	891b      	ldrh	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <find_volume+0x33c>
 8005bf4:	230d      	movs	r3, #13
 8005bf6:	e0a2      	b.n	8005d3e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	3330      	adds	r3, #48	; 0x30
 8005bfc:	332c      	adds	r3, #44	; 0x2c
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fc56 	bl	80044b0 <ld_dword>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	647b      	str	r3, [r7, #68]	; 0x44
 8005c12:	e01f      	b.n	8005c54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	891b      	ldrh	r3, [r3, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <find_volume+0x364>
 8005c1c:	230d      	movs	r3, #13
 8005c1e:	e08e      	b.n	8005d3e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c26:	441a      	add	r2, r3
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d103      	bne.n	8005c3c <find_volume+0x380>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	e00a      	b.n	8005c52 <find_volume+0x396>
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	695a      	ldr	r2, [r3, #20]
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	085a      	lsrs	r2, r3, #1
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c5e:	0a5b      	lsrs	r3, r3, #9
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d201      	bcs.n	8005c68 <find_volume+0x3ac>
 8005c64:	230d      	movs	r3, #13
 8005c66:	e06a      	b.n	8005d3e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	611a      	str	r2, [r3, #16]
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005c7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d149      	bne.n	8005d1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	3330      	adds	r3, #48	; 0x30
 8005c8a:	3330      	adds	r3, #48	; 0x30
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fbf7 	bl	8004480 <ld_word>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d140      	bne.n	8005d1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ca0:	f7fe fe9e 	bl	80049e0 <move_window>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d137      	bne.n	8005d1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2200      	movs	r2, #0
 8005cae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	3330      	adds	r3, #48	; 0x30
 8005cb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fbe1 	bl	8004480 <ld_word>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d127      	bne.n	8005d1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	3330      	adds	r3, #48	; 0x30
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fbee 	bl	80044b0 <ld_dword>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <find_volume+0x48c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d11e      	bne.n	8005d1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	3330      	adds	r3, #48	; 0x30
 8005ce0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe fbe3 	bl	80044b0 <ld_dword>
 8005cea:	4603      	mov	r3, r0
 8005cec:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <find_volume+0x490>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d113      	bne.n	8005d1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	3330      	adds	r3, #48	; 0x30
 8005cf6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fbd8 	bl	80044b0 <ld_dword>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	3330      	adds	r3, #48	; 0x30
 8005d0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fbce 	bl	80044b0 <ld_dword>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005d20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <find_volume+0x494>)
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	3301      	adds	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <find_volume+0x494>)
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <find_volume+0x494>)
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005d36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d38:	f7fe fdea 	bl	8004910 <clear_lock>
#endif
	return FR_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3758      	adds	r7, #88	; 0x58
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	41615252 	.word	0x41615252
 8005d4c:	61417272 	.word	0x61417272
 8005d50:	20000464 	.word	0x20000464

08005d54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005d5e:	2309      	movs	r3, #9
 8005d60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01c      	beq.n	8005da2 <validate+0x4e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d018      	beq.n	8005da2 <validate+0x4e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <validate+0x4e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	889a      	ldrh	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	88db      	ldrh	r3, [r3, #6]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d10c      	bne.n	8005da2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fad8 	bl	8004344 <disk_status>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <validate+0x4e>
			res = FR_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <validate+0x5a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	e000      	b.n	8005db0 <validate+0x5c>
 8005dae:	2300      	movs	r3, #0
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	6013      	str	r3, [r2, #0]
	return res;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005dd2:	f107 0310 	add.w	r3, r7, #16
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fcd5 	bl	8005786 <get_ldnumber>
 8005ddc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da01      	bge.n	8005de8 <f_mount+0x28>
 8005de4:	230b      	movs	r3, #11
 8005de6:	e02b      	b.n	8005e40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <f_mount+0x88>)
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005df8:	69b8      	ldr	r0, [r7, #24]
 8005dfa:	f7fe fd89 	bl	8004910 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	490d      	ldr	r1, [pc, #52]	; (8005e48 <f_mount+0x88>)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <f_mount+0x66>
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d001      	beq.n	8005e2a <f_mount+0x6a>
 8005e26:	2300      	movs	r3, #0
 8005e28:	e00a      	b.n	8005e40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005e2a:	f107 010c 	add.w	r1, r7, #12
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	2200      	movs	r2, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fd41 	bl	80058bc <find_volume>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000460 	.word	0x20000460

08005e4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b098      	sub	sp, #96	; 0x60
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <f_open+0x18>
 8005e60:	2309      	movs	r3, #9
 8005e62:	e1ad      	b.n	80061c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005e6c:	79fa      	ldrb	r2, [r7, #7]
 8005e6e:	f107 0110 	add.w	r1, r7, #16
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fd20 	bl	80058bc <find_volume>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 8191 	bne.w	80061ae <f_open+0x362>
		dj.obj.fs = fs;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fc03 	bl	80056a4 <follow_path>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d11a      	bne.n	8005ee2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005eac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da03      	bge.n	8005ebe <f_open+0x72>
				res = FR_INVALID_NAME;
 8005eb6:	2306      	movs	r3, #6
 8005eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ebc:	e011      	b.n	8005ee2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fbd2 	bl	8004680 <chk_lock>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	f003 031c 	and.w	r3, r3, #28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d07f      	beq.n	8005fec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d017      	beq.n	8005f24 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d10e      	bne.n	8005f1a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005efc:	f7fe fc1c 	bl	8004738 <enq_lock>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <f_open+0xc8>
 8005f06:	f107 0314 	add.w	r3, r7, #20
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fb03 	bl	8005516 <dir_register>
 8005f10:	4603      	mov	r3, r0
 8005f12:	e000      	b.n	8005f16 <f_open+0xca>
 8005f14:	2312      	movs	r3, #18
 8005f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	f043 0308 	orr.w	r3, r3, #8
 8005f20:	71fb      	strb	r3, [r7, #7]
 8005f22:	e010      	b.n	8005f46 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005f24:	7ebb      	ldrb	r3, [r7, #26]
 8005f26:	f003 0311 	and.w	r3, r3, #17
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <f_open+0xea>
					res = FR_DENIED;
 8005f2e:	2307      	movs	r3, #7
 8005f30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005f34:	e007      	b.n	8005f46 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <f_open+0xfa>
 8005f40:	2308      	movs	r3, #8
 8005f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d168      	bne.n	8006020 <f_open+0x1d4>
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d063      	beq.n	8006020 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005f58:	f7fe f994 	bl	8004284 <get_fattime>
 8005f5c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	330e      	adds	r3, #14
 8005f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fae1 	bl	800452c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	3316      	adds	r3, #22
 8005f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe fadb 	bl	800452c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	330b      	adds	r3, #11
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fa32 	bl	80053ee <ld_clust>
 8005f8a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f90:	2200      	movs	r2, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fa4a 	bl	800542c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	331c      	adds	r3, #28
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fac4 	bl	800452c <st_dword>
					fs->wflag = 1;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d037      	beq.n	8006020 <f_open+0x1d4>
						dw = fs->winsect;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	2200      	movs	r2, #0
 8005fbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe ff5d 	bl	8004e7e <remove_chain>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d126      	bne.n	8006020 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fd02 	bl	80049e0 <move_window>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe6:	3a01      	subs	r2, #1
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e019      	b.n	8006020 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d115      	bne.n	8006020 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005ff4:	7ebb      	ldrb	r3, [r7, #26]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005ffe:	2304      	movs	r3, #4
 8006000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006004:	e00c      	b.n	8006020 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <f_open+0x1d4>
 8006010:	7ebb      	ldrb	r3, [r7, #26]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <f_open+0x1d4>
						res = FR_DENIED;
 800601a:	2307      	movs	r3, #7
 800601c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006024:	2b00      	cmp	r3, #0
 8006026:	d128      	bne.n	800607a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006038:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2301      	movne	r3, #1
 8006054:	2300      	moveq	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	f107 0314 	add.w	r3, r7, #20
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe fb8b 	bl	800477c <inc_lock>
 8006066:	4602      	mov	r2, r0
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <f_open+0x22e>
 8006074:	2302      	movs	r3, #2
 8006076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800607a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 8095 	bne.w	80061ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff f9af 	bl	80053ee <ld_clust>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	331c      	adds	r3, #28
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fa08 	bl	80044b0 <ld_dword>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	88da      	ldrh	r2, [r3, #6]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	79fa      	ldrb	r2, [r7, #7]
 80060be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3330      	adds	r3, #48	; 0x30
 80060d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fa72 	bl	80045c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d060      	beq.n	80061ae <f_open+0x362>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d05c      	beq.n	80061ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	895b      	ldrh	r3, [r3, #10]
 8006100:	025b      	lsls	r3, r3, #9
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	657b      	str	r3, [r7, #84]	; 0x54
 8006110:	e016      	b.n	8006140 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fd1d 	bl	8004b56 <get_fat>
 800611c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800611e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006120:	2b01      	cmp	r3, #1
 8006122:	d802      	bhi.n	800612a <f_open+0x2de>
 8006124:	2302      	movs	r3, #2
 8006126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800612a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <f_open+0x2ec>
 8006132:	2301      	movs	r3, #1
 8006134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800613a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	657b      	str	r3, [r7, #84]	; 0x54
 8006140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006144:	2b00      	cmp	r3, #0
 8006146:	d103      	bne.n	8006150 <f_open+0x304>
 8006148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800614a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614c:	429a      	cmp	r2, r3
 800614e:	d8e0      	bhi.n	8006112 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006154:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800615a:	2b00      	cmp	r3, #0
 800615c:	d127      	bne.n	80061ae <f_open+0x362>
 800615e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006164:	2b00      	cmp	r3, #0
 8006166:	d022      	beq.n	80061ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fcd3 	bl	8004b18 <clust2sect>
 8006172:	6478      	str	r0, [r7, #68]	; 0x44
 8006174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006176:	2b00      	cmp	r3, #0
 8006178:	d103      	bne.n	8006182 <f_open+0x336>
						res = FR_INT_ERR;
 800617a:	2302      	movs	r3, #2
 800617c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006180:	e015      	b.n	80061ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006184:	0a5a      	lsrs	r2, r3, #9
 8006186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006188:	441a      	add	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	7858      	ldrb	r0, [r3, #1]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	2301      	movs	r3, #1
 800619e:	f7fe f911 	bl	80043c4 <disk_read>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <f_open+0x362>
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80061ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <f_open+0x370>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80061bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3760      	adds	r7, #96	; 0x60
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	; 0x38
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f107 0214 	add.w	r2, r7, #20
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fdb3 	bl	8005d54 <validate>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80061f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <f_read+0x44>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	7d5b      	ldrb	r3, [r3, #21]
 8006200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <f_read+0x4a>
 800620c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006210:	e115      	b.n	800643e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	7d1b      	ldrb	r3, [r3, #20]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <f_read+0x5a>
 800621e:	2307      	movs	r3, #7
 8006220:	e10d      	b.n	800643e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	429a      	cmp	r2, r3
 8006234:	f240 80fe 	bls.w	8006434 <f_read+0x26c>
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800623c:	e0fa      	b.n	8006434 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 80c6 	bne.w	80063d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	0a5b      	lsrs	r3, r3, #9
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	8952      	ldrh	r2, [r2, #10]
 8006256:	3a01      	subs	r2, #1
 8006258:	4013      	ands	r3, r2
 800625a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d12f      	bne.n	80062c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
 8006270:	e013      	b.n	800629a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7fe fef9 	bl	8005078 <clmt_clust>
 8006286:	6338      	str	r0, [r7, #48]	; 0x30
 8006288:	e007      	b.n	800629a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fe fc5f 	bl	8004b56 <get_fat>
 8006298:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d804      	bhi.n	80062aa <f_read+0xe2>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2202      	movs	r2, #2
 80062a4:	755a      	strb	r2, [r3, #21]
 80062a6:	2302      	movs	r3, #2
 80062a8:	e0c9      	b.n	800643e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d104      	bne.n	80062bc <f_read+0xf4>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	755a      	strb	r2, [r3, #21]
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0c0      	b.n	800643e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f7fe fc24 	bl	8004b18 <clust2sect>
 80062d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <f_read+0x11a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2202      	movs	r2, #2
 80062dc:	755a      	strb	r2, [r3, #21]
 80062de:	2302      	movs	r3, #2
 80062e0:	e0ad      	b.n	800643e <f_read+0x276>
			sect += csect;
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0a5b      	lsrs	r3, r3, #9
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d039      	beq.n	800636a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	4413      	add	r3, r2
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	8952      	ldrh	r2, [r2, #10]
 8006300:	4293      	cmp	r3, r2
 8006302:	d905      	bls.n	8006310 <f_read+0x148>
					cc = fs->csize - csect;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	895b      	ldrh	r3, [r3, #10]
 8006308:	461a      	mov	r2, r3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	7858      	ldrb	r0, [r3, #1]
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800631a:	f7fe f853 	bl	80043c4 <disk_read>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <f_read+0x166>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	755a      	strb	r2, [r3, #21]
 800632a:	2301      	movs	r3, #1
 800632c:	e087      	b.n	800643e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	7d1b      	ldrb	r3, [r3, #20]
 8006332:	b25b      	sxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	da14      	bge.n	8006362 <f_read+0x19a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006342:	429a      	cmp	r2, r3
 8006344:	d90d      	bls.n	8006362 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	025b      	lsls	r3, r3, #9
 8006350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006352:	18d0      	adds	r0, r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3330      	adds	r3, #48	; 0x30
 8006358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800635c:	4619      	mov	r1, r3
 800635e:	f7fe f911 	bl	8004584 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006368:	e050      	b.n	800640c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	429a      	cmp	r2, r3
 8006372:	d02e      	beq.n	80063d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	7d1b      	ldrb	r3, [r3, #20]
 8006378:	b25b      	sxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	da18      	bge.n	80063b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	7858      	ldrb	r0, [r3, #1]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1a      	ldr	r2, [r3, #32]
 800638c:	2301      	movs	r3, #1
 800638e:	f7fe f839 	bl	8004404 <disk_write>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <f_read+0x1da>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	755a      	strb	r2, [r3, #21]
 800639e:	2301      	movs	r3, #1
 80063a0:	e04d      	b.n	800643e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	7d1b      	ldrb	r3, [r3, #20]
 80063a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	7858      	ldrb	r0, [r3, #1]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063ba:	2301      	movs	r3, #1
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	f7fe f801 	bl	80043c4 <disk_read>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <f_read+0x20a>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	755a      	strb	r2, [r3, #21]
 80063ce:	2301      	movs	r3, #1
 80063d0:	e035      	b.n	800643e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80063e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d901      	bls.n	80063f2 <f_read+0x22a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006400:	4413      	add	r3, r2
 8006402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006404:	4619      	mov	r1, r3
 8006406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006408:	f7fe f8bc 	bl	8004584 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	4413      	add	r3, r2
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	619a      	str	r2, [r3, #24]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	441a      	add	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f47f af01 	bne.w	800623e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3738      	adds	r7, #56	; 0x38
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f107 0208 	add.w	r2, r7, #8
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fc7c 	bl	8005d54 <validate>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d168      	bne.n	8006538 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	7d1b      	ldrb	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d062      	beq.n	8006538 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7d1b      	ldrb	r3, [r3, #20]
 8006476:	b25b      	sxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	da15      	bge.n	80064a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	7858      	ldrb	r0, [r3, #1]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1a      	ldr	r2, [r3, #32]
 800648a:	2301      	movs	r3, #1
 800648c:	f7fd ffba 	bl	8004404 <disk_write>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <f_sync+0x54>
 8006496:	2301      	movs	r3, #1
 8006498:	e04f      	b.n	800653a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7d1b      	ldrb	r3, [r3, #20]
 800649e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80064a8:	f7fd feec 	bl	8004284 <get_fattime>
 80064ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f7fe fa92 	bl	80049e0 <move_window>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d138      	bne.n	8006538 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	330b      	adds	r3, #11
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	330b      	adds	r3, #11
 80064d6:	f042 0220 	orr.w	r2, r2, #32
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	f7fe ff9f 	bl	800542c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f103 021c 	add.w	r2, r3, #28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f7fe f816 	bl	800452c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3316      	adds	r3, #22
 8006504:	6939      	ldr	r1, [r7, #16]
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe f810 	bl	800452c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3312      	adds	r3, #18
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f7fd ffef 	bl	80044f6 <st_word>
					fs->wflag = 1;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2201      	movs	r2, #1
 800651c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fa8b 	bl	8004a3c <sync_fs>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7d1b      	ldrb	r3, [r3, #20]
 800652e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006532:	b2da      	uxtb	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff ff7b 	bl	8006446 <f_sync>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d118      	bne.n	800658c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f107 0208 	add.w	r2, r7, #8
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fbf6 	bl	8005d54 <validate>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10c      	bne.n	800658c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f98e 	bl	8004898 <dec_lock>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b092      	sub	sp, #72	; 0x48
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80065a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	2200      	movs	r2, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f985 	bl	80058bc <find_volume>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80065b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8099 	bne.w	80066f4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80065c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	3b02      	subs	r3, #2
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d804      	bhi.n	80065e0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e089      	b.n	80066f4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d128      	bne.n	800663e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80065ec:	2302      	movs	r3, #2
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe faab 	bl	8004b56 <get_fat>
 8006600:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d103      	bne.n	8006612 <f_getfree+0x7c>
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006610:	e063      	b.n	80066da <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d103      	bne.n	8006620 <f_getfree+0x8a>
 8006618:	2302      	movs	r3, #2
 800661a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800661e:	e05c      	b.n	80066da <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d102      	bne.n	800662c <f_getfree+0x96>
 8006626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006628:	3301      	adds	r3, #1
 800662a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	3301      	adds	r3, #1
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006638:	429a      	cmp	r2, r3
 800663a:	d3db      	bcc.n	80065f4 <f_getfree+0x5e>
 800663c:	e04d      	b.n	80066da <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
 800664e:	2300      	movs	r3, #0
 8006650:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006654:	2b00      	cmp	r3, #0
 8006656:	d113      	bne.n	8006680 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006660:	4619      	mov	r1, r3
 8006662:	f7fe f9bd 	bl	80049e0 <move_window>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800666c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006670:	2b00      	cmp	r3, #0
 8006672:	d131      	bne.n	80066d8 <f_getfree+0x142>
							p = fs->win;
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	3330      	adds	r3, #48	; 0x30
 8006678:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800667a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d10f      	bne.n	80066a8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800668a:	f7fd fef9 	bl	8004480 <ld_word>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <f_getfree+0x104>
 8006694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006696:	3301      	adds	r3, #1
 8006698:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	3302      	adds	r3, #2
 800669e:	633b      	str	r3, [r7, #48]	; 0x30
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	3b02      	subs	r3, #2
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	e010      	b.n	80066ca <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80066a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066aa:	f7fd ff01 	bl	80044b0 <ld_dword>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <f_getfree+0x128>
 80066b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ba:	3301      	adds	r3, #1
 80066bc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	3304      	adds	r3, #4
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	3b04      	subs	r3, #4
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	3b01      	subs	r3, #1
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1bd      	bne.n	8006652 <f_getfree+0xbc>
 80066d6:	e000      	b.n	80066da <f_getfree+0x144>
							if (res != FR_OK) break;
 80066d8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066de:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	791a      	ldrb	r2, [r3, #4]
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80066f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3748      	adds	r7, #72	; 0x48
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006714:	e01b      	b.n	800674e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006716:	f107 0310 	add.w	r3, r7, #16
 800671a:	f107 0114 	add.w	r1, r7, #20
 800671e:	2201      	movs	r2, #1
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff fd51 	bl	80061c8 <f_read>
		if (rc != 1) break;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d116      	bne.n	800675a <f_gets+0x5a>
		c = s[0];
 800672c:	7d3b      	ldrb	r3, [r7, #20]
 800672e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b0d      	cmp	r3, #13
 8006734:	d100      	bne.n	8006738 <f_gets+0x38>
 8006736:	e00a      	b.n	800674e <f_gets+0x4e>
		*p++ = c;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	61ba      	str	r2, [r7, #24]
 800673e:	7dfa      	ldrb	r2, [r7, #23]
 8006740:	701a      	strb	r2, [r3, #0]
		n++;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3301      	adds	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b0a      	cmp	r3, #10
 800674c:	d007      	beq.n	800675e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	dbde      	blt.n	8006716 <f_gets+0x16>
 8006758:	e002      	b.n	8006760 <f_gets+0x60>
		if (rc != 1) break;
 800675a:	bf00      	nop
 800675c:	e000      	b.n	8006760 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800675e:	bf00      	nop
	}
	*p = 0;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <f_gets+0x70>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	e000      	b.n	8006772 <f_gets+0x72>
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006792:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 8006794:	7a5b      	ldrb	r3, [r3, #9]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d131      	bne.n	8006800 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 800679e:	7a5b      	ldrb	r3, [r3, #9]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80067aa:	4b19      	ldr	r3, [pc, #100]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067ac:	7a5b      	ldrb	r3, [r3, #9]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80067ba:	4b15      	ldr	r3, [pc, #84]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067bc:	7a5b      	ldrb	r3, [r3, #9]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067c4:	4413      	add	r3, r2
 80067c6:	79fa      	ldrb	r2, [r7, #7]
 80067c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067cc:	7a5b      	ldrb	r3, [r3, #9]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	b2d1      	uxtb	r1, r2
 80067d4:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <FATFS_LinkDriverEx+0x94>)
 80067d6:	7251      	strb	r1, [r2, #9]
 80067d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80067da:	7dbb      	ldrb	r3, [r7, #22]
 80067dc:	3330      	adds	r3, #48	; 0x30
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3301      	adds	r3, #1
 80067e8:	223a      	movs	r2, #58	; 0x3a
 80067ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3302      	adds	r3, #2
 80067f0:	222f      	movs	r2, #47	; 0x2f
 80067f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3303      	adds	r3, #3
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20000488 	.word	0x20000488

08006814 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800681e:	2200      	movs	r2, #0
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff ffaa 	bl	800677c <FATFS_LinkDriverEx>
 8006828:	4603      	mov	r3, r0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4d0d      	ldr	r5, [pc, #52]	; (800686c <__libc_init_array+0x38>)
 8006838:	4c0d      	ldr	r4, [pc, #52]	; (8006870 <__libc_init_array+0x3c>)
 800683a:	1b64      	subs	r4, r4, r5
 800683c:	10a4      	asrs	r4, r4, #2
 800683e:	2600      	movs	r6, #0
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	4d0b      	ldr	r5, [pc, #44]	; (8006874 <__libc_init_array+0x40>)
 8006846:	4c0c      	ldr	r4, [pc, #48]	; (8006878 <__libc_init_array+0x44>)
 8006848:	f000 f830 	bl	80068ac <_init>
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	2600      	movs	r6, #0
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f855 3b04 	ldr.w	r3, [r5], #4
 800685c:	4798      	blx	r3
 800685e:	3601      	adds	r6, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f855 3b04 	ldr.w	r3, [r5], #4
 8006866:	4798      	blx	r3
 8006868:	3601      	adds	r6, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	08007790 	.word	0x08007790
 8006870:	08007790 	.word	0x08007790
 8006874:	08007790 	.word	0x08007790
 8006878:	08007794 	.word	0x08007794

0800687c <memset>:
 800687c:	4402      	add	r2, r0
 800687e:	4603      	mov	r3, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	f803 1b01 	strb.w	r1, [r3], #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>

0800688c <strcat>:
 800688c:	b510      	push	{r4, lr}
 800688e:	4602      	mov	r2, r0
 8006890:	7814      	ldrb	r4, [r2, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	3201      	adds	r2, #1
 8006896:	2c00      	cmp	r4, #0
 8006898:	d1fa      	bne.n	8006890 <strcat+0x4>
 800689a:	3b01      	subs	r3, #1
 800689c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	d1f9      	bne.n	800689c <strcat+0x10>
 80068a8:	bd10      	pop	{r4, pc}
	...

080068ac <_init>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr

080068b8 <_fini>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr
