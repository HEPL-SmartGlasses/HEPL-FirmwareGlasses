
Glassware-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f2c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001278  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  2000002c  0800936c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800936c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157a6  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e06  00000000  00000000  00035802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00038608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  000398a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b92  00000000  00000000  0003aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001995a  00000000  00000000  0005f592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3491  00000000  00000000  00078eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  0014c3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000002c 	.word	0x2000002c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080080a0 	.word	0x080080a0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000030 	.word	0x20000030
 80001c8:	080080a0 	.word	0x080080a0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <SELECT+0x18>)
 80004da:	f001 fcef 	bl	8001ebc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f001 fa68 	bl	80019b4 <HAL_Delay>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	48000400 	.word	0x48000400

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <DESELECT+0x18>)
 80004f6:	f001 fce1 	bl	8001ebc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 fa5a 	bl	80019b4 <HAL_Delay>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	48000400 	.word	0x48000400

08000508 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000512:	bf00      	nop
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <SPI_TxByte+0x30>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b02      	cmp	r3, #2
 8000520:	d1f8      	bne.n	8000514 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	2201      	movs	r2, #1
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <SPI_TxByte+0x30>)
 800052a:	f003 fc7c 	bl	8003e26 <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000188 	.word	0x20000188

0800053c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000548:	bf00      	nop
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <SPI_TxBuffer+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b02      	cmp	r3, #2
 8000556:	d1f8      	bne.n	800054a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <SPI_TxBuffer+0x30>)
 8000560:	f003 fc61 	bl	8003e26 <HAL_SPI_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000188 	.word	0x20000188

08000570 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057a:	bf00      	nop
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <SPI_RxByte+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	2b02      	cmp	r3, #2
 8000588:	d1f8      	bne.n	800057c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058a:	1dba      	adds	r2, r7, #6
 800058c:	1df9      	adds	r1, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <SPI_RxByte+0x34>)
 8000596:	f003 fdb4 	bl	8004102 <HAL_SPI_TransmitReceive>

	return data;
 800059a:	79bb      	ldrb	r3, [r7, #6]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000188 	.word	0x20000188

080005a8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <SD_ReadyWait+0x30>)
 80005b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005b4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005b6:	f7ff ffdb 	bl	8000570 <SPI_RxByte>
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2bff      	cmp	r3, #255	; 0xff
 80005c2:	d004      	beq.n	80005ce <SD_ReadyWait+0x26>
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <SD_ReadyWait+0x30>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f3      	bne.n	80005b6 <SD_ReadyWait+0xe>

	return res;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000045a 	.word	0x2000045a

080005dc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005e6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005e8:	f7ff ff80 	bl	80004ec <DESELECT>
	for(int i = 0; i < 10; i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	e005      	b.n	80005fe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005f2:	20ff      	movs	r0, #255	; 0xff
 80005f4:	f7ff ff88 	bl	8000508 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b09      	cmp	r3, #9
 8000602:	ddf6      	ble.n	80005f2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000604:	f7ff ff64 	bl	80004d0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800061c:	2395      	movs	r3, #149	; 0x95
 800061e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000620:	463b      	mov	r3, r7
 8000622:	2106      	movs	r1, #6
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff89 	bl	800053c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800062a:	e002      	b.n	8000632 <SD_PowerOn+0x56>
	{
		cnt--;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3b01      	subs	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000632:	f7ff ff9d 	bl	8000570 <SPI_RxByte>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d002      	beq.n	8000642 <SD_PowerOn+0x66>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f4      	bne.n	800062c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000642:	f7ff ff53 	bl	80004ec <DESELECT>
	SPI_TxByte(0XFF);
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	f7ff ff5e 	bl	8000508 <SPI_TxByte>

	PowerFlag = 1;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <SD_PowerOn+0x80>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000049 	.word	0x20000049

08000660 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <SD_PowerOff+0x14>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	20000049 	.word	0x20000049

08000678 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000684:	f7ff ff90 	bl	80005a8 <SD_ReadyWait>
 8000688:	4603      	mov	r3, r0
 800068a:	2bff      	cmp	r3, #255	; 0xff
 800068c:	d001      	beq.n	8000692 <SD_SendCmd+0x1a>
 800068e:	23ff      	movs	r3, #255	; 0xff
 8000690:	e042      	b.n	8000718 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff37 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	0e1b      	lsrs	r3, r3, #24
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff31 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff2b 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff25 	bl	8000508 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff20 	bl	8000508 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b40      	cmp	r3, #64	; 0x40
 80006cc:	d102      	bne.n	80006d4 <SD_SendCmd+0x5c>
 80006ce:	2395      	movs	r3, #149	; 0x95
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e007      	b.n	80006e4 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b48      	cmp	r3, #72	; 0x48
 80006d8:	d102      	bne.n	80006e0 <SD_SendCmd+0x68>
 80006da:	2387      	movs	r3, #135	; 0x87
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e001      	b.n	80006e4 <SD_SendCmd+0x6c>
	else crc = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff0e 	bl	8000508 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b4c      	cmp	r3, #76	; 0x4c
 80006f0:	d101      	bne.n	80006f6 <SD_SendCmd+0x7e>
 80006f2:	f7ff ff3d 	bl	8000570 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80006fa:	f7ff ff39 	bl	8000570 <SPI_RxByte>
 80006fe:	4603      	mov	r3, r0
 8000700:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000702:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000706:	2b00      	cmp	r3, #0
 8000708:	da05      	bge.n	8000716 <SD_SendCmd+0x9e>
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	3b01      	subs	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f1      	bne.n	80006fa <SD_SendCmd+0x82>

	return res;
 8000716:	7b7b      	ldrb	r3, [r7, #13]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SD_disk_initialize+0x14>
 8000730:	2301      	movs	r3, #1
 8000732:	e0d6      	b.n	80008e2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000734:	4b6d      	ldr	r3, [pc, #436]	; (80008ec <SD_disk_initialize+0x1cc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <SD_disk_initialize+0x2a>
 8000742:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <SD_disk_initialize+0x1cc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	e0cb      	b.n	80008e2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800074a:	f7ff ff47 	bl	80005dc <SD_PowerOn>

	/* slave select */
	SELECT();
 800074e:	f7ff febf 	bl	80004d0 <SELECT>

	/* check disk type */
	type = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000756:	2100      	movs	r1, #0
 8000758:	2040      	movs	r0, #64	; 0x40
 800075a:	f7ff ff8d 	bl	8000678 <SD_SendCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	f040 80a6 	bne.w	80008b2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000766:	4b62      	ldr	r3, [pc, #392]	; (80008f0 <SD_disk_initialize+0x1d0>)
 8000768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800076e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000772:	2048      	movs	r0, #72	; 0x48
 8000774:	f7ff ff80 	bl	8000678 <SD_SendCmd>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d158      	bne.n	8000830 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e00c      	b.n	800079e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000784:	7bfc      	ldrb	r4, [r7, #15]
 8000786:	f7ff fef3 	bl	8000570 <SPI_RxByte>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	f104 0310 	add.w	r3, r4, #16
 8000792:	443b      	add	r3, r7
 8000794:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	3301      	adds	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d9ef      	bls.n	8000784 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80007a4:	7abb      	ldrb	r3, [r7, #10]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	f040 8083 	bne.w	80008b2 <SD_disk_initialize+0x192>
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	2baa      	cmp	r3, #170	; 0xaa
 80007b0:	d17f      	bne.n	80008b2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80007b2:	2100      	movs	r1, #0
 80007b4:	2077      	movs	r0, #119	; 0x77
 80007b6:	f7ff ff5f 	bl	8000678 <SD_SendCmd>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d807      	bhi.n	80007d0 <SD_disk_initialize+0xb0>
 80007c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80007c4:	2069      	movs	r0, #105	; 0x69
 80007c6:	f7ff ff57 	bl	8000678 <SD_SendCmd>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80007d0:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <SD_disk_initialize+0x1d0>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1eb      	bne.n	80007b2 <SD_disk_initialize+0x92>
 80007da:	e000      	b.n	80007de <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80007dc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <SD_disk_initialize+0x1d0>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d064      	beq.n	80008b2 <SD_disk_initialize+0x192>
 80007e8:	2100      	movs	r1, #0
 80007ea:	207a      	movs	r0, #122	; 0x7a
 80007ec:	f7ff ff44 	bl	8000678 <SD_SendCmd>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d15d      	bne.n	80008b2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e00c      	b.n	8000816 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80007fc:	7bfc      	ldrb	r4, [r7, #15]
 80007fe:	f7ff feb7 	bl	8000570 <SPI_RxByte>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	f104 0310 	add.w	r3, r4, #16
 800080a:	443b      	add	r3, r7
 800080c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3301      	adds	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d9ef      	bls.n	80007fc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800081c:	7a3b      	ldrb	r3, [r7, #8]
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SD_disk_initialize+0x10a>
 8000826:	230c      	movs	r3, #12
 8000828:	e000      	b.n	800082c <SD_disk_initialize+0x10c>
 800082a:	2304      	movs	r3, #4
 800082c:	73bb      	strb	r3, [r7, #14]
 800082e:	e040      	b.n	80008b2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000830:	2100      	movs	r1, #0
 8000832:	2077      	movs	r0, #119	; 0x77
 8000834:	f7ff ff20 	bl	8000678 <SD_SendCmd>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d808      	bhi.n	8000850 <SD_disk_initialize+0x130>
 800083e:	2100      	movs	r1, #0
 8000840:	2069      	movs	r0, #105	; 0x69
 8000842:	f7ff ff19 	bl	8000678 <SD_SendCmd>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d801      	bhi.n	8000850 <SD_disk_initialize+0x130>
 800084c:	2302      	movs	r3, #2
 800084e:	e000      	b.n	8000852 <SD_disk_initialize+0x132>
 8000850:	2301      	movs	r3, #1
 8000852:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d10e      	bne.n	8000878 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800085a:	2100      	movs	r1, #0
 800085c:	2077      	movs	r0, #119	; 0x77
 800085e:	f7ff ff0b 	bl	8000678 <SD_SendCmd>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d80e      	bhi.n	8000886 <SD_disk_initialize+0x166>
 8000868:	2100      	movs	r1, #0
 800086a:	2069      	movs	r0, #105	; 0x69
 800086c:	f7ff ff04 	bl	8000678 <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d107      	bne.n	8000886 <SD_disk_initialize+0x166>
 8000876:	e00d      	b.n	8000894 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000878:	2100      	movs	r1, #0
 800087a:	2041      	movs	r0, #65	; 0x41
 800087c:	f7ff fefc 	bl	8000678 <SD_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d005      	beq.n	8000892 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <SD_disk_initialize+0x1d0>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	b29b      	uxth	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e1      	bne.n	8000854 <SD_disk_initialize+0x134>
 8000890:	e000      	b.n	8000894 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000892:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <SD_disk_initialize+0x1d0>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	b29b      	uxth	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d007      	beq.n	80008ae <SD_disk_initialize+0x18e>
 800089e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a2:	2050      	movs	r0, #80	; 0x50
 80008a4:	f7ff fee8 	bl	8000678 <SD_SendCmd>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SD_disk_initialize+0x192>
 80008ae:	2300      	movs	r3, #0
 80008b0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <SD_disk_initialize+0x1d4>)
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80008b8:	f7ff fe18 	bl	80004ec <DESELECT>
	SPI_RxByte();
 80008bc:	f7ff fe58 	bl	8000570 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d008      	beq.n	80008d8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <SD_disk_initialize+0x1cc>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SD_disk_initialize+0x1cc>)
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e001      	b.n	80008dc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80008d8:	f7ff fec2 	bl	8000660 <SD_PowerOff>
	}

	return Stat;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <SD_disk_initialize+0x1cc>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000458 	.word	0x20000458
 80008f4:	20000048 	.word	0x20000048

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 ffe2 	bl	80018ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f8e9 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 fa55 	bl	8000db8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800090e:	f000 f92b 	bl	8000b68 <MX_I2C1_Init>
  MX_FATFS_Init();
 8000912:	f004 fbc5 	bl	80050a0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000916:	f000 f995 	bl	8000c44 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 800091a:	f000 f965 	bl	8000be8 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800091e:	f000 fa0d 	bl	8000d3c <MX_SPI3_Init>
  MX_SPI2_Init();
 8000922:	f000 f9cd 	bl	8000cc0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize screen
  enum menuState menu = dir;
 8000926:	2300      	movs	r3, #0
 8000928:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800092c:	f102 0217 	add.w	r2, r2, #23
 8000930:	7013      	strb	r3, [r2, #0]
  SSD1306_Init();
 8000932:	f000 fadf 	bl	8000ef4 <SSD1306_Init>


  DRESULT temp = SD_disk_initialize(0);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fef2 	bl	8000720 <SD_disk_initialize>
 800093c:	4603      	mov	r3, r0
 800093e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000942:	f102 0216 	add.w	r2, r2, #22
 8000946:	7013      	strb	r3, [r2, #0]
  // Initialize SD card
  // some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations
  char* filename = "/map.txt";
 8000948:	4b5c      	ldr	r3, [pc, #368]	; (8000abc <main+0x1c4>)
 800094a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800094e:	f102 0210 	add.w	r2, r2, #16
 8000952:	6013      	str	r3, [r2, #0]
//  uint8_t buf_rx[1] = {0x00};
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
//  HAL_SPI_TransmitReceive(&hspi2, buf_tx, buf_rx, 1, 2);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);

  fres = f_mount(&FatFs, "", 1); // 1 = mount now
 8000954:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000958:	f103 0318 	add.w	r3, r3, #24
 800095c:	3b08      	subs	r3, #8
 800095e:	2201      	movs	r2, #1
 8000960:	4957      	ldr	r1, [pc, #348]	; (8000ac0 <main+0x1c8>)
 8000962:	4618      	mov	r0, r3
 8000964:	f006 fde8 	bl	8007538 <f_mount>
 8000968:	4603      	mov	r3, r0
 800096a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800096e:	f102 020f 	add.w	r2, r2, #15
 8000972:	7013      	strb	r3, [r2, #0]
  fres = f_mount(&FatFs, "", 1); // 1 = mount now
 8000974:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000978:	f103 0318 	add.w	r3, r3, #24
 800097c:	3b08      	subs	r3, #8
 800097e:	2201      	movs	r2, #1
 8000980:	494f      	ldr	r1, [pc, #316]	; (8000ac0 <main+0x1c8>)
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fdd8 	bl	8007538 <f_mount>
 8000988:	4603      	mov	r3, r0
 800098a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800098e:	f102 020f 	add.w	r2, r2, #15
 8000992:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8000994:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000998:	f103 030f 	add.w	r3, r3, #15
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <main+0xc2>
  {
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fc0f 	bl	80011c8 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-Mnt", &Font_11x18, 1); // error mounting
 80009aa:	2201      	movs	r2, #1
 80009ac:	4945      	ldr	r1, [pc, #276]	; (8000ac4 <main+0x1cc>)
 80009ae:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <main+0x1d0>)
 80009b0:	f000 fca0 	bl	80012f4 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80009b4:	f000 fb62 	bl	800107c <SSD1306_UpdateScreen>
      #endif
	  while(1);
 80009b8:	e7fe      	b.n	80009b8 <main+0xc0>
//  }
//  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
//  free_sectors = free_clusters * getFreeFs->csize;
//  #endif

  fres = f_open(&fil, filename, FA_READ);
 80009ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009be:	3b38      	subs	r3, #56	; 0x38
 80009c0:	2201      	movs	r2, #1
 80009c2:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 80009c6:	f101 0110 	add.w	r1, r1, #16
 80009ca:	6809      	ldr	r1, [r1, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 fdf9 	bl	80075c4 <f_open>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80009d8:	f102 020f 	add.w	r2, r2, #15
 80009dc:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK) {
 80009de:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80009e2:	f103 030f 	add.w	r3, r3, #15
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00b      	beq.n	8000a04 <main+0x10c>
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 fbea 	bl	80011c8 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-OpF", &Font_11x18, 1); // error opening file
 80009f4:	2201      	movs	r2, #1
 80009f6:	4933      	ldr	r1, [pc, #204]	; (8000ac4 <main+0x1cc>)
 80009f8:	4834      	ldr	r0, [pc, #208]	; (8000acc <main+0x1d4>)
 80009fa:	f000 fc7b 	bl	80012f4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80009fe:	f000 fb3d 	bl	800107c <SSD1306_UpdateScreen>
 	  #endif
	  while(1);
 8000a02:	e7fe      	b.n	8000a02 <main+0x10a>
  }

  BYTE readBuf[30];
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000a04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000a08:	3a38      	subs	r2, #56	; 0x38
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	3b18      	subs	r3, #24
 8000a10:	211e      	movs	r1, #30
 8000a12:	4618      	mov	r0, r3
 8000a14:	f007 f9a9 	bl	8007d6a <f_gets>
 8000a18:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a1c:	f103 0308 	add.w	r3, r3, #8
 8000a20:	6018      	str	r0, [r3, #0]
  if (rres == 0)
 8000a22:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a26:	f103 0308 	add.w	r3, r3, #8
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10b      	bne.n	8000a48 <main+0x150>
  {
      #ifdef DEBUG
	  SSD1306_GotoXY (0,0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fbc8 	bl	80011c8 <SSD1306_GotoXY>
	  SSD1306_Puts ("ErrSD-RdF", &Font_11x18, 1); // error reading file
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4922      	ldr	r1, [pc, #136]	; (8000ac4 <main+0x1cc>)
 8000a3c:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <main+0x1d8>)
 8000a3e:	f000 fc59 	bl	80012f4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000a42:	f000 fb1b 	bl	800107c <SSD1306_UpdateScreen>
      #endif
	  while(1);
 8000a46:	e7fe      	b.n	8000a46 <main+0x14e>
  }
  f_close(&fil);
 8000a48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a4c:	3b38      	subs	r3, #56	; 0x38
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 f961 	bl	8007d16 <f_close>
  #ifdef DEBUG
  SSD1306_GotoXY (0,0);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 fbb6 	bl	80011c8 <SSD1306_GotoXY>
  SSD1306_Puts(strcat("File: ", filename), &Font_11x18, 1);
 8000a5c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a60:	f103 0310 	add.w	r3, r3, #16
 8000a64:	6819      	ldr	r1, [r3, #0]
 8000a66:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <main+0x1dc>)
 8000a68:	f007 fb0a 	bl	8008080 <strcat>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4914      	ldr	r1, [pc, #80]	; (8000ac4 <main+0x1cc>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fc3e 	bl	80012f4 <SSD1306_Puts>
  SSD1306_GotoXY (11,0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	f000 fba4 	bl	80011c8 <SSD1306_GotoXY>
  SSD1306_Puts(readBuf, &Font_11x18, 1);
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	3b18      	subs	r3, #24
 8000a86:	2201      	movs	r2, #1
 8000a88:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <main+0x1cc>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fc32 	bl	80012f4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000a90:	f000 faf4 	bl	800107c <SSD1306_UpdateScreen>
  HAL_Delay(2000);
 8000a94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a98:	f000 ff8c 	bl	80019b4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_GotoXY (0,21);
 8000a9c:	2115      	movs	r1, #21
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fb92 	bl	80011c8 <SSD1306_GotoXY>
	  SSD1306_Puts ("HEPL WORLD :)", &Font_11x18, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <main+0x1cc>)
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <main+0x1e0>)
 8000aaa:	f000 fc23 	bl	80012f4 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000aae:	f000 fae5 	bl	800107c <SSD1306_UpdateScreen>

	  HAL_Delay (2000);
 8000ab2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab6:	f000 ff7d 	bl	80019b4 <HAL_Delay>
	  SSD1306_GotoXY (0,21);
 8000aba:	e7ef      	b.n	8000a9c <main+0x1a4>
 8000abc:	080080b8 	.word	0x080080b8
 8000ac0:	080080c4 	.word	0x080080c4
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	080080c8 	.word	0x080080c8
 8000acc:	080080d4 	.word	0x080080d4
 8000ad0:	080080e0 	.word	0x080080e0
 8000ad4:	080080ec 	.word	0x080080ec
 8000ad8:	080080f4 	.word	0x080080f4

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b096      	sub	sp, #88	; 0x58
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2244      	movs	r2, #68	; 0x44
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fac0 	bl	8008070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b02:	f001 ff23 	bl	800294c <HAL_PWREx_ControlVoltageScaling>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b0c:	f000 f9ec 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b10:	2310      	movs	r3, #16
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 ff65 	bl	80029f8 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b34:	f000 f9d8 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fb65 	bl	8003220 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b5c:	f000 f9c4 	bl	8000ee8 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3758      	adds	r7, #88	; 0x58
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <MX_I2C1_Init+0x78>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <MX_I2C1_Init+0x7c>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000ba4:	f001 f9a2 	bl	8001eec <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f000 f99b 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000bb6:	f001 fe23 	bl	8002800 <HAL_I2CEx_ConfigAnalogFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 f992 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_I2C1_Init+0x74>)
 8000bc8:	f001 fe65 	bl	8002896 <HAL_I2CEx_ConfigDigitalFilter>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f989 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000004c 	.word	0x2000004c
 8000be0:	40005400 	.word	0x40005400
 8000be4:	0010061a 	.word	0x0010061a

08000be8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000bee:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <MX_LPUART1_UART_Init+0x54>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_LPUART1_UART_Init+0x58>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bfe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_LPUART1_UART_Init+0x50>)
 8000c26:	f003 fde3 	bl	80047f0 <HAL_UART_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c30:	f000 f95a 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000a0 	.word	0x200000a0
 8000c3c:	40008000 	.word	0x40008000
 8000c40:	00033324 	.word	0x00033324

08000c44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <MX_SPI1_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c92:	2207      	movs	r2, #7
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_SPI1_Init+0x74>)
 8000ca4:	f003 f81c 	bl	8003ce0 <HAL_SPI_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 f91b 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000124 	.word	0x20000124
 8000cbc:	40013000 	.word	0x40013000

08000cc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI2_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000cda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cde:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000cf6:	2228      	movs	r2, #40	; 0x28
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_SPI2_Init+0x74>)
 8000d20:	f002 ffde 	bl	8003ce0 <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f8dd 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000188 	.word	0x20000188
 8000d38:	40003800 	.word	0x40003800

08000d3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_SPI3_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d9c:	f002 ffa0 	bl	8003ce0 <HAL_SPI_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f000 f89f 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001ec 	.word	0x200001ec
 8000db4:	40003c00 	.word	0x40003c00

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	4b43      	ldr	r3, [pc, #268]	; (8000edc <MX_GPIO_Init+0x124>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a42      	ldr	r2, [pc, #264]	; (8000edc <MX_GPIO_Init+0x124>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b40      	ldr	r3, [pc, #256]	; (8000edc <MX_GPIO_Init+0x124>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <MX_GPIO_Init+0x124>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <MX_GPIO_Init+0x124>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <MX_GPIO_Init+0x124>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_GPIO_Init+0x124>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <MX_GPIO_Init+0x124>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_GPIO_Init+0x124>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f248 0110 	movw	r1, #32784	; 0x8010
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 f84c 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SD_CS_GPIO_Port, SPI2_SD_CS_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2101      	movs	r1, #1
 8000e28:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <MX_GPIO_Init+0x128>)
 8000e2a:	f001 f847 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7161 	mov.w	r1, #900	; 0x384
 8000e34:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <MX_GPIO_Init+0x128>)
 8000e36:	f001 f841 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000e40:	f001 f83c 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000e44:	f248 0310 	movw	r3, #32784	; 0x8010
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f000 feb2 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SD_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SD_CS_Pin;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_GPIO_Init+0x128>)
 8000e7c:	f000 fea4 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e80:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_GPIO_Init+0x128>)
 8000e9a:	f000 fe95 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e9e:	2340      	movs	r3, #64	; 0x40
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0x128>)
 8000eb2:	f000 fe89 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_GPIO_Init+0x12c>)
 8000ece:	f000 fe7b 	bl	8001bc8 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	48001c00 	.word	0x48001c00

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>
	...

08000ef4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000efa:	f000 fa21 	bl	8001340 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000efe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f02:	2201      	movs	r2, #1
 8000f04:	2178      	movs	r1, #120	; 0x78
 8000f06:	485b      	ldr	r0, [pc, #364]	; (8001074 <SSD1306_Init+0x180>)
 8000f08:	f001 f974 	bl	80021f4 <HAL_I2C_IsDeviceReady>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e0a9      	b.n	800106a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000f16:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f1c:	e002      	b.n	8000f24 <SSD1306_Init+0x30>
		p--;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f9      	bne.n	8000f1e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f2a:	22ae      	movs	r2, #174	; 0xae
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2078      	movs	r0, #120	; 0x78
 8000f30:	f000 fa82 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000f34:	2220      	movs	r2, #32
 8000f36:	2100      	movs	r1, #0
 8000f38:	2078      	movs	r0, #120	; 0x78
 8000f3a:	f000 fa7d 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f3e:	2210      	movs	r2, #16
 8000f40:	2100      	movs	r1, #0
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f000 fa78 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f48:	22b0      	movs	r2, #176	; 0xb0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2078      	movs	r0, #120	; 0x78
 8000f4e:	f000 fa73 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f52:	22c8      	movs	r2, #200	; 0xc8
 8000f54:	2100      	movs	r1, #0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f000 fa6e 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f000 fa69 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f66:	2210      	movs	r2, #16
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f000 fa64 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	2100      	movs	r1, #0
 8000f74:	2078      	movs	r0, #120	; 0x78
 8000f76:	f000 fa5f 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f7a:	2281      	movs	r2, #129	; 0x81
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2078      	movs	r0, #120	; 0x78
 8000f80:	f000 fa5a 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	2100      	movs	r1, #0
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f000 fa55 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f8e:	22a1      	movs	r2, #161	; 0xa1
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f000 fa50 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f98:	22a6      	movs	r2, #166	; 0xa6
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2078      	movs	r0, #120	; 0x78
 8000f9e:	f000 fa4b 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1:32)
 8000fa2:	22a8      	movs	r2, #168	; 0xa8
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2078      	movs	r0, #120	; 0x78
 8000fa8:	f000 fa46 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x1F); //
 8000fac:	221f      	movs	r2, #31
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2078      	movs	r0, #120	; 0x78
 8000fb2:	f000 fa41 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fb6:	22a4      	movs	r2, #164	; 0xa4
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f000 fa3c 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fc0:	22d3      	movs	r2, #211	; 0xd3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	; 0x78
 8000fc6:	f000 fa37 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-no offset
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	; 0x78
 8000fd0:	f000 fa32 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fd4:	22d5      	movs	r2, #213	; 0xd5
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	; 0x78
 8000fda:	f000 fa2d 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000fde:	22f0      	movs	r2, #240	; 0xf0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	; 0x78
 8000fe4:	f000 fa28 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000fe8:	22d9      	movs	r2, #217	; 0xd9
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	; 0x78
 8000fee:	f000 fa23 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ff2:	2222      	movs	r2, #34	; 0x22
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	; 0x78
 8000ff8:	f000 fa1e 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ffc:	22da      	movs	r2, #218	; 0xda
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	; 0x78
 8001002:	f000 fa19 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001006:	2212      	movs	r2, #18
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	; 0x78
 800100c:	f000 fa14 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001010:	22db      	movs	r2, #219	; 0xdb
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	; 0x78
 8001016:	f000 fa0f 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	; 0x78
 8001020:	f000 fa0a 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001024:	228d      	movs	r2, #141	; 0x8d
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	; 0x78
 800102a:	f000 fa05 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800102e:	2214      	movs	r2, #20
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	; 0x78
 8001034:	f000 fa00 	bl	8001438 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001038:	22af      	movs	r2, #175	; 0xaf
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	; 0x78
 800103e:	f000 f9fb 	bl	8001438 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001042:	222e      	movs	r2, #46	; 0x2e
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	; 0x78
 8001048:	f000 f9f6 	bl	8001438 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f843 	bl	80010d8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001052:	f000 f813 	bl	800107c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SSD1306_Init+0x184>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SSD1306_Init+0x184>)
 800105e:	2200      	movs	r2, #0
 8001060:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SSD1306_Init+0x184>)
 8001064:	2201      	movs	r2, #1
 8001066:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000004c 	.word	0x2000004c
 8001078:	20000450 	.word	0x20000450

0800107c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e01d      	b.n	80010c4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3b50      	subs	r3, #80	; 0x50
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 f9d0 	bl	8001438 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f000 f9cb 	bl	8001438 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010a2:	2210      	movs	r2, #16
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 f9c6 	bl	8001438 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <SSD1306_UpdateScreen+0x58>)
 80010b2:	441a      	add	r2, r3
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	2140      	movs	r1, #64	; 0x40
 80010b8:	2078      	movs	r0, #120	; 0x78
 80010ba:	f000 f957 	bl	800136c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3301      	adds	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d9de      	bls.n	8001088 <SSD1306_UpdateScreen+0xc>
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000250 	.word	0x20000250

080010d8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <SSD1306_Fill+0x14>
 80010e8:	2300      	movs	r3, #0
 80010ea:	e000      	b.n	80010ee <SSD1306_Fill+0x16>
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f2:	4619      	mov	r1, r3
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <SSD1306_Fill+0x2c>)
 80010f6:	f006 ffbb 	bl	8008070 <memset>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000250 	.word	0x20000250

08001108 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	460b      	mov	r3, r1
 8001114:	80bb      	strh	r3, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	70fb      	strb	r3, [r7, #3]
	if (
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2b7f      	cmp	r3, #127	; 0x7f
 800111e:	d848      	bhi.n	80011b2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	2b1f      	cmp	r3, #31
 8001124:	d845      	bhi.n	80011b2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <SSD1306_DrawPixel+0xb8>)
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d11a      	bne.n	8001178 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001142:	88fa      	ldrh	r2, [r7, #6]
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	08db      	lsrs	r3, r3, #3
 8001148:	b298      	uxth	r0, r3
 800114a:	4603      	mov	r3, r0
 800114c:	01db      	lsls	r3, r3, #7
 800114e:	4413      	add	r3, r2
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <SSD1306_DrawPixel+0xbc>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	b25a      	sxtb	r2, r3
 8001156:	88bb      	ldrh	r3, [r7, #4]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	b25b      	sxtb	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b259      	sxtb	r1, r3
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	4603      	mov	r3, r0
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	4413      	add	r3, r2
 8001170:	b2c9      	uxtb	r1, r1
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <SSD1306_DrawPixel+0xbc>)
 8001174:	54d1      	strb	r1, [r2, r3]
 8001176:	e01d      	b.n	80011b4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	b298      	uxth	r0, r3
 8001180:	4603      	mov	r3, r0
 8001182:	01db      	lsls	r3, r3, #7
 8001184:	4413      	add	r3, r2
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <SSD1306_DrawPixel+0xbc>)
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	b25a      	sxtb	r2, r3
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	b25b      	sxtb	r3, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4013      	ands	r3, r2
 80011a0:	b259      	sxtb	r1, r3
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	4603      	mov	r3, r0
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4413      	add	r3, r2
 80011aa:	b2c9      	uxtb	r1, r1
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SSD1306_DrawPixel+0xbc>)
 80011ae:	54d1      	strb	r1, [r2, r3]
 80011b0:	e000      	b.n	80011b4 <SSD1306_DrawPixel+0xac>
		return;
 80011b2:	bf00      	nop
	}
}
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000450 	.word	0x20000450
 80011c4:	20000250 	.word	0x20000250

080011c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SSD1306_GotoXY+0x28>)
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <SSD1306_GotoXY+0x28>)
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	8053      	strh	r3, [r2, #2]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20000450 	.word	0x20000450

080011f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	4613      	mov	r3, r2
 8001202:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001204:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <SSD1306_Putc+0xfc>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
	if (
 8001210:	2b7f      	cmp	r3, #127	; 0x7f
 8001212:	dc07      	bgt.n	8001224 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <SSD1306_Putc+0xfc>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001220:	2b1f      	cmp	r3, #31
 8001222:	dd01      	ble.n	8001228 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001224:	2300      	movs	r3, #0
 8001226:	e05e      	b.n	80012e6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e04b      	b.n	80012c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b20      	subs	r3, #32
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	7849      	ldrb	r1, [r1, #1]
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	4619      	mov	r1, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	440b      	add	r3, r1
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	e030      	b.n	80012b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d010      	beq.n	8001284 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <SSD1306_Putc+0xfc>)
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b298      	uxth	r0, r3
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <SSD1306_Putc+0xfc>)
 8001270:	885a      	ldrh	r2, [r3, #2]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	79ba      	ldrb	r2, [r7, #6]
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff ff43 	bl	8001108 <SSD1306_DrawPixel>
 8001282:	e014      	b.n	80012ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <SSD1306_Putc+0xfc>)
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b298      	uxth	r0, r3
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <SSD1306_Putc+0xfc>)
 8001292:	885a      	ldrh	r2, [r3, #2]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	b29b      	uxth	r3, r3
 8001298:	4413      	add	r3, r2
 800129a:	b299      	uxth	r1, r3
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	f7ff ff2d 	bl	8001108 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	3301      	adds	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4293      	cmp	r3, r2
 80012be:	d3c8      	bcc.n	8001252 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	461a      	mov	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d3ad      	bcc.n	800122e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <SSD1306_Putc+0xfc>)
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <SSD1306_Putc+0xfc>)
 80012e2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000450 	.word	0x20000450

080012f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001302:	e012      	b.n	800132a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff71 	bl	80011f4 <SSD1306_Putc>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	e008      	b.n	8001336 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e8      	bne.n	8001304 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	781b      	ldrb	r3, [r3, #0]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <ssd1306_I2C_Init+0x28>)
 8001348:	607b      	str	r3, [r7, #4]
	while(p>0)
 800134a:	e002      	b.n	8001352 <ssd1306_I2C_Init+0x12>
		p--;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f9      	bne.n	800134c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	0003d090 	.word	0x0003d090

0800136c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b0c7      	sub	sp, #284	; 0x11c
 8001370:	af02      	add	r7, sp, #8
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800137a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800137e:	600a      	str	r2, [r1, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001386:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800138a:	4622      	mov	r2, r4
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001392:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001396:	4602      	mov	r2, r0
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800139e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013a2:	460a      	mov	r2, r1
 80013a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013b2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013c0:	e015      	b.n	80013ee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013ca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	441a      	add	r2, r3
 80013d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013d6:	3301      	adds	r3, #1
 80013d8:	7811      	ldrb	r1, [r2, #0]
 80013da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013de:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80013e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013e8:	3301      	adds	r3, #1
 80013ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013f8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d8df      	bhi.n	80013c2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001406:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b299      	uxth	r1, r3
 800140e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001412:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b29b      	uxth	r3, r3
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	200a      	movs	r0, #10
 8001422:	9000      	str	r0, [sp, #0]
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <ssd1306_I2C_WriteMulti+0xc8>)
 8001426:	f000 fdf1 	bl	800200c <HAL_I2C_Master_Transmit>
}
 800142a:	bf00      	nop
 800142c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001430:	46bd      	mov	sp, r7
 8001432:	bd90      	pop	{r4, r7, pc}
 8001434:	2000004c 	.word	0x2000004c

08001438 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af02      	add	r7, sp, #8
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	460b      	mov	r3, r1
 8001444:	71bb      	strb	r3, [r7, #6]
 8001446:	4613      	mov	r3, r2
 8001448:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	b299      	uxth	r1, r3
 8001456:	f107 020c 	add.w	r2, r7, #12
 800145a:	230a      	movs	r3, #10
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2302      	movs	r3, #2
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <ssd1306_I2C_Write+0x38>)
 8001462:	f000 fdd3 	bl	800200c <HAL_I2C_Master_Transmit>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000004c 	.word	0x2000004c

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6613      	str	r3, [r2, #96]	; 0x60
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0a2      	sub	sp, #136	; 0x88
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2260      	movs	r2, #96	; 0x60
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f006 fdc7 	bl	8008070 <memset>
  if(hi2c->Instance==I2C1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a20      	ldr	r2, [pc, #128]	; (8001568 <HAL_I2C_MspInit+0xac>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d139      	bne.n	8001560 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014ec:	2340      	movs	r3, #64	; 0x40
 80014ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f8b5 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001504:	f7ff fcf0 	bl	8000ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_I2C_MspInit+0xb0>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_I2C_MspInit+0xb0>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_I2C_MspInit+0xb0>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001520:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001526:	2312      	movs	r3, #18
 8001528:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001534:	2304      	movs	r3, #4
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f000 fb40 	bl	8001bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_I2C_MspInit+0xb0>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_I2C_MspInit+0xb0>)
 800154e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001552:	6593      	str	r3, [r2, #88]	; 0x58
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_I2C_MspInit+0xb0>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3788      	adds	r7, #136	; 0x88
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40005400 	.word	0x40005400
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0a2      	sub	sp, #136	; 0x88
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2260      	movs	r2, #96	; 0x60
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fd6d 	bl	8008070 <memset>
  if(huart->Instance==LPUART1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a20      	ldr	r2, [pc, #128]	; (800161c <HAL_UART_MspInit+0xac>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d138      	bne.n	8001612 <HAL_UART_MspInit+0xa2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015a0:	2320      	movs	r3, #32
 80015a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 f85b 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015b8:	f7ff fc96 	bl	8000ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0xb0>)
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0xb0>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0xb0>)
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_UART_MspInit+0xb0>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d8:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_UART_MspInit+0xb0>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_UART_MspInit+0xb0>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ec:	230c      	movs	r3, #12
 80015ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015fe:	2308      	movs	r3, #8
 8001600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f000 fadb 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3788      	adds	r7, #136	; 0x88
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40008000 	.word	0x40008000
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a4e      	ldr	r2, [pc, #312]	; (800177c <HAL_SPI_MspInit+0x158>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d129      	bne.n	800169a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001646:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 800164c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001650:	6613      	str	r3, [r2, #96]	; 0x60
 8001652:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b48      	ldr	r3, [pc, #288]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001676:	23e0      	movs	r3, #224	; 0xe0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001686:	2305      	movs	r3, #5
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f000 fa98 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001698:	e06c      	b.n	8001774 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a39      	ldr	r2, [pc, #228]	; (8001784 <HAL_SPI_MspInit+0x160>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d13a      	bne.n	800171a <HAL_SPI_MspInit+0xf6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016a4:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	6593      	str	r3, [r2, #88]	; 0x58
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e6:	2305      	movs	r3, #5
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4825      	ldr	r0, [pc, #148]	; (8001788 <HAL_SPI_MspInit+0x164>)
 80016f2:	f000 fa69 	bl	8001bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001708:	2305      	movs	r3, #5
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	481d      	ldr	r0, [pc, #116]	; (8001788 <HAL_SPI_MspInit+0x164>)
 8001714:	f000 fa58 	bl	8001bc8 <HAL_GPIO_Init>
}
 8001718:	e02c      	b.n	8001774 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI3)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1b      	ldr	r2, [pc, #108]	; (800178c <HAL_SPI_MspInit+0x168>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d127      	bne.n	8001774 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 800172a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_SPI_MspInit+0x15c>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001754:	2338      	movs	r3, #56	; 0x38
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001764:	2306      	movs	r3, #6
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <HAL_SPI_MspInit+0x164>)
 8001770:	f000 fa2a 	bl	8001bc8 <HAL_GPIO_Init>
}
 8001774:	bf00      	nop
 8001776:	3738      	adds	r7, #56	; 0x38
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40013000 	.word	0x40013000
 8001780:	40021000 	.word	0x40021000
 8001784:	40003800 	.word	0x40003800
 8001788:	48000400 	.word	0x48000400
 800178c:	40003c00 	.word	0x40003c00

08001790 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <SDTimer_Handler+0x40>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <SDTimer_Handler+0x1c>
    Timer1--;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <SDTimer_Handler+0x40>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <SDTimer_Handler+0x40>)
 80017aa:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <SDTimer_Handler+0x44>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <SDTimer_Handler+0x34>
    Timer2--;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <SDTimer_Handler+0x44>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SDTimer_Handler+0x44>)
 80017c2:	801a      	strh	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000458 	.word	0x20000458
 80017d4:	2000045a 	.word	0x2000045a

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <SysTick_Handler+0x30>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <SysTick_Handler+0x30>)
 8001830:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <SysTick_Handler+0x30>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b09      	cmp	r3, #9
 800183a:	d904      	bls.n	8001846 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Handler+0x30>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001842:	f7ff ffa5 	bl	8001790 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f895 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000456 	.word	0x20000456

08001854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800187c:	f7ff ffea 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001882:	490d      	ldr	r1, [pc, #52]	; (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001898:	4c0a      	ldr	r4, [pc, #40]	; (80018c4 <LoopForever+0x16>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a6:	f006 fbbf 	bl	8008028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018aa:	f7ff f825 	bl	80008f8 <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80018bc:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 80018c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80018c4:	2000069c 	.word	0x2000069c

080018c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_IRQHandler>

080018ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f943 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f80e 	bl	80018fc <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e001      	b.n	80018f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ec:	f7ff fdc2 	bl	8001474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d023      	beq.n	8001958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_InitTick+0x70>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_InitTick+0x6c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f941 	bl	8001bae <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d809      	bhi.n	800194c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 f919 	bl	8001b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_InitTick+0x74>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e007      	b.n	800195c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e004      	b.n	800195c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e001      	b.n	800195c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000014 	.word	0x20000014
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000010 	.word	0x20000010

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000014 	.word	0x20000014
 8001998:	2000045c 	.word	0x2000045c

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000045c 	.word	0x2000045c

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000014 	.word	0x20000014

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff47 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff5c 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffb0 	bl	8001b1c <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	e154      	b.n	8001e82 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8146 	beq.w	8001e7c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d005      	beq.n	8001c08 <HAL_GPIO_Init+0x40>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d130      	bne.n	8001c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3e:	2201      	movs	r2, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0201 	and.w	r2, r3, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d017      	beq.n	8001ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d123      	bne.n	8001cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0203 	and.w	r2, r3, #3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80a0 	beq.w	8001e7c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_GPIO_Init+0x2d8>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <HAL_GPIO_Init+0x2d8>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6613      	str	r3, [r2, #96]	; 0x60
 8001d48:	4b55      	ldr	r3, [pc, #340]	; (8001ea0 <HAL_GPIO_Init+0x2d8>)
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d54:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d7e:	d019      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x2e0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x2e4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00d      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_GPIO_Init+0x2e8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <HAL_GPIO_Init+0x2ec>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_GPIO_Init+0x1dc>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e008      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da4:	2307      	movs	r3, #7
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2303      	movs	r3, #3
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc6:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e22:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f47f aea3 	bne.w	8001bd8 <HAL_GPIO_Init+0x10>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	48000800 	.word	0x48000800
 8001eb0:	48000c00 	.word	0x48000c00
 8001eb4:	48001000 	.word	0x48001000
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e081      	b.n	8002002 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fad2 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2224      	movs	r2, #36	; 0x24
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e006      	b.n	8001f74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d104      	bne.n	8001f86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69d9      	ldr	r1, [r3, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	460b      	mov	r3, r1
 800201a:	817b      	strh	r3, [r7, #10]
 800201c:	4613      	mov	r3, r2
 800201e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b20      	cmp	r3, #32
 800202a:	f040 80da 	bne.w	80021e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Transmit+0x30>
 8002038:	2302      	movs	r3, #2
 800203a:	e0d3      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1d8>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002044:	f7ff fcaa 	bl	800199c <HAL_GetTick>
 8002048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2319      	movs	r3, #25
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f9f7 	bl	800244a <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0be      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2210      	movs	r2, #16
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2bff      	cmp	r3, #255	; 0xff
 8002096:	d90e      	bls.n	80020b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	22ff      	movs	r2, #255	; 0xff
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_I2C_Master_Transmit+0x1e0>)
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fb74 	bl	800279c <I2C_TransferConfig>
 80020b4:	e06c      	b.n	8002190 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_I2C_Master_Transmit+0x1e0>)
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fb63 	bl	800279c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020d6:	e05b      	b.n	8002190 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6a39      	ldr	r1, [r7, #32]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f9f4 	bl	80024ca <I2C_WaitOnTXISFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e07b      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d034      	beq.n	8002190 <HAL_I2C_Master_Transmit+0x184>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d130      	bne.n	8002190 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f986 	bl	800244a <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e04d      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d90e      	bls.n	8002170 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	b2da      	uxtb	r2, r3
 800215e:	8979      	ldrh	r1, [r7, #10]
 8002160:	2300      	movs	r3, #0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fb17 	bl	800279c <I2C_TransferConfig>
 800216e:	e00f      	b.n	8002190 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	b2da      	uxtb	r2, r3
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fb06 	bl	800279c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d19e      	bne.n	80020d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f9d3 	bl	800254a <I2C_WaitOnSTOPFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e01a      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80021c2:	400b      	ands	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	80002000 	.word	0x80002000
 80021f0:	fe00e800 	.word	0xfe00e800

080021f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	f040 80f1 	bne.w	80023f8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002224:	d101      	bne.n	800222a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	e0e7      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_I2C_IsDeviceReady+0x44>
 8002234:	2302      	movs	r3, #2
 8002236:	e0e0      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_I2C_IsDeviceReady+0x72>
 8002256:	897b      	ldrh	r3, [r7, #10]
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002264:	e004      	b.n	8002270 <HAL_I2C_IsDeviceReady+0x7c>
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002276:	f7ff fb91 	bl	800199c <HAL_GetTick>
 800227a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b20      	cmp	r3, #32
 8002288:	bf0c      	ite	eq
 800228a:	2301      	moveq	r3, #1
 800228c:	2300      	movne	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b10      	cmp	r3, #16
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022a8:	e034      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d01a      	beq.n	80022e8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7ff fb73 	bl	800199c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <HAL_I2C_IsDeviceReady+0xd4>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e088      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b10      	cmp	r3, #16
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002314:	7ffb      	ldrb	r3, [r7, #31]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <HAL_I2C_IsDeviceReady+0x12c>
 800231a:	7fbb      	ldrb	r3, [r7, #30]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0c4      	beq.n	80022aa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b10      	cmp	r3, #16
 800232c:	d01a      	beq.n	8002364 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	2120      	movs	r1, #32
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f886 	bl	800244a <I2C_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e058      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2220      	movs	r2, #32
 800234e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e04a      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	2120      	movs	r1, #32
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f86b 	bl	800244a <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e03d      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2210      	movs	r2, #16
 8002384:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2220      	movs	r2, #32
 800238c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d118      	bne.n	80023c8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2120      	movs	r1, #32
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f84a 	bl	800244a <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e01c      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2220      	movs	r2, #32
 80023c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	f63f af3b 	bhi.w	800224e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d103      	bne.n	8002420 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d007      	beq.n	800243e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	619a      	str	r2, [r3, #24]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800245a:	e022      	b.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d01e      	beq.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002464:	f7ff fa9a 	bl	800199c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d302      	bcc.n	800247a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4013      	ands	r3, r2
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d0cd      	beq.n	800245c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024d6:	e02c      	b.n	8002532 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f871 	bl	80025c4 <I2C_IsErrorOccurred>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e02a      	b.n	8002542 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d01e      	beq.n	8002532 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f4:	f7ff fa52 	bl	800199c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	d302      	bcc.n	800250a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d113      	bne.n	8002532 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e007      	b.n	8002542 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d1cb      	bne.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002556:	e028      	b.n	80025aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f831 	bl	80025c4 <I2C_IsErrorOccurred>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e026      	b.n	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256c:	f7ff fa16 	bl	800199c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d113      	bne.n	80025aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f043 0220 	orr.w	r2, r3, #32
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e007      	b.n	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d1cf      	bne.n	8002558 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d075      	beq.n	80026dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2210      	movs	r2, #16
 80025f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025f8:	e056      	b.n	80026a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d052      	beq.n	80026a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002602:	f7ff f9cb 	bl	800199c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	d302      	bcc.n	8002618 <I2C_IsErrorOccurred+0x54>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d147      	bne.n	80026a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800262a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263a:	d12e      	bne.n	800269a <I2C_IsErrorOccurred+0xd6>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002642:	d02a      	beq.n	800269a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b20      	cmp	r3, #32
 8002648:	d027      	beq.n	800269a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002658:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800265a:	f7ff f99f 	bl	800199c <HAL_GetTick>
 800265e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002660:	e01b      	b.n	800269a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002662:	f7ff f99b 	bl	800199c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b19      	cmp	r3, #25
 800266e:	d914      	bls.n	800269a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d1dc      	bne.n	8002662 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d003      	beq.n	80026be <I2C_IsErrorOccurred+0xfa>
 80026b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d09d      	beq.n	80025fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2220      	movs	r2, #32
 80026cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800274a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01c      	beq.n	800278c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fe55 	bl	8002402 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <I2C_IsErrorOccurred+0x1d4>)
 8002764:	400b      	ands	r3, r1
 8002766:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800278c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002790:	4618      	mov	r0, r3
 8002792:	3728      	adds	r7, #40	; 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	fe00e800 	.word	0xfe00e800

0800279c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	4613      	mov	r3, r2
 80027ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b4:	7a7b      	ldrb	r3, [r7, #9]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <I2C_TransferConfig+0x60>)
 80027dc:	430b      	orrs	r3, r1
 80027de:	43db      	mvns	r3, r3
 80027e0:	ea02 0103 	and.w	r1, r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	03ff63ff 	.word	0x03ff63ff

08002800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	d138      	bne.n	8002888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002820:	2302      	movs	r3, #2
 8002822:	e032      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d139      	bne.n	8002920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e033      	b.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2224      	movs	r2, #36	; 0x24
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_PWREx_GetVoltageRange+0x18>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40007000 	.word	0x40007000

0800294c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295a:	d130      	bne.n	80029be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002968:	d038      	beq.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2232      	movs	r2, #50	; 0x32
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	e002      	b.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	d102      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f2      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d110      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d007      	beq.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029d4:	4a05      	ldr	r2, [pc, #20]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f000 bc02 	b.w	8003210 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a16:	4b94      	ldr	r3, [pc, #592]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80e4 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4c>
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	f040 808b 	bne.w	8002b52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 8087 	bne.w	8002b52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a44:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x64>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e3d9      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCC_OscConfig+0x7e>
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	e005      	b.n	8002a82 <HAL_RCC_OscConfig+0x8a>
 8002a76:	4b7c      	ldr	r3, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d223      	bcs.n	8002ace <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fd8c 	bl	80035a8 <RCC_SetFlashLatencyFromMSIRange>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e3ba      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a72      	ldr	r2, [pc, #456]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	496d      	ldr	r1, [pc, #436]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab8:	4b6b      	ldr	r3, [pc, #428]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	4968      	ldr	r1, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
 8002acc:	e025      	b.n	8002b1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4960      	ldr	r1, [pc, #384]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aec:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	495b      	ldr	r1, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fd4c 	bl	80035a8 <RCC_SetFlashLatencyFromMSIRange>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e37a      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1a:	f000 fc81 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4950      	ldr	r1, [pc, #320]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_RCC_OscConfig+0x278>)
 8002b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fedc 	bl	80018fc <HAL_InitTick>
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d052      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	e35e      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d032      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b66:	f7fe ff19 	bl	800199c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6e:	f7fe ff15 	bl	800199c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e347      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b80:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a35      	ldr	r2, [pc, #212]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b92:	f043 0308 	orr.w	r3, r3, #8
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4930      	ldr	r1, [pc, #192]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	492b      	ldr	r1, [pc, #172]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e01a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fee6 	bl	800199c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fee2 	bl	800199c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e314      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1dc>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d073      	beq.n	8002cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x21c>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d10e      	bne.n	8002c2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d063      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d15f      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e2f1      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x24c>
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a0b      	ldr	r2, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e025      	b.n	8002c90 <HAL_RCC_OscConfig+0x298>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d114      	bne.n	8002c78 <HAL_RCC_OscConfig+0x280>
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a02      	ldr	r2, [pc, #8]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e013      	b.n	8002c90 <HAL_RCC_OscConfig+0x298>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08008ea8 	.word	0x08008ea8
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	20000010 	.word	0x20000010
 8002c78:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a9f      	ldr	r2, [pc, #636]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b9d      	ldr	r3, [pc, #628]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a9c      	ldr	r2, [pc, #624]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fe80 	bl	800199c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fe7c 	bl	800199c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e2ae      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb2:	4b92      	ldr	r3, [pc, #584]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2a8>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fe6c 	bl	800199c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fe68 	bl	800199c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e29a      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2d0>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d060      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x310>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d116      	bne.n	8002d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x328>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e277      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	4973      	ldr	r1, [pc, #460]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	e040      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d023      	beq.n	8002d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6e      	ldr	r2, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fe27 	bl	800199c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe fe23 	bl	800199c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e255      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b62      	ldr	r3, [pc, #392]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	495f      	ldr	r1, [pc, #380]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	e018      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5c      	ldr	r2, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fe03 	bl	800199c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fdff 	bl	800199c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e231      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd2:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fdde 	bl	800199c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe fdda 	bl	800199c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e20c      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3ec>
 8002e04:	e01b      	b.n	8002e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fdc1 	bl	800199c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fdbd 	bl	800199c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1ef      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1ef      	bne.n	8002e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80a6 	beq.w	8002f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d118      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e90:	f7fe fd84 	bl	800199c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7fe fd80 	bl	800199c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1b2      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4d8>
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ece:	e029      	b.n	8002f24 <HAL_RCC_OscConfig+0x52c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d115      	bne.n	8002f04 <HAL_RCC_OscConfig+0x50c>
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x52c>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	4b9a      	ldr	r3, [pc, #616]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	4a99      	ldr	r2, [pc, #612]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f14:	4b96      	ldr	r3, [pc, #600]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	4a95      	ldr	r2, [pc, #596]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fd36 	bl	800199c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fd32 	bl	800199c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e162      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ed      	beq.n	8002f34 <HAL_RCC_OscConfig+0x53c>
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fd1f 	bl	800199c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe fd1b 	bl	800199c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e14b      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	4b7d      	ldr	r3, [pc, #500]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ed      	bne.n	8002f62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f86:	7ffb      	ldrb	r3, [r7, #31]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b78      	ldr	r3, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d03c      	beq.n	800301e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fac:	4b70      	ldr	r3, [pc, #448]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb2:	4a6f      	ldr	r2, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fcee 	bl	800199c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc4:	f7fe fcea 	bl	800199c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e11c      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd6:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ef      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x5cc>
 8002fe4:	e01b      	b.n	800301e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fec:	4a60      	ldr	r2, [pc, #384]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fcd1 	bl	800199c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ffe:	f7fe fccd 	bl	800199c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0ff      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003010:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8003012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80f3 	beq.w	800320e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b02      	cmp	r3, #2
 800302e:	f040 80c9 	bne.w	80031c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003032:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	429a      	cmp	r2, r3
 8003044:	d12c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	3b01      	subs	r3, #1
 8003052:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d123      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d11b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d113      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d109      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d06b      	beq.n	8003178 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d062      	beq.n	800316c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030a6:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0ac      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030b6:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 80030bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c2:	f7fe fc6b 	bl	800199c <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe fc67 	bl	800199c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e099      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x77c>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030f8:	3a01      	subs	r2, #1
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003102:	0212      	lsls	r2, r2, #8
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800310a:	0852      	lsrs	r2, r2, #1
 800310c:	3a01      	subs	r2, #1
 800310e:	0552      	lsls	r2, r2, #21
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003116:	0852      	lsrs	r2, r2, #1
 8003118:	3a01      	subs	r2, #1
 800311a:	0652      	lsls	r2, r2, #25
 800311c:	4311      	orrs	r1, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003122:	06d2      	lsls	r2, r2, #27
 8003124:	430a      	orrs	r2, r1
 8003126:	4912      	ldr	r1, [pc, #72]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8003128:	4313      	orrs	r3, r2
 800312a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003144:	f7fe fc2a 	bl	800199c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fc26 	bl	800199c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e058      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCC_OscConfig+0x778>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316a:	e050      	b.n	800320e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e04f      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
 8003170:	40021000 	.word	0x40021000
 8003174:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d144      	bne.n	800320e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800319c:	f7fe fbfe 	bl	800199c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fbfa 	bl	800199c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e02c      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x7ac>
 80031c2:	e024      	b.n	800320e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d01f      	beq.n	800320a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 80031d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fbe1 	bl	800199c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe fbdd 	bl	800199c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4905      	ldr	r1, [pc, #20]	; (8003218 <HAL_RCC_OscConfig+0x820>)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x824>)
 8003204:	4013      	ands	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
 8003208:	e001      	b.n	800320e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	feeefffc 	.word	0xfeeefffc

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0e7      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b75      	ldr	r3, [pc, #468]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4970      	ldr	r1, [pc, #448]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b6e      	ldr	r3, [pc, #440]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cf      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	429a      	cmp	r2, r3
 800327e:	d908      	bls.n	8003292 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4960      	ldr	r1, [pc, #384]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d04c      	beq.n	8003338 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0a6      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032be:	4b54      	ldr	r3, [pc, #336]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e09a      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d6:	4b4e      	ldr	r3, [pc, #312]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e08e      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e086      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b46      	ldr	r3, [pc, #280]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4943      	ldr	r1, [pc, #268]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fe fb48 	bl	800199c <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fb44 	bl	800199c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e06e      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003350:	429a      	cmp	r2, r3
 8003352:	d208      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	492b      	ldr	r1, [pc, #172]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d210      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 0207 	bic.w	r2, r3, #7
 800337c:	4923      	ldr	r1, [pc, #140]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e036      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4918      	ldr	r1, [pc, #96]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4910      	ldr	r1, [pc, #64]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033d4:	f000 f824 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	490b      	ldr	r1, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x1f4>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1f8>)
 80033f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1fc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fa7f 	bl	80018fc <HAL_InitTick>
 80033fe:	4603      	mov	r3, r0
 8003400:	72fb      	strb	r3, [r7, #11]

  return status;
 8003402:	7afb      	ldrb	r3, [r7, #11]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40022000 	.word	0x40022000
 8003410:	40021000 	.word	0x40021000
 8003414:	08008ea8 	.word	0x08008ea8
 8003418:	2000000c 	.word	0x2000000c
 800341c:	20000010 	.word	0x20000010

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342e:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x34>
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d121      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11e      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003454:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	e005      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800347c:	4a2b      	ldr	r2, [pc, #172]	; (800352c <HAL_RCC_GetSysClockFreq+0x10c>)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d102      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_GetSysClockFreq+0x110>)
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e004      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <HAL_RCC_GetSysClockFreq+0x114>)
 80034a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d134      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d003      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0xac>
 80034c4:	e005      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCC_GetSysClockFreq+0x110>)
 80034c8:	617b      	str	r3, [r7, #20]
      break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ce:	617b      	str	r3, [r7, #20]
      break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	617b      	str	r3, [r7, #20]
      break;
 80034d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	3301      	adds	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	fb03 f202 	mul.w	r2, r3, r2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	0e5b      	lsrs	r3, r3, #25
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	3301      	adds	r3, #1
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003518:	69bb      	ldr	r3, [r7, #24]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	08008ec0 	.word	0x08008ec0
 8003530:	00f42400 	.word	0x00f42400
 8003534:	007a1200 	.word	0x007a1200

08003538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	2000000c 	.word	0x2000000c

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003554:	f7ff fff0 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4904      	ldr	r1, [pc, #16]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	08008eb8 	.word	0x08008eb8

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003580:	f7ff ffda 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0adb      	lsrs	r3, r3, #11
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08008eb8 	.word	0x08008eb8

080035a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035b4:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c0:	f7ff f9b6 	bl	8002930 <HAL_PWREx_GetVoltageRange>
 80035c4:	6178      	str	r0, [r7, #20]
 80035c6:	e014      	b.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	4a24      	ldr	r2, [pc, #144]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	6593      	str	r3, [r2, #88]	; 0x58
 80035d4:	4b22      	ldr	r3, [pc, #136]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e0:	f7ff f9a6 	bl	8002930 <HAL_PWREx_GetVoltageRange>
 80035e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	4a1d      	ldr	r2, [pc, #116]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f8:	d10b      	bne.n	8003612 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d919      	bls.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2ba0      	cmp	r3, #160	; 0xa0
 8003604:	d902      	bls.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003606:	2302      	movs	r3, #2
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e013      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800360c:	2301      	movs	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	e010      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d902      	bls.n	800361e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003618:	2303      	movs	r3, #3
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	e00a      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d102      	bne.n	800362a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003624:	2302      	movs	r3, #2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	e004      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b70      	cmp	r3, #112	; 0x70
 800362e:	d101      	bne.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003630:	2301      	movs	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 0207 	bic.w	r2, r3, #7
 800363c:	4909      	ldr	r1, [pc, #36]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d001      	beq.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	40022000 	.word	0x40022000

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003670:	2300      	movs	r3, #0
 8003672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003674:	2300      	movs	r3, #0
 8003676:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	2b00      	cmp	r3, #0
 8003682:	d031      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800368c:	d01a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800368e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003692:	d814      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800369c:	d10f      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800369e:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	4a5c      	ldr	r2, [pc, #368]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036aa:	e00c      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa22 	bl	8003afc <RCCEx_PLLSAI1_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	74fb      	strb	r3, [r7, #19]
      break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	494e      	ldr	r1, [pc, #312]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 809e 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036fa:	4b46      	ldr	r3, [pc, #280]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003710:	4b40      	ldr	r3, [pc, #256]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	6593      	str	r3, [r2, #88]	; 0x58
 800371c:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003728:	2301      	movs	r3, #1
 800372a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800372c:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a39      	ldr	r2, [pc, #228]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003738:	f7fe f930 	bl	800199c <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003740:	f7fe f92c 	bl	800199c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	74fb      	strb	r3, [r7, #19]
        break;
 8003752:	e005      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003754:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d15a      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01e      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d019      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ae:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d016      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe f8ec 	bl	800199c <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c6:	e00b      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fe f8e8 	bl	800199c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d902      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	74fb      	strb	r3, [r7, #19]
            break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ec      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800380a:	e009      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
 8003810:	e006      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003820:	7c7b      	ldrb	r3, [r7, #17]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b8d      	ldr	r3, [pc, #564]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	4a8c      	ldr	r2, [pc, #560]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383e:	4b87      	ldr	r3, [pc, #540]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f023 0203 	bic.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4983      	ldr	r1, [pc, #524]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003860:	4b7e      	ldr	r3, [pc, #504]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 020c 	bic.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	497b      	ldr	r1, [pc, #492]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003882:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	4972      	ldr	r1, [pc, #456]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a4:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	496a      	ldr	r1, [pc, #424]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	4961      	ldr	r1, [pc, #388]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038e8:	4b5c      	ldr	r3, [pc, #368]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4959      	ldr	r1, [pc, #356]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390a:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	4950      	ldr	r1, [pc, #320]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800392c:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	4948      	ldr	r1, [pc, #288]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800394e:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	493f      	ldr	r1, [pc, #252]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d028      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003970:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	4937      	ldr	r1, [pc, #220]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398e:	d106      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003990:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a31      	ldr	r2, [pc, #196]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399a:	60d3      	str	r3, [r2, #12]
 800399c:	e011      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f8a4 	bl	8003afc <RCCEx_PLLSAI1_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d028      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	491f      	ldr	r1, [pc, #124]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ec:	d106      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f8:	60d3      	str	r3, [r2, #12]
 80039fa:	e011      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f875 	bl	8003afc <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02b      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4a:	d109      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a02      	ldr	r2, [pc, #8]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]
 8003a58:	e014      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f843 	bl	8003afc <RCCEx_PLLSAI1_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01c      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	4916      	ldr	r1, [pc, #88]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aae:	d10c      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f820 	bl	8003afc <RCCEx_PLLSAI1_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	4904      	ldr	r1, [pc, #16]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b0a:	4b74      	ldr	r3, [pc, #464]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b16:	4b71      	ldr	r3, [pc, #452]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d10d      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
       ||
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b2e:	4b6b      	ldr	r3, [pc, #428]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d047      	beq.n	8003bd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e044      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d018      	beq.n	8003b82 <RCCEx_PLLSAI1_Config+0x86>
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d825      	bhi.n	8003ba0 <RCCEx_PLLSAI1_Config+0xa4>
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d002      	beq.n	8003b5e <RCCEx_PLLSAI1_Config+0x62>
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d009      	beq.n	8003b70 <RCCEx_PLLSAI1_Config+0x74>
 8003b5c:	e020      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b5e:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11d      	bne.n	8003ba6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6e:	e01a      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b70:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d116      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b80:	e013      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b82:	4b56      	ldr	r3, [pc, #344]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b9e:	e006      	b.n	8003bae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e004      	b.n	8003bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bb6:	4b49      	ldr	r3, [pc, #292]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	4943      	ldr	r1, [pc, #268]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d17c      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bd8:	4b40      	ldr	r3, [pc, #256]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd feda 	bl	800199c <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bea:	e009      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bec:	f7fd fed6 	bl	800199c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bfe:	e005      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c00:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ef      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d15f      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d110      	bne.n	8003c3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c18:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6892      	ldr	r2, [r2, #8]
 8003c28:	0211      	lsls	r1, r2, #8
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68d2      	ldr	r2, [r2, #12]
 8003c2e:	06d2      	lsls	r2, r2, #27
 8003c30:	430a      	orrs	r2, r1
 8003c32:	492a      	ldr	r1, [pc, #168]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	610b      	str	r3, [r1, #16]
 8003c38:	e027      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d112      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6892      	ldr	r2, [r2, #8]
 8003c50:	0211      	lsls	r1, r2, #8
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6912      	ldr	r2, [r2, #16]
 8003c56:	0852      	lsrs	r2, r2, #1
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0552      	lsls	r2, r2, #21
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	491f      	ldr	r1, [pc, #124]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	610b      	str	r3, [r1, #16]
 8003c64:	e011      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6892      	ldr	r2, [r2, #8]
 8003c76:	0211      	lsls	r1, r2, #8
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6952      	ldr	r2, [r2, #20]
 8003c7c:	0852      	lsrs	r2, r2, #1
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	0652      	lsls	r2, r2, #25
 8003c82:	430a      	orrs	r2, r1
 8003c84:	4915      	ldr	r1, [pc, #84]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c96:	f7fd fe81 	bl	800199c <HAL_GetTick>
 8003c9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c9c:	e009      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c9e:	f7fd fe7d 	bl	800199c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d902      	bls.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	73fb      	strb	r3, [r7, #15]
          break;
 8003cb0:	e005      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ef      	beq.n	8003c9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e095      	b.n	8003e1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d009      	beq.n	8003d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fc76 	bl	8001624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d58:	d902      	bls.n	8003d60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e002      	b.n	8003d66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d6e:	d007      	beq.n	8003d80 <HAL_SPI_Init+0xa0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	ea42 0103 	orr.w	r1, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	f003 0204 	and.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_SPI_Transmit+0x22>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e158      	b.n	80040fa <HAL_SPI_Transmit+0x2d4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e50:	f7fd fda4 	bl	800199c <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e6a:	e13d      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Transmit+0x52>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e7c:	e134      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec8:	d10f      	bne.n	8003eea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d007      	beq.n	8003f08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f10:	d94b      	bls.n	8003faa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0xfa>
 8003f1a:	8afb      	ldrh	r3, [r7, #22]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d13e      	bne.n	8003f9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f44:	e02b      	b.n	8003f9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d112      	bne.n	8003f7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f78:	e011      	b.n	8003f9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7a:	f7fd fd0f 	bl	800199c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d803      	bhi.n	8003f92 <HAL_SPI_Transmit+0x16c>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d102      	bne.n	8003f98 <HAL_SPI_Transmit+0x172>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f9c:	e0a4      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ce      	bne.n	8003f46 <HAL_SPI_Transmit+0x120>
 8003fa8:	e07c      	b.n	80040a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x192>
 8003fb2:	8afb      	ldrh	r3, [r7, #22]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d170      	bne.n	800409a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d912      	bls.n	8003fe8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	1c9a      	adds	r2, r3, #2
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b02      	subs	r3, #2
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe6:	e058      	b.n	800409a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800400e:	e044      	b.n	800409a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d12b      	bne.n	8004076 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d912      	bls.n	800404e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	881a      	ldrh	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b02      	subs	r3, #2
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800404c:	e025      	b.n	800409a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004074:	e011      	b.n	800409a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004076:	f7fd fc91 	bl	800199c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d803      	bhi.n	800408e <HAL_SPI_Transmit+0x268>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d102      	bne.n	8004094 <HAL_SPI_Transmit+0x26e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004098:	e026      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1b5      	bne.n	8004010 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fb5b 	bl	8004764 <SPI_EndRxTxTransaction>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e000      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08a      	sub	sp, #40	; 0x28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004110:	2301      	movs	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x26>
 8004124:	2302      	movs	r3, #2
 8004126:	e1fb      	b.n	8004520 <HAL_SPI_TransmitReceive+0x41e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004130:	f7fd fc34 	bl	800199c <HAL_GetTick>
 8004134:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d00e      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x6e>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004158:	d106      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x66>
 8004162:	7efb      	ldrb	r3, [r7, #27]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d003      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800416e:	e1cd      	b.n	800450c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x80>
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004188:	e1c0      	b.n	800450c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b04      	cmp	r3, #4
 8004194:	d003      	beq.n	800419e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	887a      	ldrh	r2, [r7, #2]
 80041b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e0:	d802      	bhi.n	80041e8 <HAL_SPI_TransmitReceive+0xe6>
 80041e2:	8a3b      	ldrh	r3, [r7, #16]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d908      	bls.n	80041fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	e007      	b.n	800420a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d007      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004230:	d97c      	bls.n	800432c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x13e>
 800423a:	8a7b      	ldrh	r3, [r7, #18]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d169      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	881a      	ldrh	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	1c9a      	adds	r2, r3, #2
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004264:	e056      	b.n	8004314 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d11b      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x1aa>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x1aa>
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	2b01      	cmp	r3, #1
 8004282:	d113      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d11c      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x1f2>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	b292      	uxth	r2, r2
 80042d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042f0:	2301      	movs	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042f4:	f7fd fb52 	bl	800199c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004300:	429a      	cmp	r2, r3
 8004302:	d807      	bhi.n	8004314 <HAL_SPI_TransmitReceive+0x212>
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d003      	beq.n	8004314 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004312:	e0fb      	b.n	800450c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1a3      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x164>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d19d      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x164>
 800432a:	e0df      	b.n	80044ec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_SPI_TransmitReceive+0x23a>
 8004334:	8a7b      	ldrh	r3, [r7, #18]
 8004336:	2b01      	cmp	r3, #1
 8004338:	f040 80cb 	bne.w	80044d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d912      	bls.n	800436c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	881a      	ldrh	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b02      	subs	r3, #2
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800436a:	e0b2      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004392:	e09e      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d134      	bne.n	800440c <HAL_SPI_TransmitReceive+0x30a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02f      	beq.n	800440c <HAL_SPI_TransmitReceive+0x30a>
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d12c      	bne.n	800440c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d912      	bls.n	80043e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b02      	subs	r3, #2
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043e0:	e012      	b.n	8004408 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d148      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x3aa>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d042      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d923      	bls.n	800447a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	b292      	uxth	r2, r2
 800443e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b02      	subs	r3, #2
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d81f      	bhi.n	80044a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e016      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f103 020c 	add.w	r2, r3, #12
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044ac:	f7fd fa76 	bl	800199c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d803      	bhi.n	80044c4 <HAL_SPI_TransmitReceive+0x3c2>
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d102      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x3c8>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044d0:	e01c      	b.n	800450c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f af5b 	bne.w	8004394 <HAL_SPI_TransmitReceive+0x292>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f47f af54 	bne.w	8004394 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f937 	bl	8004764 <SPI_EndRxTxTransaction>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	661a      	str	r2, [r3, #96]	; 0x60
 8004508:	e000      	b.n	800450c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800450a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800451c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004520:	4618      	mov	r0, r3
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004538:	f7fd fa30 	bl	800199c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	4413      	add	r3, r2
 8004546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004548:	f7fd fa28 	bl	800199c <HAL_GetTick>
 800454c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800454e:	4b39      	ldr	r3, [pc, #228]	; (8004634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	015b      	lsls	r3, r3, #5
 8004554:	0d1b      	lsrs	r3, r3, #20
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800455e:	e054      	b.n	800460a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d050      	beq.n	800460a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004568:	f7fd fa18 	bl	800199c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	429a      	cmp	r2, r3
 8004576:	d902      	bls.n	800457e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d13d      	bne.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800458c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d111      	bne.n	80045bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	d004      	beq.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d107      	bne.n	80045bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d10f      	bne.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e017      	b.n	800462a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3b01      	subs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	429a      	cmp	r2, r3
 8004626:	d19b      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c

08004638 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800464a:	f7fd f9a7 	bl	800199c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	4413      	add	r3, r2
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800465a:	f7fd f99f 	bl	800199c <HAL_GetTick>
 800465e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004668:	4b3d      	ldr	r3, [pc, #244]	; (8004760 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00da      	lsls	r2, r3, #3
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	0d1b      	lsrs	r3, r3, #20
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004680:	e060      	b.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004688:	d107      	bne.n	800469a <SPI_WaitFifoStateUntilTimeout+0x62>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004698:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d050      	beq.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046a2:	f7fd f97b 	bl	800199c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d902      	bls.n	80046b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d13d      	bne.n	8004734 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d0:	d111      	bne.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046da:	d004      	beq.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d107      	bne.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d10f      	bne.n	8004720 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800471e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e010      	b.n	8004756 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	3b01      	subs	r3, #1
 8004742:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	d196      	bne.n	8004682 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c

08004764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff ff5b 	bl	8004638 <SPI_WaitFifoStateUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e027      	b.n	80047e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff fec0 	bl	8004528 <SPI_WaitFlagStateUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e014      	b.n	80047e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff34 	bl	8004638 <SPI_WaitFifoStateUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e000      	b.n	80047e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e040      	b.n	8004884 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc feac 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	; 0x24
 800481c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f82c 	bl	800488c <UART_SetConfig>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e022      	b.n	8004884 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa7a 	bl	8004d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb01 	bl	8004e84 <UART_CheckIdleState>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800488c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004890:	b08a      	sub	sp, #40	; 0x28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b9e      	ldr	r3, [pc, #632]	; (8004b34 <UART_SetConfig+0x2a8>)
 80048bc:	4013      	ands	r3, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a93      	ldr	r2, [pc, #588]	; (8004b38 <UART_SetConfig+0x2ac>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	4313      	orrs	r3, r2
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a8a      	ldr	r2, [pc, #552]	; (8004b3c <UART_SetConfig+0x2b0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d126      	bne.n	8004964 <UART_SetConfig+0xd8>
 8004916:	4b8a      	ldr	r3, [pc, #552]	; (8004b40 <UART_SetConfig+0x2b4>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b03      	cmp	r3, #3
 8004922:	d81b      	bhi.n	800495c <UART_SetConfig+0xd0>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0xa0>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494d 	.word	0x0800494d
 8004934:	08004945 	.word	0x08004945
 8004938:	08004955 	.word	0x08004955
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004942:	e0ab      	b.n	8004a9c <UART_SetConfig+0x210>
 8004944:	2302      	movs	r3, #2
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494a:	e0a7      	b.n	8004a9c <UART_SetConfig+0x210>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004952:	e0a3      	b.n	8004a9c <UART_SetConfig+0x210>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495a:	e09f      	b.n	8004a9c <UART_SetConfig+0x210>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004962:	e09b      	b.n	8004a9c <UART_SetConfig+0x210>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a76      	ldr	r2, [pc, #472]	; (8004b44 <UART_SetConfig+0x2b8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d138      	bne.n	80049e0 <UART_SetConfig+0x154>
 800496e:	4b74      	ldr	r3, [pc, #464]	; (8004b40 <UART_SetConfig+0x2b4>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b0c      	cmp	r3, #12
 800497a:	d82d      	bhi.n	80049d8 <UART_SetConfig+0x14c>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0xf8>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049b9 	.word	0x080049b9
 8004988:	080049d9 	.word	0x080049d9
 800498c:	080049d9 	.word	0x080049d9
 8004990:	080049d9 	.word	0x080049d9
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049d9 	.word	0x080049d9
 80049a4:	080049c1 	.word	0x080049c1
 80049a8:	080049d9 	.word	0x080049d9
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049d1 	.word	0x080049d1
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049be:	e06d      	b.n	8004a9c <UART_SetConfig+0x210>
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c6:	e069      	b.n	8004a9c <UART_SetConfig+0x210>
 80049c8:	2304      	movs	r3, #4
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e065      	b.n	8004a9c <UART_SetConfig+0x210>
 80049d0:	2308      	movs	r3, #8
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e061      	b.n	8004a9c <UART_SetConfig+0x210>
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049de:	e05d      	b.n	8004a9c <UART_SetConfig+0x210>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a58      	ldr	r2, [pc, #352]	; (8004b48 <UART_SetConfig+0x2bc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d125      	bne.n	8004a36 <UART_SetConfig+0x1aa>
 80049ea:	4b55      	ldr	r3, [pc, #340]	; (8004b40 <UART_SetConfig+0x2b4>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049f4:	2b30      	cmp	r3, #48	; 0x30
 80049f6:	d016      	beq.n	8004a26 <UART_SetConfig+0x19a>
 80049f8:	2b30      	cmp	r3, #48	; 0x30
 80049fa:	d818      	bhi.n	8004a2e <UART_SetConfig+0x1a2>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d00a      	beq.n	8004a16 <UART_SetConfig+0x18a>
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d814      	bhi.n	8004a2e <UART_SetConfig+0x1a2>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <UART_SetConfig+0x182>
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d008      	beq.n	8004a1e <UART_SetConfig+0x192>
 8004a0c:	e00f      	b.n	8004a2e <UART_SetConfig+0x1a2>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a14:	e042      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a16:	2302      	movs	r3, #2
 8004a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1c:	e03e      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a24:	e03a      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a26:	2308      	movs	r3, #8
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2c:	e036      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a2e:	2310      	movs	r3, #16
 8004a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a34:	e032      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <UART_SetConfig+0x2ac>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d12a      	bne.n	8004a96 <UART_SetConfig+0x20a>
 8004a40:	4b3f      	ldr	r3, [pc, #252]	; (8004b40 <UART_SetConfig+0x2b4>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a4e:	d01a      	beq.n	8004a86 <UART_SetConfig+0x1fa>
 8004a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a54:	d81b      	bhi.n	8004a8e <UART_SetConfig+0x202>
 8004a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5a:	d00c      	beq.n	8004a76 <UART_SetConfig+0x1ea>
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d815      	bhi.n	8004a8e <UART_SetConfig+0x202>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <UART_SetConfig+0x1e2>
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	d008      	beq.n	8004a7e <UART_SetConfig+0x1f2>
 8004a6c:	e00f      	b.n	8004a8e <UART_SetConfig+0x202>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a74:	e012      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a76:	2302      	movs	r3, #2
 8004a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7c:	e00e      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a7e:	2304      	movs	r3, #4
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a84:	e00a      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a86:	2308      	movs	r3, #8
 8004a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8c:	e006      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a8e:	2310      	movs	r3, #16
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a94:	e002      	b.n	8004a9c <UART_SetConfig+0x210>
 8004a96:	2310      	movs	r3, #16
 8004a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <UART_SetConfig+0x2ac>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	f040 808a 	bne.w	8004bbc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d824      	bhi.n	8004afa <UART_SetConfig+0x26e>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x22c>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004aeb 	.word	0x08004aeb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004afb 	.word	0x08004afb
 8004ad8:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe fd38 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
        break;
 8004ae2:	e010      	b.n	8004b06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <UART_SetConfig+0x2c0>)
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e00d      	b.n	8004b06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe fc99 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8004aee:	61f8      	str	r0, [r7, #28]
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8109 	beq.w	8004d20 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d305      	bcc.n	8004b2a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d912      	bls.n	8004b50 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b30:	e0f6      	b.n	8004d20 <UART_SetConfig+0x494>
 8004b32:	bf00      	nop
 8004b34:	efff69f3 	.word	0xefff69f3
 8004b38:	40008000 	.word	0x40008000
 8004b3c:	40013800 	.word	0x40013800
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40004400 	.word	0x40004400
 8004b48:	40004800 	.word	0x40004800
 8004b4c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2200      	movs	r2, #0
 8004b54:	461c      	mov	r4, r3
 8004b56:	4615      	mov	r5, r2
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	022b      	lsls	r3, r5, #8
 8004b62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b66:	0222      	lsls	r2, r4, #8
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	6849      	ldr	r1, [r1, #4]
 8004b6c:	0849      	lsrs	r1, r1, #1
 8004b6e:	2000      	movs	r0, #0
 8004b70:	4688      	mov	r8, r1
 8004b72:	4681      	mov	r9, r0
 8004b74:	eb12 0a08 	adds.w	sl, r2, r8
 8004b78:	eb43 0b09 	adc.w	fp, r3, r9
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	f7fb fb1d 	bl	80001cc <__aeabi_uldivmod>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4613      	mov	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba0:	d308      	bcc.n	8004bb4 <UART_SetConfig+0x328>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba8:	d204      	bcs.n	8004bb4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	e0b5      	b.n	8004d20 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bba:	e0b1      	b.n	8004d20 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc4:	d15d      	bne.n	8004c82 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004bc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d827      	bhi.n	8004c1e <UART_SetConfig+0x392>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0x348>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004c1f 	.word	0x08004c1f
 8004be4:	08004c0f 	.word	0x08004c0f
 8004be8:	08004c1f 	.word	0x08004c1f
 8004bec:	08004c1f 	.word	0x08004c1f
 8004bf0:	08004c1f 	.word	0x08004c1f
 8004bf4:	08004c17 	.word	0x08004c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f7fe fcaa 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004bfc:	61f8      	str	r0, [r7, #28]
        break;
 8004bfe:	e014      	b.n	8004c2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7fe fcbc 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004c04:	61f8      	str	r0, [r7, #28]
        break;
 8004c06:	e010      	b.n	8004c2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c08:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <UART_SetConfig+0x4b0>)
 8004c0a:	61fb      	str	r3, [r7, #28]
        break;
 8004c0c:	e00d      	b.n	8004c2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0e:	f7fe fc07 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8004c12:	61f8      	str	r0, [r7, #28]
        break;
 8004c14:	e009      	b.n	8004c2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1a:	61fb      	str	r3, [r7, #28]
        break;
 8004c1c:	e005      	b.n	8004c2a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d077      	beq.n	8004d20 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	005a      	lsls	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	441a      	add	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d916      	bls.n	8004c7a <UART_SetConfig+0x3ee>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d212      	bcs.n	8004c7a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f023 030f 	bic.w	r3, r3, #15
 8004c5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	8afb      	ldrh	r3, [r7, #22]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	8afa      	ldrh	r2, [r7, #22]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e052      	b.n	8004d20 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c80:	e04e      	b.n	8004d20 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d827      	bhi.n	8004cda <UART_SetConfig+0x44e>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x404>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cbd 	.word	0x08004cbd
 8004c98:	08004cc5 	.word	0x08004cc5
 8004c9c:	08004cdb 	.word	0x08004cdb
 8004ca0:	08004ccb 	.word	0x08004ccb
 8004ca4:	08004cdb 	.word	0x08004cdb
 8004ca8:	08004cdb 	.word	0x08004cdb
 8004cac:	08004cdb 	.word	0x08004cdb
 8004cb0:	08004cd3 	.word	0x08004cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fe fc4c 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004cb8:	61f8      	str	r0, [r7, #28]
        break;
 8004cba:	e014      	b.n	8004ce6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cbc:	f7fe fc5e 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004cc0:	61f8      	str	r0, [r7, #28]
        break;
 8004cc2:	e010      	b.n	8004ce6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <UART_SetConfig+0x4b0>)
 8004cc6:	61fb      	str	r3, [r7, #28]
        break;
 8004cc8:	e00d      	b.n	8004ce6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cca:	f7fe fba9 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8004cce:	61f8      	str	r0, [r7, #28]
        break;
 8004cd0:	e009      	b.n	8004ce6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd6:	61fb      	str	r3, [r7, #28]
        break;
 8004cd8:	e005      	b.n	8004ce6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d019      	beq.n	8004d20 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	085a      	lsrs	r2, r3, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b0f      	cmp	r3, #15
 8004d04:	d909      	bls.n	8004d1a <UART_SetConfig+0x48e>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d205      	bcs.n	8004d1a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	e002      	b.n	8004d20 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3728      	adds	r7, #40	; 0x28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3a:	bf00      	nop
 8004d3c:	00f42400 	.word	0x00f42400

08004d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01a      	beq.n	8004e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3e:	d10a      	bne.n	8004e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e94:	f7fc fd82 	bl	800199c <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d10e      	bne.n	8004ec6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f82d 	bl	8004f16 <UART_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e023      	b.n	8004f0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d10e      	bne.n	8004ef2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f817 	bl	8004f16 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00d      	b.n	8004f0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b09c      	sub	sp, #112	; 0x70
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	e0a5      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	f000 80a1 	beq.w	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f32:	f7fc fd33 	bl	800199c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d13e      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e6      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	663b      	str	r3, [r7, #96]	; 0x60
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e067      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d04f      	beq.n	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe2:	d147      	bne.n	8005074 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
 800500e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	66bb      	str	r3, [r7, #104]	; 0x68
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005040:	623a      	str	r2, [r7, #32]
 8005042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	61bb      	str	r3, [r7, #24]
   return(result);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e010      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	429a      	cmp	r2, r3
 8005090:	f43f af4a 	beq.w	8004f28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3770      	adds	r7, #112	; 0x70
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80050a4:	4904      	ldr	r1, [pc, #16]	; (80050b8 <MX_FATFS_Init+0x18>)
 80050a6:	4805      	ldr	r0, [pc, #20]	; (80050bc <MX_FATFS_Init+0x1c>)
 80050a8:	f002 fee8 	bl	8007e7c <FATFS_LinkDriver>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <MX_FATFS_Init+0x20>)
 80050b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050b4:	bf00      	nop
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000464 	.word	0x20000464
 80050bc:	20000018 	.word	0x20000018
 80050c0:	20000460 	.word	0x20000460

080050c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80050c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <USER_initialize+0x24>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80050e4:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <USER_initialize+0x24>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000015 	.word	0x20000015

080050fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <USER_status+0x24>)
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <USER_status+0x24>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000015 	.word	0x20000015

08005124 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005134:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005152:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	603a      	str	r2, [r7, #0]
 800516a:	71fb      	strb	r3, [r7, #7]
 800516c:	460b      	mov	r3, r1
 800516e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
    return res;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <disk_status+0x30>)
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	79fa      	ldrb	r2, [r7, #7]
 800519c:	4905      	ldr	r1, [pc, #20]	; (80051b4 <disk_status+0x30>)
 800519e:	440a      	add	r2, r1
 80051a0:	7a12      	ldrb	r2, [r2, #8]
 80051a2:	4610      	mov	r0, r2
 80051a4:	4798      	blx	r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000690 	.word	0x20000690

080051b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	4a0d      	ldr	r2, [pc, #52]	; (8005200 <disk_initialize+0x48>)
 80051ca:	5cd3      	ldrb	r3, [r2, r3]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d111      	bne.n	80051f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <disk_initialize+0x48>)
 80051d4:	2101      	movs	r1, #1
 80051d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <disk_initialize+0x48>)
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	79fa      	ldrb	r2, [r7, #7]
 80051e6:	4906      	ldr	r1, [pc, #24]	; (8005200 <disk_initialize+0x48>)
 80051e8:	440a      	add	r2, r1
 80051ea:	7a12      	ldrb	r2, [r2, #8]
 80051ec:	4610      	mov	r0, r2
 80051ee:	4798      	blx	r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000690 	.word	0x20000690

08005204 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005204:	b590      	push	{r4, r7, lr}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <disk_read+0x3c>)
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	689c      	ldr	r4, [r3, #8]
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	4a07      	ldr	r2, [pc, #28]	; (8005240 <disk_read+0x3c>)
 8005224:	4413      	add	r3, r2
 8005226:	7a18      	ldrb	r0, [r3, #8]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	47a0      	blx	r4
 8005230:	4603      	mov	r3, r0
 8005232:	75fb      	strb	r3, [r7, #23]
  return res;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd90      	pop	{r4, r7, pc}
 800523e:	bf00      	nop
 8005240:	20000690 	.word	0x20000690

08005244 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <disk_write+0x3c>)
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68dc      	ldr	r4, [r3, #12]
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <disk_write+0x3c>)
 8005264:	4413      	add	r3, r2
 8005266:	7a18      	ldrb	r0, [r3, #8]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	47a0      	blx	r4
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]
  return res;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	20000690 	.word	0x20000690

08005284 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	603a      	str	r2, [r7, #0]
 800528e:	71fb      	strb	r3, [r7, #7]
 8005290:	460b      	mov	r3, r1
 8005292:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <disk_ioctl+0x38>)
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	79fa      	ldrb	r2, [r7, #7]
 80052a2:	4906      	ldr	r1, [pc, #24]	; (80052bc <disk_ioctl+0x38>)
 80052a4:	440a      	add	r2, r1
 80052a6:	7a10      	ldrb	r0, [r2, #8]
 80052a8:	79b9      	ldrb	r1, [r7, #6]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4798      	blx	r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000690 	.word	0x20000690

080052c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	b21a      	sxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	b21b      	sxth	r3, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	b21b      	sxth	r3, r3
 80052e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80052e2:	89fb      	ldrh	r3, [r7, #14]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3303      	adds	r3, #3
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	3202      	adds	r2, #2
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	3201      	adds	r2, #1
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
	return rv;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	887a      	ldrh	r2, [r7, #2]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	887b      	ldrh	r3, [r7, #2]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	0a1b      	lsrs	r3, r3, #8
 8005386:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	1c53      	adds	r3, r2, #1
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	6179      	str	r1, [r7, #20]
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f1      	bne.n	80053de <mem_cpy+0x1a>
	}
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	617a      	str	r2, [r7, #20]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3b01      	subs	r3, #1
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f3      	bne.n	8005416 <mem_set+0x10>
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	61ba      	str	r2, [r7, #24]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	1acb      	subs	r3, r1, r3
 8005468:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3b01      	subs	r3, #1
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <mem_cmp+0x40>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0eb      	beq.n	8005454 <mem_cmp+0x18>

	return r;
 800547c:	697b      	ldr	r3, [r7, #20]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3724      	adds	r7, #36	; 0x24
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005494:	e002      	b.n	800549c <chk_chr+0x12>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3301      	adds	r3, #1
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <chk_chr+0x26>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d1f2      	bne.n	8005496 <chk_chr+0xc>
	return *str;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	781b      	ldrb	r3, [r3, #0]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e029      	b.n	8005528 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <chk_lock+0xb4>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01d      	beq.n	800551e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054e2:	4a24      	ldr	r2, [pc, #144]	; (8005574 <chk_lock+0xb4>)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	4413      	add	r3, r2
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d116      	bne.n	8005522 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <chk_lock+0xb4>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4413      	add	r3, r2
 80054fc:	3304      	adds	r3, #4
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005504:	429a      	cmp	r2, r3
 8005506:	d10c      	bne.n	8005522 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005508:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <chk_lock+0xb4>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4413      	add	r3, r2
 8005510:	3308      	adds	r3, #8
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005518:	429a      	cmp	r2, r3
 800551a:	d102      	bne.n	8005522 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800551c:	e007      	b.n	800552e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800551e:	2301      	movs	r3, #1
 8005520:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d9d2      	bls.n	80054d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d109      	bne.n	8005548 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <chk_lock+0x80>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d101      	bne.n	8005544 <chk_lock+0x84>
 8005540:	2300      	movs	r3, #0
 8005542:	e010      	b.n	8005566 <chk_lock+0xa6>
 8005544:	2312      	movs	r3, #18
 8005546:	e00e      	b.n	8005566 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d108      	bne.n	8005560 <chk_lock+0xa0>
 800554e:	4a09      	ldr	r2, [pc, #36]	; (8005574 <chk_lock+0xb4>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	4413      	add	r3, r2
 8005556:	330c      	adds	r3, #12
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d101      	bne.n	8005564 <chk_lock+0xa4>
 8005560:	2310      	movs	r3, #16
 8005562:	e000      	b.n	8005566 <chk_lock+0xa6>
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000470 	.word	0x20000470

08005578 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	e002      	b.n	800558a <enq_lock+0x12>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3301      	adds	r3, #1
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d806      	bhi.n	800559e <enq_lock+0x26>
 8005590:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <enq_lock+0x40>)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4413      	add	r3, r2
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f2      	bne.n	8005584 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000470 	.word	0x20000470

080055bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e01f      	b.n	800560c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80055cc:	4a41      	ldr	r2, [pc, #260]	; (80056d4 <inc_lock+0x118>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4413      	add	r3, r2
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d113      	bne.n	8005606 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80055de:	4a3d      	ldr	r2, [pc, #244]	; (80056d4 <inc_lock+0x118>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	3304      	adds	r3, #4
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d109      	bne.n	8005606 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80055f2:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <inc_lock+0x118>)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4413      	add	r3, r2
 80055fa:	3308      	adds	r3, #8
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005602:	429a      	cmp	r2, r3
 8005604:	d006      	beq.n	8005614 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d9dc      	bls.n	80055cc <inc_lock+0x10>
 8005612:	e000      	b.n	8005616 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005614:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d132      	bne.n	8005682 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e002      	b.n	8005628 <inc_lock+0x6c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d806      	bhi.n	800563c <inc_lock+0x80>
 800562e:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <inc_lock+0x118>)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	4413      	add	r3, r2
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f2      	bne.n	8005622 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d101      	bne.n	8005646 <inc_lock+0x8a>
 8005642:	2300      	movs	r3, #0
 8005644:	e040      	b.n	80056c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4922      	ldr	r1, [pc, #136]	; (80056d4 <inc_lock+0x118>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	440b      	add	r3, r1
 8005652:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	491e      	ldr	r1, [pc, #120]	; (80056d4 <inc_lock+0x118>)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	440b      	add	r3, r1
 8005660:	3304      	adds	r3, #4
 8005662:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	491a      	ldr	r1, [pc, #104]	; (80056d4 <inc_lock+0x118>)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	440b      	add	r3, r1
 8005670:	3308      	adds	r3, #8
 8005672:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005674:	4a17      	ldr	r2, [pc, #92]	; (80056d4 <inc_lock+0x118>)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	4413      	add	r3, r2
 800567c:	330c      	adds	r3, #12
 800567e:	2200      	movs	r2, #0
 8005680:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <inc_lock+0xe0>
 8005688:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <inc_lock+0x118>)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	4413      	add	r3, r2
 8005690:	330c      	adds	r3, #12
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <inc_lock+0xe0>
 8005698:	2300      	movs	r3, #0
 800569a:	e015      	b.n	80056c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d108      	bne.n	80056b4 <inc_lock+0xf8>
 80056a2:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <inc_lock+0x118>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	4413      	add	r3, r2
 80056aa:	330c      	adds	r3, #12
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	e001      	b.n	80056b8 <inc_lock+0xfc>
 80056b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b8:	4906      	ldr	r1, [pc, #24]	; (80056d4 <inc_lock+0x118>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	440b      	add	r3, r1
 80056c0:	330c      	adds	r3, #12
 80056c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	20000470 	.word	0x20000470

080056d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d825      	bhi.n	8005738 <dec_lock+0x60>
		n = Files[i].ctr;
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <dec_lock+0x74>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	4413      	add	r3, r2
 80056f4:	330c      	adds	r3, #12
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056fa:	89fb      	ldrh	r3, [r7, #14]
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005700:	d101      	bne.n	8005706 <dec_lock+0x2e>
 8005702:	2300      	movs	r3, #0
 8005704:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005706:	89fb      	ldrh	r3, [r7, #14]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <dec_lock+0x3a>
 800570c:	89fb      	ldrh	r3, [r7, #14]
 800570e:	3b01      	subs	r3, #1
 8005710:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005712:	4a0e      	ldr	r2, [pc, #56]	; (800574c <dec_lock+0x74>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	4413      	add	r3, r2
 800571a:	330c      	adds	r3, #12
 800571c:	89fa      	ldrh	r2, [r7, #14]
 800571e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005720:	89fb      	ldrh	r3, [r7, #14]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d105      	bne.n	8005732 <dec_lock+0x5a>
 8005726:	4a09      	ldr	r2, [pc, #36]	; (800574c <dec_lock+0x74>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4413      	add	r3, r2
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	737b      	strb	r3, [r7, #13]
 8005736:	e001      	b.n	800573c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005738:	2302      	movs	r3, #2
 800573a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800573c:	7b7b      	ldrb	r3, [r7, #13]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000470 	.word	0x20000470

08005750 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e010      	b.n	8005780 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800575e:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <clear_lock+0x44>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	4413      	add	r3, r2
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d105      	bne.n	800577a <clear_lock+0x2a>
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <clear_lock+0x44>)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	4413      	add	r3, r2
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d9eb      	bls.n	800575e <clear_lock+0xe>
	}
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	20000470 	.word	0x20000470

08005798 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	78db      	ldrb	r3, [r3, #3]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d034      	beq.n	8005816 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7858      	ldrb	r0, [r3, #1]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057bc:	2301      	movs	r3, #1
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	f7ff fd40 	bl	8005244 <disk_write>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
 80057ce:	e022      	b.n	8005816 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d217      	bcs.n	8005816 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	789b      	ldrb	r3, [r3, #2]
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e010      	b.n	8005810 <sync_window+0x78>
					wsect += fs->fsize;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4413      	add	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7858      	ldrb	r0, [r3, #1]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005802:	2301      	movs	r3, #1
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	f7ff fd1d 	bl	8005244 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3b01      	subs	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d8eb      	bhi.n	80057ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d01b      	beq.n	8005870 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ffad 	bl	8005798 <sync_window>
 800583e:	4603      	mov	r3, r0
 8005840:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	7858      	ldrb	r0, [r3, #1]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005852:	2301      	movs	r3, #1
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	f7ff fcd5 	bl	8005204 <disk_read>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005860:	f04f 33ff 	mov.w	r3, #4294967295
 8005864:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff87 	bl	8005798 <sync_window>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d159      	bne.n	8005948 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d149      	bne.n	8005930 <sync_fs+0xb4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	791b      	ldrb	r3, [r3, #4]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d145      	bne.n	8005930 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	899b      	ldrh	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	2100      	movs	r1, #0
 80058b2:	f7ff fda8 	bl	8005406 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3338      	adds	r3, #56	; 0x38
 80058ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058be:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff fd37 	bl	8005336 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3338      	adds	r3, #56	; 0x38
 80058cc:	4921      	ldr	r1, [pc, #132]	; (8005954 <sync_fs+0xd8>)
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fd4c 	bl	800536c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3338      	adds	r3, #56	; 0x38
 80058d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80058dc:	491e      	ldr	r1, [pc, #120]	; (8005958 <sync_fs+0xdc>)
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fd44 	bl	800536c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3338      	adds	r3, #56	; 0x38
 80058e8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7ff fd3a 	bl	800536c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3338      	adds	r3, #56	; 0x38
 80058fc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7ff fd30 	bl	800536c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7858      	ldrb	r0, [r3, #1]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	2301      	movs	r3, #1
 8005926:	f7ff fc8d 	bl	8005244 <disk_write>
			fs->fsi_flag = 0;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fca3 	bl	8005284 <disk_ioctl>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <sync_fs+0xcc>
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	41615252 	.word	0x41615252
 8005958:	61417272 	.word	0x61417272

0800595c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	3b02      	subs	r3, #2
 800596a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	3b02      	subs	r3, #2
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d301      	bcc.n	800597c <clust2sect+0x20>
 8005978:	2300      	movs	r3, #0
 800597a:	e008      	b.n	800598e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	895b      	ldrh	r3, [r3, #10]
 8005980:	461a      	mov	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	fb03 f202 	mul.w	r2, r3, r2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	4413      	add	r3, r2
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d904      	bls.n	80059ba <get_fat+0x20>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80059ba:	2301      	movs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e0bb      	b.n	8005b38 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	f000 8083 	beq.w	8005ad6 <get_fat+0x13c>
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	f300 80a7 	bgt.w	8005b24 <get_fat+0x18a>
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d002      	beq.n	80059e0 <get_fat+0x46>
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d056      	beq.n	8005a8c <get_fat+0xf2>
 80059de:	e0a1      	b.n	8005b24 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	899b      	ldrh	r3, [r3, #12]
 80059f6:	4619      	mov	r1, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80059fe:	4413      	add	r3, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	6938      	ldr	r0, [r7, #16]
 8005a04:	f7ff ff0c 	bl	8005820 <move_window>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 808d 	bne.w	8005b2a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	60fa      	str	r2, [r7, #12]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	8992      	ldrh	r2, [r2, #12]
 8005a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a1e:	fb01 f202 	mul.w	r2, r1, r2
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	899b      	ldrh	r3, [r3, #12]
 8005a36:	4619      	mov	r1, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a3e:	4413      	add	r3, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	6938      	ldr	r0, [r7, #16]
 8005a44:	f7ff feec 	bl	8005820 <move_window>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d16f      	bne.n	8005b2e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	899b      	ldrh	r3, [r3, #12]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5a:	fb01 f202 	mul.w	r2, r1, r2
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <get_fat+0xe8>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	e002      	b.n	8005a88 <get_fat+0xee>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a88:	617b      	str	r3, [r7, #20]
			break;
 8005a8a:	e055      	b.n	8005b38 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	899b      	ldrh	r3, [r3, #12]
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6938      	ldr	r0, [r7, #16]
 8005aa6:	f7ff febb 	bl	8005820 <move_window>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d140      	bne.n	8005b32 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	8992      	ldrh	r2, [r2, #12]
 8005abe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ac2:	fb00 f202 	mul.w	r2, r0, r2
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	440b      	add	r3, r1
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fbf8 	bl	80052c0 <ld_word>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	617b      	str	r3, [r7, #20]
			break;
 8005ad4:	e030      	b.n	8005b38 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	899b      	ldrh	r3, [r3, #12]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aea:	4413      	add	r3, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	6938      	ldr	r0, [r7, #16]
 8005af0:	f7ff fe96 	bl	8005820 <move_window>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d11d      	bne.n	8005b36 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	8992      	ldrh	r2, [r2, #12]
 8005b08:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b0c:	fb00 f202 	mul.w	r2, r0, r2
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	440b      	add	r3, r1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fbeb 	bl	80052f0 <ld_dword>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b20:	617b      	str	r3, [r7, #20]
			break;
 8005b22:	e009      	b.n	8005b38 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005b24:	2301      	movs	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e006      	b.n	8005b38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b36:	bf00      	nop
		}
	}

	return val;
 8005b38:	697b      	ldr	r3, [r7, #20]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005b42:	b590      	push	{r4, r7, lr}
 8005b44:	b089      	sub	sp, #36	; 0x24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f240 8102 	bls.w	8005d5e <put_fat+0x21c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	f080 80fc 	bcs.w	8005d5e <put_fat+0x21c>
		switch (fs->fs_type) {
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	f000 80b6 	beq.w	8005cdc <put_fat+0x19a>
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	f300 80fd 	bgt.w	8005d70 <put_fat+0x22e>
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d003      	beq.n	8005b82 <put_fat+0x40>
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	f000 8083 	beq.w	8005c86 <put_fat+0x144>
 8005b80:	e0f6      	b.n	8005d70 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	899b      	ldrh	r3, [r3, #12]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fe3b 	bl	8005820 <move_window>
 8005baa:	4603      	mov	r3, r0
 8005bac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 80d6 	bne.w	8005d62 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	61ba      	str	r2, [r7, #24]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	8992      	ldrh	r2, [r2, #12]
 8005bc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bca:	fb00 f202 	mul.w	r2, r0, r2
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <put_fat+0xb8>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	b25a      	sxtb	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	b25b      	sxtb	r3, r3
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e001      	b.n	8005bfe <put_fat+0xbc>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	899b      	ldrh	r3, [r3, #12]
 8005c10:	4619      	mov	r1, r3
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c18:	4413      	add	r3, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff fdff 	bl	8005820 <move_window>
 8005c22:	4603      	mov	r3, r0
 8005c24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c26:	7ffb      	ldrb	r3, [r7, #31]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 809c 	bne.w	8005d66 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	899b      	ldrh	r3, [r3, #12]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c40:	fb00 f202 	mul.w	r2, r0, r2
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	440b      	add	r3, r1
 8005c48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <put_fat+0x11a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e00e      	b.n	8005c7a <put_fat+0x138>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	b25a      	sxtb	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b25b      	sxtb	r3, r3
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	b25b      	sxtb	r3, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	70da      	strb	r2, [r3, #3]
			break;
 8005c84:	e074      	b.n	8005d70 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	899b      	ldrh	r3, [r3, #12]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	4619      	mov	r1, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fdbe 	bl	8005820 <move_window>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ca8:	7ffb      	ldrb	r3, [r7, #31]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d15d      	bne.n	8005d6a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	8992      	ldrh	r2, [r2, #12]
 8005cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc0:	fb00 f202 	mul.w	r2, r0, r2
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fb31 	bl	8005336 <st_word>
			fs->wflag = 1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	70da      	strb	r2, [r3, #3]
			break;
 8005cda:	e049      	b.n	8005d70 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	899b      	ldrh	r3, [r3, #12]
 8005ce4:	089b      	lsrs	r3, r3, #2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	4619      	mov	r1, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff fd93 	bl	8005820 <move_window>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d134      	bne.n	8005d6e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	8992      	ldrh	r2, [r2, #12]
 8005d18:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d1c:	fb00 f202 	mul.w	r2, r0, r2
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	440b      	add	r3, r1
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fae3 	bl	80052f0 <ld_dword>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d30:	4323      	orrs	r3, r4
 8005d32:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	8992      	ldrh	r2, [r2, #12]
 8005d42:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d46:	fb00 f202 	mul.w	r2, r0, r2
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fb0b 	bl	800536c <st_dword>
			fs->wflag = 1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	70da      	strb	r2, [r3, #3]
			break;
 8005d5c:	e008      	b.n	8005d70 <put_fat+0x22e>
		}
	}
 8005d5e:	bf00      	nop
 8005d60:	e006      	b.n	8005d70 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005d62:	bf00      	nop
 8005d64:	e004      	b.n	8005d70 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005d6e:	bf00      	nop
	return res;
 8005d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3724      	adds	r7, #36	; 0x24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd90      	pop	{r4, r7, pc}

08005d7a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b088      	sub	sp, #32
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d904      	bls.n	8005da0 <remove_chain+0x26>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d301      	bcc.n	8005da4 <remove_chain+0x2a>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e04b      	b.n	8005e3c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f7ff fec6 	bl	8005b42 <put_fat>
 8005db6:	4603      	mov	r3, r0
 8005db8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <remove_chain+0x4a>
 8005dc0:	7ffb      	ldrb	r3, [r7, #31]
 8005dc2:	e03b      	b.n	8005e3c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fde7 	bl	800599a <get_fat>
 8005dcc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d031      	beq.n	8005e38 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <remove_chain+0x64>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e02e      	b.n	8005e3c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d101      	bne.n	8005dea <remove_chain+0x70>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e028      	b.n	8005e3c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005dea:	2200      	movs	r2, #0
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	69b8      	ldr	r0, [r7, #24]
 8005df0:	f7ff fea7 	bl	8005b42 <put_fat>
 8005df4:	4603      	mov	r3, r0
 8005df6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <remove_chain+0x88>
 8005dfe:	7ffb      	ldrb	r3, [r7, #31]
 8005e00:	e01c      	b.n	8005e3c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	3b02      	subs	r3, #2
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d20b      	bcs.n	8005e28 <remove_chain+0xae>
			fs->free_clst++;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d3c6      	bcc.n	8005dc4 <remove_chain+0x4a>
 8005e36:	e000      	b.n	8005e3a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005e38:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10d      	bne.n	8005e76 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <create_chain+0x2c>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d31b      	bcc.n	8005ea8 <create_chain+0x64>
 8005e70:	2301      	movs	r3, #1
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	e018      	b.n	8005ea8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fd8e 	bl	800599a <get_fat>
 8005e7e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d801      	bhi.n	8005e8a <create_chain+0x46>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e070      	b.n	8005f6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d101      	bne.n	8005e96 <create_chain+0x52>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	e06a      	b.n	8005f6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d201      	bcs.n	8005ea4 <create_chain+0x60>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	e063      	b.n	8005f6c <create_chain+0x128>
		scl = clst;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d307      	bcc.n	8005ecc <create_chain+0x88>
				ncl = 2;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d901      	bls.n	8005ecc <create_chain+0x88>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e04f      	b.n	8005f6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fd63 	bl	800599a <get_fat>
 8005ed4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00e      	beq.n	8005efa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d003      	beq.n	8005eea <create_chain+0xa6>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d101      	bne.n	8005eee <create_chain+0xaa>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	e03e      	b.n	8005f6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d1da      	bne.n	8005eac <create_chain+0x68>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e038      	b.n	8005f6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005efa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	6938      	ldr	r0, [r7, #16]
 8005f04:	f7ff fe1d 	bl	8005b42 <put_fat>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <create_chain+0xe2>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d006      	beq.n	8005f26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6938      	ldr	r0, [r7, #16]
 8005f1e:	f7ff fe10 	bl	8005b42 <put_fat>
 8005f22:	4603      	mov	r3, r0
 8005f24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d116      	bne.n	8005f5a <create_chain+0x116>
		fs->last_clst = ncl;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	3b02      	subs	r3, #2
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d804      	bhi.n	8005f4a <create_chain+0x106>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	791b      	ldrb	r3, [r3, #4]
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	711a      	strb	r2, [r3, #4]
 8005f58:	e007      	b.n	8005f6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d102      	bne.n	8005f66 <create_chain+0x122>
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	e000      	b.n	8005f68 <create_chain+0x124>
 8005f66:	2301      	movs	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	3304      	adds	r3, #4
 8005f8a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	899b      	ldrh	r3, [r3, #12]
 8005f90:	461a      	mov	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	8952      	ldrh	r2, [r2, #10]
 8005f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1d1a      	adds	r2, r3, #4
 8005fa6:	613a      	str	r2, [r7, #16]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <clmt_clust+0x42>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e010      	b.n	8005fd8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d307      	bcc.n	8005fce <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fcc:	e7e9      	b.n	8005fa2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005fce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ffa:	d204      	bcs.n	8006006 <dir_sdi+0x22>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006006:	2302      	movs	r3, #2
 8006008:	e071      	b.n	80060ee <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <dir_sdi+0x46>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d902      	bls.n	800602a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10c      	bne.n	800604a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	8912      	ldrh	r2, [r2, #8]
 8006038:	4293      	cmp	r3, r2
 800603a:	d301      	bcc.n	8006040 <dir_sdi+0x5c>
 800603c:	2302      	movs	r3, #2
 800603e:	e056      	b.n	80060ee <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	61da      	str	r2, [r3, #28]
 8006048:	e02d      	b.n	80060a6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	461a      	mov	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	899b      	ldrh	r3, [r3, #12]
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800605a:	e019      	b.n	8006090 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fc9a 	bl	800599a <get_fat>
 8006066:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d101      	bne.n	8006074 <dir_sdi+0x90>
 8006070:	2301      	movs	r3, #1
 8006072:	e03c      	b.n	80060ee <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d904      	bls.n	8006084 <dir_sdi+0xa0>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	429a      	cmp	r2, r3
 8006082:	d301      	bcc.n	8006088 <dir_sdi+0xa4>
 8006084:	2302      	movs	r3, #2
 8006086:	e032      	b.n	80060ee <dir_sdi+0x10a>
			ofs -= csz;
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	429a      	cmp	r2, r3
 8006096:	d2e1      	bcs.n	800605c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	6938      	ldr	r0, [r7, #16]
 800609c:	f7ff fc5e 	bl	800595c <clust2sect>
 80060a0:	4602      	mov	r2, r0
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <dir_sdi+0xd4>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e01a      	b.n	80060ee <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	899b      	ldrh	r3, [r3, #12]
 80060c0:	4619      	mov	r1, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	899b      	ldrh	r3, [r3, #12]
 80060d8:	461a      	mov	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80060e0:	fb00 f202 	mul.w	r2, r0, r2
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	18ca      	adds	r2, r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	3320      	adds	r3, #32
 800610c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <dir_next+0x28>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800611c:	d301      	bcc.n	8006122 <dir_next+0x2c>
 800611e:	2304      	movs	r3, #4
 8006120:	e0bb      	b.n	800629a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	899b      	ldrh	r3, [r3, #12]
 8006126:	461a      	mov	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	fbb3 f1f2 	udiv	r1, r3, r2
 800612e:	fb01 f202 	mul.w	r2, r1, r2
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 809d 	bne.w	8006274 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	8912      	ldrh	r2, [r2, #8]
 8006154:	4293      	cmp	r3, r2
 8006156:	f0c0 808d 	bcc.w	8006274 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	61da      	str	r2, [r3, #28]
 8006160:	2304      	movs	r3, #4
 8006162:	e09a      	b.n	800629a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	899b      	ldrh	r3, [r3, #12]
 8006168:	461a      	mov	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	8952      	ldrh	r2, [r2, #10]
 8006174:	3a01      	subs	r2, #1
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d17b      	bne.n	8006274 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7ff fc08 	bl	800599a <get_fat>
 800618a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d801      	bhi.n	8006196 <dir_next+0xa0>
 8006192:	2302      	movs	r3, #2
 8006194:	e081      	b.n	800629a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d101      	bne.n	80061a2 <dir_next+0xac>
 800619e:	2301      	movs	r3, #1
 80061a0:	e07b      	b.n	800629a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d359      	bcc.n	8006260 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	61da      	str	r2, [r3, #28]
 80061b8:	2304      	movs	r3, #4
 80061ba:	e06e      	b.n	800629a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7ff fe3d 	bl	8005e44 <create_chain>
 80061ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <dir_next+0xe0>
 80061d2:	2307      	movs	r3, #7
 80061d4:	e061      	b.n	800629a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <dir_next+0xea>
 80061dc:	2302      	movs	r3, #2
 80061de:	e05c      	b.n	800629a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d101      	bne.n	80061ec <dir_next+0xf6>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e056      	b.n	800629a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fad3 	bl	8005798 <sync_window>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <dir_next+0x106>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e04e      	b.n	800629a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	899b      	ldrh	r3, [r3, #12]
 8006206:	461a      	mov	r2, r3
 8006208:	2100      	movs	r1, #0
 800620a:	f7ff f8fc 	bl	8005406 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff fba1 	bl	800595c <clust2sect>
 800621a:	4602      	mov	r2, r0
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	635a      	str	r2, [r3, #52]	; 0x34
 8006220:	e012      	b.n	8006248 <dir_next+0x152>
						fs->wflag = 1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fab5 	bl	8005798 <sync_window>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <dir_next+0x142>
 8006234:	2301      	movs	r3, #1
 8006236:	e030      	b.n	800629a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	3301      	adds	r3, #1
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	635a      	str	r2, [r3, #52]	; 0x34
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	895b      	ldrh	r3, [r3, #10]
 800624c:	461a      	mov	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4293      	cmp	r3, r2
 8006252:	d3e6      	bcc.n	8006222 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fb77 	bl	800595c <clust2sect>
 800626e:	4602      	mov	r2, r0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	899b      	ldrh	r3, [r3, #12]
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	fbb3 f0f2 	udiv	r0, r3, r2
 800628c:	fb00 f202 	mul.w	r2, r0, r2
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	18ca      	adds	r2, r1, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80062b2:	2100      	movs	r1, #0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fe95 	bl	8005fe4 <dir_sdi>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d12b      	bne.n	800631c <dir_alloc+0x7a>
		n = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	4619      	mov	r1, r3
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff faa6 	bl	8005820 <move_window>
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d11d      	bne.n	800631a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2be5      	cmp	r3, #229	; 0xe5
 80062e6:	d004      	beq.n	80062f2 <dir_alloc+0x50>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d107      	bne.n	8006302 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	3301      	adds	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d102      	bne.n	8006306 <dir_alloc+0x64>
 8006300:	e00c      	b.n	800631c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006306:	2101      	movs	r1, #1
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fef4 	bl	80060f6 <dir_next>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0d7      	beq.n	80062c8 <dir_alloc+0x26>
 8006318:	e000      	b.n	800631c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800631a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	2b04      	cmp	r3, #4
 8006320:	d101      	bne.n	8006326 <dir_alloc+0x84>
 8006322:	2307      	movs	r3, #7
 8006324:	75fb      	strb	r3, [r7, #23]
	return res;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	331a      	adds	r3, #26
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe ffbe 	bl	80052c0 <ld_word>
 8006344:	4603      	mov	r3, r0
 8006346:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d109      	bne.n	8006364 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe ffb3 	bl	80052c0 <ld_word>
 800635a:	4603      	mov	r3, r0
 800635c:	041b      	lsls	r3, r3, #16
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006364:	68fb      	ldr	r3, [r7, #12]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	331a      	adds	r3, #26
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	b292      	uxth	r2, r2
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe ffd6 	bl	8005336 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d109      	bne.n	80063a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f103 0214 	add.w	r2, r3, #20
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	b29b      	uxth	r3, r3
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe ffc8 	bl	8005336 <st_word>
	}
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	331a      	adds	r3, #26
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe ff7e 	bl	80052c0 <ld_word>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <cmp_lfn+0x1e>
 80063ca:	2300      	movs	r3, #0
 80063cc:	e059      	b.n	8006482 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	4613      	mov	r3, r2
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063e4:	2301      	movs	r3, #1
 80063e6:	81fb      	strh	r3, [r7, #14]
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	e033      	b.n	8006456 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80063ee:	4a27      	ldr	r2, [pc, #156]	; (800648c <cmp_lfn+0xdc>)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4413      	add	r3, r2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe ff5f 	bl	80052c0 <ld_word>
 8006402:	4603      	mov	r3, r0
 8006404:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006406:	89fb      	ldrh	r3, [r7, #14]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01a      	beq.n	8006442 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2bfe      	cmp	r3, #254	; 0xfe
 8006410:	d812      	bhi.n	8006438 <cmp_lfn+0x88>
 8006412:	89bb      	ldrh	r3, [r7, #12]
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fd7d 	bl	8007f14 <ff_wtoupper>
 800641a:	4603      	mov	r3, r0
 800641c:	461c      	mov	r4, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	617a      	str	r2, [r7, #20]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fd71 	bl	8007f14 <ff_wtoupper>
 8006432:	4603      	mov	r3, r0
 8006434:	429c      	cmp	r4, r3
 8006436:	d001      	beq.n	800643c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006438:	2300      	movs	r3, #0
 800643a:	e022      	b.n	8006482 <cmp_lfn+0xd2>
			}
			wc = uc;
 800643c:	89bb      	ldrh	r3, [r7, #12]
 800643e:	81fb      	strh	r3, [r7, #14]
 8006440:	e006      	b.n	8006450 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006442:	89bb      	ldrh	r3, [r7, #12]
 8006444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006448:	4293      	cmp	r3, r2
 800644a:	d001      	beq.n	8006450 <cmp_lfn+0xa0>
 800644c:	2300      	movs	r3, #0
 800644e:	e018      	b.n	8006482 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3301      	adds	r3, #1
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d9c8      	bls.n	80063ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <cmp_lfn+0xd0>
 8006468:	89fb      	ldrh	r3, [r7, #14]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <cmp_lfn+0xd0>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <cmp_lfn+0xd0>
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006480:	2301      	movs	r3, #1
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}
 800648a:	bf00      	nop
 800648c:	08008f70 	.word	0x08008f70

08006490 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4611      	mov	r1, r2
 800649c:	461a      	mov	r2, r3
 800649e:	460b      	mov	r3, r1
 80064a0:	71fb      	strb	r3, [r7, #7]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	330d      	adds	r3, #13
 80064aa:	79ba      	ldrb	r2, [r7, #6]
 80064ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	330b      	adds	r3, #11
 80064b2:	220f      	movs	r2, #15
 80064b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	330c      	adds	r3, #12
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	331a      	adds	r3, #26
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe ff36 	bl	8005336 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	1e5a      	subs	r2, r3, #1
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	82fb      	strh	r3, [r7, #22]
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80064e2:	8afb      	ldrh	r3, [r7, #22]
 80064e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d007      	beq.n	80064fc <put_lfn+0x6c>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	61fa      	str	r2, [r7, #28]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80064fc:	4a17      	ldr	r2, [pc, #92]	; (800655c <put_lfn+0xcc>)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	4413      	add	r3, r2
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	8afa      	ldrh	r2, [r7, #22]
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe ff11 	bl	8005336 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006514:	8afb      	ldrh	r3, [r7, #22]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <put_lfn+0x90>
 800651a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800651e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	3301      	adds	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d9da      	bls.n	80064e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800652c:	8afb      	ldrh	r3, [r7, #22]
 800652e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006532:	4293      	cmp	r3, r2
 8006534:	d006      	beq.n	8006544 <put_lfn+0xb4>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <put_lfn+0xbc>
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	79fa      	ldrb	r2, [r7, #7]
 8006550:	701a      	strb	r2, [r3, #0]
}
 8006552:	bf00      	nop
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	08008f70 	.word	0x08008f70

08006560 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800656e:	220b      	movs	r2, #11
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7fe ff26 	bl	80053c4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b05      	cmp	r3, #5
 800657c:	d92b      	bls.n	80065d6 <gen_numname+0x76>
		sr = seq;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006582:	e022      	b.n	80065ca <gen_numname+0x6a>
			wc = *lfn++;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800658e:	2300      	movs	r3, #0
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
 8006592:	e017      	b.n	80065c4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	005a      	lsls	r2, r3, #1
 8006598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80065a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <gen_numname+0x5e>
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80065b8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80065bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	3301      	adds	r3, #1
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d9e4      	bls.n	8006594 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1d8      	bne.n	8006584 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80065d6:	2307      	movs	r3, #7
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3330      	adds	r3, #48	; 0x30
 80065e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80065ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ee:	2b39      	cmp	r3, #57	; 0x39
 80065f0:	d904      	bls.n	80065fc <gen_numname+0x9c>
 80065f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f6:	3307      	adds	r3, #7
 80065f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	1e5a      	subs	r2, r3, #1
 8006600:	62ba      	str	r2, [r7, #40]	; 0x28
 8006602:	3330      	adds	r3, #48	; 0x30
 8006604:	443b      	add	r3, r7
 8006606:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800660a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1df      	bne.n	80065da <gen_numname+0x7a>
	ns[i] = '~';
 800661a:	f107 0214 	add.w	r2, r7, #20
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	4413      	add	r3, r2
 8006622:	227e      	movs	r2, #126	; 0x7e
 8006624:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
 800662a:	e002      	b.n	8006632 <gen_numname+0xd2>
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	3301      	adds	r3, #1
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	429a      	cmp	r2, r3
 8006638:	d205      	bcs.n	8006646 <gen_numname+0xe6>
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b20      	cmp	r3, #32
 8006644:	d1f2      	bne.n	800662c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	2b07      	cmp	r3, #7
 800664a:	d807      	bhi.n	800665c <gen_numname+0xfc>
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	62ba      	str	r2, [r7, #40]	; 0x28
 8006652:	3330      	adds	r3, #48	; 0x30
 8006654:	443b      	add	r3, r7
 8006656:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800665a:	e000      	b.n	800665e <gen_numname+0xfe>
 800665c:	2120      	movs	r1, #32
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	627a      	str	r2, [r7, #36]	; 0x24
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	460a      	mov	r2, r1
 800666a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	2b07      	cmp	r3, #7
 8006670:	d9e9      	bls.n	8006646 <gen_numname+0xe6>
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	3730      	adds	r7, #48	; 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006688:	230b      	movs	r3, #11
 800668a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	0852      	lsrs	r2, r2, #1
 8006692:	01db      	lsls	r3, r3, #7
 8006694:	4313      	orrs	r3, r2
 8006696:	b2da      	uxtb	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	6079      	str	r1, [r7, #4]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ed      	bne.n	800668c <sum_sfn+0x10>
	return sum;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fc88 	bl	8005fe4 <dir_sdi>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <dir_find+0x24>
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	e0a9      	b.n	8006836 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	753b      	strb	r3, [r7, #20]
 80066e6:	7d3b      	ldrb	r3, [r7, #20]
 80066e8:	757b      	strb	r3, [r7, #21]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f04f 32ff 	mov.w	r2, #4294967295
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6938      	ldr	r0, [r7, #16]
 80066fa:	f7ff f891 	bl	8005820 <move_window>
 80066fe:	4603      	mov	r3, r0
 8006700:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8090 	bne.w	800682a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <dir_find+0x60>
 8006718:	2304      	movs	r3, #4
 800671a:	75fb      	strb	r3, [r7, #23]
 800671c:	e08a      	b.n	8006834 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	330b      	adds	r3, #11
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7bfa      	ldrb	r2, [r7, #15]
 8006730:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	2be5      	cmp	r3, #229	; 0xe5
 8006736:	d007      	beq.n	8006748 <dir_find+0x8a>
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <dir_find+0x98>
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b0f      	cmp	r3, #15
 8006746:	d006      	beq.n	8006756 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006748:	23ff      	movs	r3, #255	; 0xff
 800674a:	757b      	strb	r3, [r7, #21]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
 8006754:	e05e      	b.n	8006814 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d136      	bne.n	80067ca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d154      	bne.n	8006814 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800676a:	7dbb      	ldrb	r3, [r7, #22]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	7b5b      	ldrb	r3, [r3, #13]
 800677a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800677c:	7dbb      	ldrb	r3, [r7, #22]
 800677e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006782:	75bb      	strb	r3, [r7, #22]
 8006784:	7dbb      	ldrb	r3, [r7, #22]
 8006786:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006790:	7dba      	ldrb	r2, [r7, #22]
 8006792:	7d7b      	ldrb	r3, [r7, #21]
 8006794:	429a      	cmp	r2, r3
 8006796:	d115      	bne.n	80067c4 <dir_find+0x106>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	330d      	adds	r3, #13
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	7d3a      	ldrb	r2, [r7, #20]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d10e      	bne.n	80067c4 <dir_find+0x106>
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7ff fdfd 	bl	80063b0 <cmp_lfn>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <dir_find+0x106>
 80067bc:	7d7b      	ldrb	r3, [r7, #21]
 80067be:	3b01      	subs	r3, #1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e000      	b.n	80067c6 <dir_find+0x108>
 80067c4:	23ff      	movs	r3, #255	; 0xff
 80067c6:	757b      	strb	r3, [r7, #21]
 80067c8:	e024      	b.n	8006814 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80067ca:	7d7b      	ldrb	r3, [r7, #21]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <dir_find+0x126>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff51 	bl	800667c <sum_sfn>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	7d3b      	ldrb	r3, [r7, #20]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d024      	beq.n	800682e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <dir_find+0x14a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a18      	ldr	r0, [r3, #32]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3324      	adds	r3, #36	; 0x24
 80067fa:	220b      	movs	r2, #11
 80067fc:	4619      	mov	r1, r3
 80067fe:	f7fe fe1d 	bl	800543c <mem_cmp>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d014      	beq.n	8006832 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006808:	23ff      	movs	r3, #255	; 0xff
 800680a:	757b      	strb	r3, [r7, #21]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f04f 32ff 	mov.w	r2, #4294967295
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006814:	2100      	movs	r1, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fc6d 	bl	80060f6 <dir_next>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f43f af65 	beq.w	80066f2 <dir_find+0x34>
 8006828:	e004      	b.n	8006834 <dir_find+0x176>
		if (res != FR_OK) break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006832:	bf00      	nop

	return res;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006854:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <dir_register+0x20>
 800685c:	2306      	movs	r3, #6
 800685e:	e0e0      	b.n	8006a22 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006860:	2300      	movs	r3, #0
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
 8006864:	e002      	b.n	800686c <dir_register+0x2c>
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	3301      	adds	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f4      	bne.n	8006866 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006882:	f107 030c 	add.w	r3, r7, #12
 8006886:	220c      	movs	r2, #12
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fd9b 	bl	80053c4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d032      	beq.n	80068fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80068a0:	2301      	movs	r3, #1
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a4:	e016      	b.n	80068d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	f107 010c 	add.w	r1, r7, #12
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	f7ff fe53 	bl	8006560 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff feff 	bl	80066be <dir_find>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80068c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	3301      	adds	r3, #1
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2b63      	cmp	r3, #99	; 0x63
 80068d8:	d9e5      	bls.n	80068a6 <dir_register+0x66>
 80068da:	e000      	b.n	80068de <dir_register+0x9e>
			if (res != FR_OK) break;
 80068dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	2b64      	cmp	r3, #100	; 0x64
 80068e2:	d101      	bne.n	80068e8 <dir_register+0xa8>
 80068e4:	2307      	movs	r3, #7
 80068e6:	e09c      	b.n	8006a22 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80068e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d002      	beq.n	80068f6 <dir_register+0xb6>
 80068f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f4:	e095      	b.n	8006a22 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80068f6:	7dfa      	ldrb	r2, [r7, #23]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <dir_register+0xd8>
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	330c      	adds	r3, #12
 800690c:	4a47      	ldr	r2, [pc, #284]	; (8006a2c <dir_register+0x1ec>)
 800690e:	fba2 2303 	umull	r2, r3, r2, r3
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	3301      	adds	r3, #1
 8006916:	e000      	b.n	800691a <dir_register+0xda>
 8006918:	2301      	movs	r3, #1
 800691a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800691c:	6a39      	ldr	r1, [r7, #32]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fcbf 	bl	80062a2 <dir_alloc>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800692a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800692e:	2b00      	cmp	r3, #0
 8006930:	d148      	bne.n	80069c4 <dir_register+0x184>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	3b01      	subs	r3, #1
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d042      	beq.n	80069c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	015b      	lsls	r3, r3, #5
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fb4a 	bl	8005fe4 <dir_sdi>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800695a:	2b00      	cmp	r3, #0
 800695c:	d132      	bne.n	80069c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3324      	adds	r3, #36	; 0x24
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fe8a 	bl	800667c <sum_sfn>
 8006968:	4603      	mov	r3, r0
 800696a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	4619      	mov	r1, r3
 8006972:	69f8      	ldr	r0, [r7, #28]
 8006974:	f7fe ff54 	bl	8005820 <move_window>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800697e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11d      	bne.n	80069c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	6918      	ldr	r0, [r3, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a19      	ldr	r1, [r3, #32]
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	7efb      	ldrb	r3, [r7, #27]
 8006994:	f7ff fd7c 	bl	8006490 <put_lfn>
				fs->wflag = 1;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2201      	movs	r2, #1
 800699c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800699e:	2100      	movs	r1, #0
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff fba8 	bl	80060f6 <dir_next>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80069ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d107      	bne.n	80069c4 <dir_register+0x184>
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1d5      	bne.n	800696c <dir_register+0x12c>
 80069c0:	e000      	b.n	80069c4 <dir_register+0x184>
				if (res != FR_OK) break;
 80069c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80069c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d128      	bne.n	8006a1e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	4619      	mov	r1, r3
 80069d2:	69f8      	ldr	r0, [r7, #28]
 80069d4:	f7fe ff24 	bl	8005820 <move_window>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80069de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11b      	bne.n	8006a1e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	2220      	movs	r2, #32
 80069ec:	2100      	movs	r1, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fd09 	bl	8005406 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a18      	ldr	r0, [r3, #32]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	220b      	movs	r2, #11
 80069fe:	4619      	mov	r1, r3
 8006a00:	f7fe fce0 	bl	80053c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	f002 0218 	and.w	r2, r2, #24
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3730      	adds	r7, #48	; 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	4ec4ec4f 	.word	0x4ec4ec4f

08006a30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	613b      	str	r3, [r7, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	61ba      	str	r2, [r7, #24]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a60:	2b1f      	cmp	r3, #31
 8006a62:	d940      	bls.n	8006ae6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a66:	2b2f      	cmp	r3, #47	; 0x2f
 8006a68:	d006      	beq.n	8006a78 <create_name+0x48>
 8006a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a6c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a6e:	d110      	bne.n	8006a92 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006a70:	e002      	b.n	8006a78 <create_name+0x48>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	3301      	adds	r3, #1
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b2f      	cmp	r3, #47	; 0x2f
 8006a82:	d0f6      	beq.n	8006a72 <create_name+0x42>
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	4413      	add	r3, r2
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a8e:	d0f0      	beq.n	8006a72 <create_name+0x42>
			break;
 8006a90:	e02a      	b.n	8006ae8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2bfe      	cmp	r3, #254	; 0xfe
 8006a96:	d901      	bls.n	8006a9c <create_name+0x6c>
 8006a98:	2306      	movs	r3, #6
 8006a9a:	e17d      	b.n	8006d98 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f9f8 	bl	8007e9c <ff_convert>
 8006aac:	4603      	mov	r3, r0
 8006aae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <create_name+0x8a>
 8006ab6:	2306      	movs	r3, #6
 8006ab8:	e16e      	b.n	8006d98 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006abc:	2b7f      	cmp	r3, #127	; 0x7f
 8006abe:	d809      	bhi.n	8006ad4 <create_name+0xa4>
 8006ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	488d      	ldr	r0, [pc, #564]	; (8006cfc <create_name+0x2cc>)
 8006ac6:	f7fe fce0 	bl	800548a <chk_chr>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <create_name+0xa4>
 8006ad0:	2306      	movs	r3, #6
 8006ad2:	e161      	b.n	8006d98 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	617a      	str	r2, [r7, #20]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ae2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006ae4:	e7b4      	b.n	8006a50 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006ae6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	441a      	add	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af4:	2b1f      	cmp	r3, #31
 8006af6:	d801      	bhi.n	8006afc <create_name+0xcc>
 8006af8:	2304      	movs	r3, #4
 8006afa:	e000      	b.n	8006afe <create_name+0xce>
 8006afc:	2300      	movs	r3, #0
 8006afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006b02:	e011      	b.n	8006b28 <create_name+0xf8>
		w = lfn[di - 1];
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d002      	beq.n	8006b22 <create_name+0xf2>
 8006b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b20:	d106      	bne.n	8006b30 <create_name+0x100>
		di--;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1ea      	bne.n	8006b04 <create_name+0xd4>
 8006b2e:	e000      	b.n	8006b32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006b30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <create_name+0x118>
 8006b44:	2306      	movs	r3, #6
 8006b46:	e127      	b.n	8006d98 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3324      	adds	r3, #36	; 0x24
 8006b4c:	220b      	movs	r2, #11
 8006b4e:	2120      	movs	r1, #32
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe fc58 	bl	8005406 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006b56:	2300      	movs	r3, #0
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	e002      	b.n	8006b62 <create_name+0x132>
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d0f5      	beq.n	8006b5c <create_name+0x12c>
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b7c:	d0ee      	beq.n	8006b5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <create_name+0x168>
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	f043 0303 	orr.w	r3, r3, #3
 8006b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006b90:	e002      	b.n	8006b98 <create_name+0x168>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <create_name+0x182>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb0:	d1ef      	bne.n	8006b92 <create_name+0x162>

	i = b = 0; ni = 8;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bb8:	2300      	movs	r3, #0
 8006bba:	623b      	str	r3, [r7, #32]
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	61ba      	str	r2, [r7, #24]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8090 	beq.w	8006cf8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d006      	beq.n	8006bec <create_name+0x1bc>
 8006bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be0:	2b2e      	cmp	r3, #46	; 0x2e
 8006be2:	d10a      	bne.n	8006bfa <create_name+0x1ca>
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d006      	beq.n	8006bfa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf0:	f043 0303 	orr.w	r3, r3, #3
 8006bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bf8:	e07d      	b.n	8006cf6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006bfa:	6a3a      	ldr	r2, [r7, #32]
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d203      	bcs.n	8006c0a <create_name+0x1da>
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d123      	bne.n	8006c52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b0b      	cmp	r3, #11
 8006c0e:	d106      	bne.n	8006c1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c14:	f043 0303 	orr.w	r3, r3, #3
 8006c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c1c:	e075      	b.n	8006d0a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d005      	beq.n	8006c32 <create_name+0x202>
 8006c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c2a:	f043 0303 	orr.w	r3, r3, #3
 8006c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d866      	bhi.n	8006d08 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	2308      	movs	r3, #8
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	230b      	movs	r3, #11
 8006c44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006c46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c50:	e051      	b.n	8006cf6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c54:	2b7f      	cmp	r3, #127	; 0x7f
 8006c56:	d914      	bls.n	8006c82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f91d 	bl	8007e9c <ff_convert>
 8006c62:	4603      	mov	r3, r0
 8006c64:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <create_name+0x246>
 8006c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6e:	3b80      	subs	r3, #128	; 0x80
 8006c70:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <create_name+0x2d0>)
 8006c72:	5cd3      	ldrb	r3, [r2, r3]
 8006c74:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c7a:	f043 0302 	orr.w	r3, r3, #2
 8006c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <create_name+0x268>
 8006c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	481d      	ldr	r0, [pc, #116]	; (8006d04 <create_name+0x2d4>)
 8006c8e:	f7fe fbfc 	bl	800548a <chk_chr>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006c98:	235f      	movs	r3, #95	; 0x5f
 8006c9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca0:	f043 0303 	orr.w	r3, r3, #3
 8006ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ca8:	e01b      	b.n	8006ce2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d909      	bls.n	8006cc4 <create_name+0x294>
 8006cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cb2:	2b5a      	cmp	r3, #90	; 0x5a
 8006cb4:	d806      	bhi.n	8006cc4 <create_name+0x294>
					b |= 2;
 8006cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cba:	f043 0302 	orr.w	r3, r3, #2
 8006cbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cc2:	e00e      	b.n	8006ce2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc6:	2b60      	cmp	r3, #96	; 0x60
 8006cc8:	d90b      	bls.n	8006ce2 <create_name+0x2b2>
 8006cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ccc:	2b7a      	cmp	r3, #122	; 0x7a
 8006cce:	d808      	bhi.n	8006ce2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cde:	3b20      	subs	r3, #32
 8006ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	623a      	str	r2, [r7, #32]
 8006ce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cea:	b2d1      	uxtb	r1, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006cf6:	e763      	b.n	8006bc0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006cf8:	bf00      	nop
 8006cfa:	e006      	b.n	8006d0a <create_name+0x2da>
 8006cfc:	08008104 	.word	0x08008104
 8006d00:	08008ef0 	.word	0x08008ef0
 8006d04:	08008110 	.word	0x08008110
			if (si > di) break;			/* No extension */
 8006d08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d10:	2be5      	cmp	r3, #229	; 0xe5
 8006d12:	d103      	bne.n	8006d1c <create_name+0x2ec>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2205      	movs	r2, #5
 8006d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d104      	bne.n	8006d2c <create_name+0x2fc>
 8006d22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d30:	f003 030c 	and.w	r3, r3, #12
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d005      	beq.n	8006d44 <create_name+0x314>
 8006d38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d105      	bne.n	8006d50 <create_name+0x320>
 8006d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d48:	f043 0302 	orr.w	r3, r3, #2
 8006d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d117      	bne.n	8006d8c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d105      	bne.n	8006d74 <create_name+0x344>
 8006d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6c:	f043 0310 	orr.w	r3, r3, #16
 8006d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d78:	f003 030c 	and.w	r3, r3, #12
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d105      	bne.n	8006d8c <create_name+0x35c>
 8006d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d84:	f043 0308 	orr.w	r3, r3, #8
 8006d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006d96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006db4:	e002      	b.n	8006dbc <follow_path+0x1c>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8006dc2:	d0f8      	beq.n	8006db6 <follow_path+0x16>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8006dca:	d0f4      	beq.n	8006db6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b1f      	cmp	r3, #31
 8006dd8:	d80a      	bhi.n	8006df0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006de2:	2100      	movs	r1, #0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff f8fd 	bl	8005fe4 <dir_sdi>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]
 8006dee:	e048      	b.n	8006e82 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006df0:	463b      	mov	r3, r7
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff fe1b 	bl	8006a30 <create_name>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d139      	bne.n	8006e78 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fc5a 	bl	80066be <dir_find>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d12c      	bne.n	8006e7c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d127      	bne.n	8006e7c <follow_path+0xdc>
 8006e2c:	2305      	movs	r3, #5
 8006e2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e30:	e024      	b.n	8006e7c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d121      	bne.n	8006e80 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	799b      	ldrb	r3, [r3, #6]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e48:	2305      	movs	r3, #5
 8006e4a:	75fb      	strb	r3, [r7, #23]
 8006e4c:	e019      	b.n	8006e82 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	8992      	ldrh	r2, [r2, #12]
 8006e5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e60:	fb00 f202 	mul.w	r2, r0, r2
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	440b      	add	r3, r1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fa60 	bl	8006330 <ld_clust>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e76:	e7bb      	b.n	8006df0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <follow_path+0xe2>
				break;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e80:	bf00      	nop
			}
		}
	}

	return res;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295
 8006e98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d031      	beq.n	8006f06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e002      	b.n	8006eb0 <get_ldnumber+0x24>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3301      	adds	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b1f      	cmp	r3, #31
 8006eb6:	d903      	bls.n	8006ec0 <get_ldnumber+0x34>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b3a      	cmp	r3, #58	; 0x3a
 8006ebe:	d1f4      	bne.n	8006eaa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b3a      	cmp	r3, #58	; 0x3a
 8006ec6:	d11c      	bne.n	8006f02 <get_ldnumber+0x76>
			tp = *path;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	60fa      	str	r2, [r7, #12]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	3b30      	subs	r3, #48	; 0x30
 8006ed8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b09      	cmp	r3, #9
 8006ede:	d80e      	bhi.n	8006efe <get_ldnumber+0x72>
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d10a      	bne.n	8006efe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d107      	bne.n	8006efe <get_ldnumber+0x72>
					vol = (int)i;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	e002      	b.n	8006f08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006f06:	693b      	ldr	r3, [r7, #16]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	70da      	strb	r2, [r3, #3]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fe fc76 	bl	8005820 <move_window>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <check_fs+0x2a>
 8006f3a:	2304      	movs	r3, #4
 8006f3c:	e038      	b.n	8006fb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3338      	adds	r3, #56	; 0x38
 8006f42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f9ba 	bl	80052c0 <ld_word>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <check_fs+0x48>
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e029      	b.n	8006fb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f62:	2be9      	cmp	r3, #233	; 0xe9
 8006f64:	d009      	beq.n	8006f7a <check_fs+0x66>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f6c:	2beb      	cmp	r3, #235	; 0xeb
 8006f6e:	d11e      	bne.n	8006fae <check_fs+0x9a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f76:	2b90      	cmp	r3, #144	; 0x90
 8006f78:	d119      	bne.n	8006fae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3338      	adds	r3, #56	; 0x38
 8006f7e:	3336      	adds	r3, #54	; 0x36
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe f9b5 	bl	80052f0 <ld_dword>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <check_fs+0xa4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d101      	bne.n	8006f96 <check_fs+0x82>
 8006f92:	2300      	movs	r3, #0
 8006f94:	e00c      	b.n	8006fb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3338      	adds	r3, #56	; 0x38
 8006f9a:	3352      	adds	r3, #82	; 0x52
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe f9a7 	bl	80052f0 <ld_dword>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4a05      	ldr	r2, [pc, #20]	; (8006fbc <check_fs+0xa8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d101      	bne.n	8006fae <check_fs+0x9a>
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006fae:	2302      	movs	r3, #2
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	00544146 	.word	0x00544146
 8006fbc:	33544146 	.word	0x33544146

08006fc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b096      	sub	sp, #88	; 0x58
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff59 	bl	8006e8c <get_ldnumber>
 8006fda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	da01      	bge.n	8006fe6 <find_volume+0x26>
 8006fe2:	230b      	movs	r3, #11
 8006fe4:	e265      	b.n	80074b2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fe6:	4a9f      	ldr	r2, [pc, #636]	; (8007264 <find_volume+0x2a4>)
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <find_volume+0x3a>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	e25b      	b.n	80074b2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01a      	beq.n	8007046 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe f8b5 	bl	8005184 <disk_status>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10c      	bne.n	8007046 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <find_volume+0x82>
 8007032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800703e:	230a      	movs	r3, #10
 8007040:	e237      	b.n	80074b2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007042:	2300      	movs	r3, #0
 8007044:	e235      	b.n	80074b2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe f8ad 	bl	80051b8 <disk_initialize>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007070:	2303      	movs	r3, #3
 8007072:	e21e      	b.n	80074b2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <find_volume+0xca>
 800707a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007086:	230a      	movs	r3, #10
 8007088:	e213      	b.n	80074b2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	7858      	ldrb	r0, [r3, #1]
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	330c      	adds	r3, #12
 8007092:	461a      	mov	r2, r3
 8007094:	2102      	movs	r1, #2
 8007096:	f7fe f8f5 	bl	8005284 <disk_ioctl>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <find_volume+0xe4>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e206      	b.n	80074b2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	899b      	ldrh	r3, [r3, #12]
 80070a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ac:	d80d      	bhi.n	80070ca <find_volume+0x10a>
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	899b      	ldrh	r3, [r3, #12]
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b6:	d308      	bcc.n	80070ca <find_volume+0x10a>
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	899b      	ldrh	r3, [r3, #12]
 80070bc:	461a      	mov	r2, r3
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	899b      	ldrh	r3, [r3, #12]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <find_volume+0x10e>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e1f1      	b.n	80074b2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80070d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070d6:	f7ff ff1d 	bl	8006f14 <check_fs>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80070e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d149      	bne.n	800717c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070e8:	2300      	movs	r3, #0
 80070ea:	643b      	str	r3, [r7, #64]	; 0x40
 80070ec:	e01e      	b.n	800712c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80070f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80070fc:	4413      	add	r3, r2
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	3304      	adds	r3, #4
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d006      	beq.n	8007118 <find_volume+0x158>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	3308      	adds	r3, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe f8ee 	bl	80052f0 <ld_dword>
 8007114:	4602      	mov	r2, r0
 8007116:	e000      	b.n	800711a <find_volume+0x15a>
 8007118:	2200      	movs	r2, #0
 800711a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	3358      	adds	r3, #88	; 0x58
 8007120:	443b      	add	r3, r7
 8007122:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007128:	3301      	adds	r3, #1
 800712a:	643b      	str	r3, [r7, #64]	; 0x40
 800712c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712e:	2b03      	cmp	r3, #3
 8007130:	d9dd      	bls.n	80070ee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007132:	2300      	movs	r3, #0
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <find_volume+0x182>
 800713c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800713e:	3b01      	subs	r3, #1
 8007140:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	3358      	adds	r3, #88	; 0x58
 8007148:	443b      	add	r3, r7
 800714a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800714e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <find_volume+0x1a2>
 8007156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800715a:	f7ff fedb 	bl	8006f14 <check_fs>
 800715e:	4603      	mov	r3, r0
 8007160:	e000      	b.n	8007164 <find_volume+0x1a4>
 8007162:	2303      	movs	r3, #3
 8007164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800716c:	2b01      	cmp	r3, #1
 800716e:	d905      	bls.n	800717c <find_volume+0x1bc>
 8007170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007172:	3301      	adds	r3, #1
 8007174:	643b      	str	r3, [r7, #64]	; 0x40
 8007176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007178:	2b03      	cmp	r3, #3
 800717a:	d9e2      	bls.n	8007142 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800717c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007180:	2b04      	cmp	r3, #4
 8007182:	d101      	bne.n	8007188 <find_volume+0x1c8>
 8007184:	2301      	movs	r3, #1
 8007186:	e194      	b.n	80074b2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800718c:	2b01      	cmp	r3, #1
 800718e:	d901      	bls.n	8007194 <find_volume+0x1d4>
 8007190:	230d      	movs	r3, #13
 8007192:	e18e      	b.n	80074b2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	3338      	adds	r3, #56	; 0x38
 8007198:	330b      	adds	r3, #11
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe f890 	bl	80052c0 <ld_word>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	899b      	ldrh	r3, [r3, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d001      	beq.n	80071b0 <find_volume+0x1f0>
 80071ac:	230d      	movs	r3, #13
 80071ae:	e180      	b.n	80074b2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	3338      	adds	r3, #56	; 0x38
 80071b4:	3316      	adds	r3, #22
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe f882 	bl	80052c0 <ld_word>
 80071bc:	4603      	mov	r3, r0
 80071be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <find_volume+0x214>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	3338      	adds	r3, #56	; 0x38
 80071ca:	3324      	adds	r3, #36	; 0x24
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe f88f 	bl	80052f0 <ld_dword>
 80071d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	789b      	ldrb	r3, [r3, #2]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d005      	beq.n	80071f8 <find_volume+0x238>
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	789b      	ldrb	r3, [r3, #2]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d001      	beq.n	80071f8 <find_volume+0x238>
 80071f4:	230d      	movs	r3, #13
 80071f6:	e15c      	b.n	80074b2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	789b      	ldrb	r3, [r3, #2]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800720c:	b29a      	uxth	r2, r3
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	895b      	ldrh	r3, [r3, #10]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <find_volume+0x26c>
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	461a      	mov	r2, r3
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	895b      	ldrh	r3, [r3, #10]
 8007224:	3b01      	subs	r3, #1
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <find_volume+0x270>
 800722c:	230d      	movs	r3, #13
 800722e:	e140      	b.n	80074b2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	3338      	adds	r3, #56	; 0x38
 8007234:	3311      	adds	r3, #17
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe f842 	bl	80052c0 <ld_word>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724a:	8992      	ldrh	r2, [r2, #12]
 800724c:	0952      	lsrs	r2, r2, #5
 800724e:	b292      	uxth	r2, r2
 8007250:	fbb3 f1f2 	udiv	r1, r3, r2
 8007254:	fb01 f202 	mul.w	r2, r1, r2
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <find_volume+0x2a8>
 8007260:	230d      	movs	r3, #13
 8007262:	e126      	b.n	80074b2 <find_volume+0x4f2>
 8007264:	20000468 	.word	0x20000468

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	3338      	adds	r3, #56	; 0x38
 800726c:	3313      	adds	r3, #19
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe f826 	bl	80052c0 <ld_word>
 8007274:	4603      	mov	r3, r0
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <find_volume+0x2cc>
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	3338      	adds	r3, #56	; 0x38
 8007282:	3320      	adds	r3, #32
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe f833 	bl	80052f0 <ld_dword>
 800728a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	3338      	adds	r3, #56	; 0x38
 8007290:	330e      	adds	r3, #14
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe f814 	bl	80052c0 <ld_word>
 8007298:	4603      	mov	r3, r0
 800729a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800729c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <find_volume+0x2e6>
 80072a2:	230d      	movs	r3, #13
 80072a4:	e105      	b.n	80074b2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80072a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072aa:	4413      	add	r3, r2
 80072ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ae:	8911      	ldrh	r1, [r2, #8]
 80072b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b2:	8992      	ldrh	r2, [r2, #12]
 80072b4:	0952      	lsrs	r2, r2, #5
 80072b6:	b292      	uxth	r2, r2
 80072b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80072bc:	b292      	uxth	r2, r2
 80072be:	4413      	add	r3, r2
 80072c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80072c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d201      	bcs.n	80072ce <find_volume+0x30e>
 80072ca:	230d      	movs	r3, #13
 80072cc:	e0f1      	b.n	80074b2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80072ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d6:	8952      	ldrh	r2, [r2, #10]
 80072d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <find_volume+0x328>
 80072e4:	230d      	movs	r3, #13
 80072e6:	e0e4      	b.n	80074b2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80072e8:	2303      	movs	r3, #3
 80072ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d802      	bhi.n	80072fe <find_volume+0x33e>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007304:	4293      	cmp	r3, r2
 8007306:	d802      	bhi.n	800730e <find_volume+0x34e>
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800731a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800731c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800731e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007320:	441a      	add	r2, r3
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	441a      	add	r2, r3
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007334:	2b03      	cmp	r3, #3
 8007336:	d11e      	bne.n	8007376 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	3338      	adds	r3, #56	; 0x38
 800733c:	332a      	adds	r3, #42	; 0x2a
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd ffbe 	bl	80052c0 <ld_word>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <find_volume+0x38e>
 800734a:	230d      	movs	r3, #13
 800734c:	e0b1      	b.n	80074b2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	891b      	ldrh	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <find_volume+0x39a>
 8007356:	230d      	movs	r3, #13
 8007358:	e0ab      	b.n	80074b2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	3338      	adds	r3, #56	; 0x38
 800735e:	332c      	adds	r3, #44	; 0x2c
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd ffc5 	bl	80052f0 <ld_dword>
 8007366:	4602      	mov	r2, r0
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
 8007374:	e01f      	b.n	80073b6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	891b      	ldrh	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <find_volume+0x3c2>
 800737e:	230d      	movs	r3, #13
 8007380:	e097      	b.n	80074b2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	441a      	add	r2, r3
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800738e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007392:	2b02      	cmp	r3, #2
 8007394:	d103      	bne.n	800739e <find_volume+0x3de>
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	e00a      	b.n	80073b4 <find_volume+0x3f4>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	69da      	ldr	r2, [r3, #28]
 80073a2:	4613      	mov	r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4413      	add	r3, r2
 80073a8:	085a      	lsrs	r2, r3, #1
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	6a1a      	ldr	r2, [r3, #32]
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	899b      	ldrh	r3, [r3, #12]
 80073be:	4619      	mov	r1, r3
 80073c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c2:	440b      	add	r3, r1
 80073c4:	3b01      	subs	r3, #1
 80073c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073c8:	8989      	ldrh	r1, [r1, #12]
 80073ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d201      	bcs.n	80073d6 <find_volume+0x416>
 80073d2:	230d      	movs	r3, #13
 80073d4:	e06d      	b.n	80074b2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	619a      	str	r2, [r3, #24]
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	2280      	movs	r2, #128	; 0x80
 80073ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80073ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d149      	bne.n	8007488 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	3338      	adds	r3, #56	; 0x38
 80073f8:	3330      	adds	r3, #48	; 0x30
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd ff60 	bl	80052c0 <ld_word>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d140      	bne.n	8007488 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007408:	3301      	adds	r3, #1
 800740a:	4619      	mov	r1, r3
 800740c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800740e:	f7fe fa07 	bl	8005820 <move_window>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d137      	bne.n	8007488 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2200      	movs	r2, #0
 800741c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	3338      	adds	r3, #56	; 0x38
 8007422:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007426:	4618      	mov	r0, r3
 8007428:	f7fd ff4a 	bl	80052c0 <ld_word>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007434:	429a      	cmp	r2, r3
 8007436:	d127      	bne.n	8007488 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	3338      	adds	r3, #56	; 0x38
 800743c:	4618      	mov	r0, r3
 800743e:	f7fd ff57 	bl	80052f0 <ld_dword>
 8007442:	4603      	mov	r3, r0
 8007444:	4a1d      	ldr	r2, [pc, #116]	; (80074bc <find_volume+0x4fc>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d11e      	bne.n	8007488 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	3338      	adds	r3, #56	; 0x38
 800744e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd ff4c 	bl	80052f0 <ld_dword>
 8007458:	4603      	mov	r3, r0
 800745a:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <find_volume+0x500>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d113      	bne.n	8007488 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	3338      	adds	r3, #56	; 0x38
 8007464:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007468:	4618      	mov	r0, r3
 800746a:	f7fd ff41 	bl	80052f0 <ld_dword>
 800746e:	4602      	mov	r2, r0
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	3338      	adds	r3, #56	; 0x38
 8007478:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800747c:	4618      	mov	r0, r3
 800747e:	f7fd ff37 	bl	80052f0 <ld_dword>
 8007482:	4602      	mov	r2, r0
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800748e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <find_volume+0x504>)
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	3301      	adds	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <find_volume+0x504>)
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <find_volume+0x504>)
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	4a08      	ldr	r2, [pc, #32]	; (80074c8 <find_volume+0x508>)
 80074a8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80074aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ac:	f7fe f950 	bl	8005750 <clear_lock>
#endif
	return FR_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3758      	adds	r7, #88	; 0x58
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	41615252 	.word	0x41615252
 80074c0:	61417272 	.word	0x61417272
 80074c4:	2000046c 	.word	0x2000046c
 80074c8:	20000490 	.word	0x20000490

080074cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80074d6:	2309      	movs	r3, #9
 80074d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01c      	beq.n	800751a <validate+0x4e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d018      	beq.n	800751a <validate+0x4e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d013      	beq.n	800751a <validate+0x4e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	889a      	ldrh	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	88db      	ldrh	r3, [r3, #6]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d10c      	bne.n	800751a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd fe3c 	bl	8005184 <disk_status>
 800750c:	4603      	mov	r3, r0
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <validate+0x4e>
			res = FR_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <validate+0x5a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	e000      	b.n	8007528 <validate+0x5c>
 8007526:	2300      	movs	r3, #0
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	6013      	str	r3, [r2, #0]
	return res;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800754a:	f107 0310 	add.w	r3, r7, #16
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff fc9c 	bl	8006e8c <get_ldnumber>
 8007554:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	2b00      	cmp	r3, #0
 800755a:	da01      	bge.n	8007560 <f_mount+0x28>
 800755c:	230b      	movs	r3, #11
 800755e:	e02b      	b.n	80075b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007560:	4a17      	ldr	r2, [pc, #92]	; (80075c0 <f_mount+0x88>)
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007568:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007570:	69b8      	ldr	r0, [r7, #24]
 8007572:	f7fe f8ed 	bl	8005750 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	490d      	ldr	r1, [pc, #52]	; (80075c0 <f_mount+0x88>)
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <f_mount+0x66>
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d001      	beq.n	80075a2 <f_mount+0x6a>
 800759e:	2300      	movs	r3, #0
 80075a0:	e00a      	b.n	80075b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80075a2:	f107 010c 	add.w	r1, r7, #12
 80075a6:	f107 0308 	add.w	r3, r7, #8
 80075aa:	2200      	movs	r2, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fd07 	bl	8006fc0 <find_volume>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000468 	.word	0x20000468

080075c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b09a      	sub	sp, #104	; 0x68
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <f_open+0x18>
 80075d8:	2309      	movs	r3, #9
 80075da:	e1bb      	b.n	8007954 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80075e4:	79fa      	ldrb	r2, [r7, #7]
 80075e6:	f107 0114 	add.w	r1, r7, #20
 80075ea:	f107 0308 	add.w	r3, r7, #8
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fce6 	bl	8006fc0 <find_volume>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80075fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 819f 	bne.w	8007942 <f_open+0x37e>
		dj.obj.fs = fs;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	f107 0318 	add.w	r3, r7, #24
 800760e:	4611      	mov	r1, r2
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fbc5 	bl	8006da0 <follow_path>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800761c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11a      	bne.n	800765a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007624:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007628:	b25b      	sxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	da03      	bge.n	8007636 <f_open+0x72>
				res = FR_INVALID_NAME;
 800762e:	2306      	movs	r3, #6
 8007630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007634:	e011      	b.n	800765a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	461a      	mov	r2, r3
 8007648:	f107 0318 	add.w	r3, r7, #24
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd ff36 	bl	80054c0 <chk_lock>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	f003 031c 	and.w	r3, r3, #28
 8007660:	2b00      	cmp	r3, #0
 8007662:	d07f      	beq.n	8007764 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007668:	2b00      	cmp	r3, #0
 800766a:	d017      	beq.n	800769c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800766c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007670:	2b04      	cmp	r3, #4
 8007672:	d10e      	bne.n	8007692 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007674:	f7fd ff80 	bl	8005578 <enq_lock>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d006      	beq.n	800768c <f_open+0xc8>
 800767e:	f107 0318 	add.w	r3, r7, #24
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f8dc 	bl	8006840 <dir_register>
 8007688:	4603      	mov	r3, r0
 800768a:	e000      	b.n	800768e <f_open+0xca>
 800768c:	2312      	movs	r3, #18
 800768e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	f043 0308 	orr.w	r3, r3, #8
 8007698:	71fb      	strb	r3, [r7, #7]
 800769a:	e010      	b.n	80076be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800769c:	7fbb      	ldrb	r3, [r7, #30]
 800769e:	f003 0311 	and.w	r3, r3, #17
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <f_open+0xea>
					res = FR_DENIED;
 80076a6:	2307      	movs	r3, #7
 80076a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076ac:	e007      	b.n	80076be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <f_open+0xfa>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80076be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d168      	bne.n	8007798 <f_open+0x1d4>
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d063      	beq.n	8007798 <f_open+0x1d4>
				dw = GET_FATTIME();
 80076d0:	f7fd fcf8 	bl	80050c4 <get_fattime>
 80076d4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	330e      	adds	r3, #14
 80076da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fe45 	bl	800536c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	3316      	adds	r3, #22
 80076e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fd fe3f 	bl	800536c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	330b      	adds	r3, #11
 80076f2:	2220      	movs	r2, #32
 80076f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fe17 	bl	8006330 <ld_clust>
 8007702:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007708:	2200      	movs	r2, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fe2f 	bl	800636e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	331c      	adds	r3, #28
 8007714:	2100      	movs	r1, #0
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd fe28 	bl	800536c <st_dword>
					fs->wflag = 1;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2201      	movs	r2, #1
 8007720:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007724:	2b00      	cmp	r3, #0
 8007726:	d037      	beq.n	8007798 <f_open+0x1d4>
						dw = fs->winsect;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800772e:	f107 0318 	add.w	r3, r7, #24
 8007732:	2200      	movs	r2, #0
 8007734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fb1f 	bl	8005d7a <remove_chain>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007746:	2b00      	cmp	r3, #0
 8007748:	d126      	bne.n	8007798 <f_open+0x1d4>
							res = move_window(fs, dw);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f866 	bl	8005820 <move_window>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800775e:	3a01      	subs	r2, #1
 8007760:	615a      	str	r2, [r3, #20]
 8007762:	e019      	b.n	8007798 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007768:	2b00      	cmp	r3, #0
 800776a:	d115      	bne.n	8007798 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800776c:	7fbb      	ldrb	r3, [r7, #30]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007776:	2304      	movs	r3, #4
 8007778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800777c:	e00c      	b.n	8007798 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <f_open+0x1d4>
 8007788:	7fbb      	ldrb	r3, [r7, #30]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <f_open+0x1d4>
						res = FR_DENIED;
 8007792:	2307      	movs	r3, #7
 8007794:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007798:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800779c:	2b00      	cmp	r3, #0
 800779e:	d128      	bne.n	80077f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80077ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bf14      	ite	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	2300      	moveq	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	f107 0318 	add.w	r3, r7, #24
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd feef 	bl	80055bc <inc_lock>
 80077de:	4602      	mov	r2, r0
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d102      	bne.n	80077f2 <f_open+0x22e>
 80077ec:	2302      	movs	r3, #2
 80077ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80077f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 80a3 	bne.w	8007942 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fd94 	bl	8006330 <ld_clust>
 8007808:	4602      	mov	r2, r0
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	331c      	adds	r3, #28
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd fd6c 	bl	80052f0 <ld_dword>
 8007818:	4602      	mov	r2, r0
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	88da      	ldrh	r2, [r3, #6]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	79fa      	ldrb	r2, [r7, #7]
 8007836:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3330      	adds	r3, #48	; 0x30
 800784e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007852:	2100      	movs	r1, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fdd6 	bl	8005406 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	d06e      	beq.n	8007942 <f_open+0x37e>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d06a      	beq.n	8007942 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	895b      	ldrh	r3, [r3, #10]
 8007878:	461a      	mov	r2, r3
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	899b      	ldrh	r3, [r3, #12]
 800787e:	fb02 f303 	mul.w	r3, r2, r3
 8007882:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007890:	e016      	b.n	80078c0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe f87f 	bl	800599a <get_fat>
 800789c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800789e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d802      	bhi.n	80078aa <f_open+0x2e6>
 80078a4:	2302      	movs	r3, #2
 80078a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80078aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d102      	bne.n	80078b8 <f_open+0x2f4>
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80078b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <f_open+0x30c>
 80078c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d8e0      	bhi.n	8007892 <f_open+0x2ce>
				}
				fp->clust = clst;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80078d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d131      	bne.n	8007942 <f_open+0x37e>
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	899b      	ldrh	r3, [r3, #12]
 80078e2:	461a      	mov	r2, r3
 80078e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80078ea:	fb01 f202 	mul.w	r2, r1, r2
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d026      	beq.n	8007942 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe f82f 	bl	800595c <clust2sect>
 80078fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <f_open+0x34a>
						res = FR_INT_ERR;
 8007906:	2302      	movs	r3, #2
 8007908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800790c:	e019      	b.n	8007942 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	899b      	ldrh	r3, [r3, #12]
 8007912:	461a      	mov	r2, r3
 8007914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007916:	fbb3 f2f2 	udiv	r2, r3, r2
 800791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791c:	441a      	add	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	7858      	ldrb	r0, [r3, #1]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a1a      	ldr	r2, [r3, #32]
 8007930:	2301      	movs	r3, #1
 8007932:	f7fd fc67 	bl	8005204 <disk_read>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <f_open+0x37e>
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <f_open+0x38c>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007954:	4618      	mov	r0, r3
 8007956:	3768      	adds	r7, #104	; 0x68
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08e      	sub	sp, #56	; 0x38
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f107 0214 	add.w	r2, r7, #20
 800797a:	4611      	mov	r1, r2
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff fda5 	bl	80074cc <validate>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <f_read+0x44>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	7d5b      	ldrb	r3, [r3, #21]
 8007994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <f_read+0x4a>
 80079a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079a4:	e135      	b.n	8007c12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7d1b      	ldrb	r3, [r3, #20]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <f_read+0x5a>
 80079b2:	2307      	movs	r3, #7
 80079b4:	e12d      	b.n	8007c12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	f240 811e 	bls.w	8007c08 <f_read+0x2ac>
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80079d0:	e11a      	b.n	8007c08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	8992      	ldrh	r2, [r2, #12]
 80079da:	fbb3 f1f2 	udiv	r1, r3, r2
 80079de:	fb01 f202 	mul.w	r2, r1, r2
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 80d5 	bne.w	8007b94 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	8992      	ldrh	r2, [r2, #12]
 80079f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	8952      	ldrh	r2, [r2, #10]
 80079fa:	3a01      	subs	r2, #1
 80079fc:	4013      	ands	r3, r2
 80079fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d12f      	bne.n	8007a66 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	633b      	str	r3, [r7, #48]	; 0x30
 8007a14:	e013      	b.n	8007a3e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	4619      	mov	r1, r3
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7fe faa5 	bl	8005f74 <clmt_clust>
 8007a2a:	6338      	str	r0, [r7, #48]	; 0x30
 8007a2c:	e007      	b.n	8007a3e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f7fd ffaf 	bl	800599a <get_fat>
 8007a3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d804      	bhi.n	8007a4e <f_read+0xf2>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2202      	movs	r2, #2
 8007a48:	755a      	strb	r2, [r3, #21]
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e0e1      	b.n	8007c12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a54:	d104      	bne.n	8007a60 <f_read+0x104>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	755a      	strb	r2, [r3, #21]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0d8      	b.n	8007c12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f7fd ff74 	bl	800595c <clust2sect>
 8007a74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <f_read+0x12a>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	755a      	strb	r2, [r3, #21]
 8007a82:	2302      	movs	r3, #2
 8007a84:	e0c5      	b.n	8007c12 <f_read+0x2b6>
			sect += csect;
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	899b      	ldrh	r3, [r3, #12]
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d041      	beq.n	8007b26 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	4413      	add	r3, r2
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	8952      	ldrh	r2, [r2, #10]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d905      	bls.n	8007abc <f_read+0x160>
					cc = fs->csize - csect;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	895b      	ldrh	r3, [r3, #10]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	7858      	ldrb	r0, [r3, #1]
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac6:	f7fd fb9d 	bl	8005204 <disk_read>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <f_read+0x17e>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	755a      	strb	r2, [r3, #21]
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e09b      	b.n	8007c12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	7d1b      	ldrb	r3, [r3, #20]
 8007ade:	b25b      	sxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da18      	bge.n	8007b16 <f_read+0x1ba>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a1a      	ldr	r2, [r3, #32]
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d911      	bls.n	8007b16 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a1a      	ldr	r2, [r3, #32]
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	8992      	ldrh	r2, [r2, #12]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b04:	18d0      	adds	r0, r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	899b      	ldrh	r3, [r3, #12]
 8007b10:	461a      	mov	r2, r3
 8007b12:	f7fd fc57 	bl	80053c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	899b      	ldrh	r3, [r3, #12]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	fb02 f303 	mul.w	r3, r2, r3
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007b24:	e05c      	b.n	8007be0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d02e      	beq.n	8007b8e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	7d1b      	ldrb	r3, [r3, #20]
 8007b34:	b25b      	sxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da18      	bge.n	8007b6c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	7858      	ldrb	r0, [r3, #1]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1a      	ldr	r2, [r3, #32]
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f7fd fb7b 	bl	8005244 <disk_write>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <f_read+0x202>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	755a      	strb	r2, [r3, #21]
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e059      	b.n	8007c12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	7d1b      	ldrb	r3, [r3, #20]
 8007b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	7858      	ldrb	r0, [r3, #1]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b76:	2301      	movs	r3, #1
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	f7fd fb43 	bl	8005204 <disk_read>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <f_read+0x232>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	755a      	strb	r2, [r3, #21]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e041      	b.n	8007c12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	899b      	ldrh	r3, [r3, #12]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	8992      	ldrh	r2, [r2, #12]
 8007ba2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ba6:	fb01 f202 	mul.w	r2, r1, r2
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	1ac3      	subs	r3, r0, r3
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d901      	bls.n	8007bbc <f_read+0x260>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	8992      	ldrh	r2, [r2, #12]
 8007bca:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bce:	fb00 f202 	mul.w	r2, r0, r2
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bdc:	f7fd fbf2 	bl	80053c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	4413      	add	r3, r2
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	441a      	add	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	619a      	str	r2, [r3, #24]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	441a      	add	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f47f aee1 	bne.w	80079d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3738      	adds	r7, #56	; 0x38
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f107 0208 	add.w	r2, r7, #8
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fc4e 	bl	80074cc <validate>
 8007c30:	4603      	mov	r3, r0
 8007c32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d168      	bne.n	8007d0c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	7d1b      	ldrb	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d062      	beq.n	8007d0c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7d1b      	ldrb	r3, [r3, #20]
 8007c4a:	b25b      	sxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da15      	bge.n	8007c7c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	7858      	ldrb	r0, [r3, #1]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1a      	ldr	r2, [r3, #32]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f7fd faf0 	bl	8005244 <disk_write>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <f_sync+0x54>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e04f      	b.n	8007d0e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7d1b      	ldrb	r3, [r3, #20]
 8007c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c7c:	f7fd fa22 	bl	80050c4 <get_fattime>
 8007c80:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fd fdc8 	bl	8005820 <move_window>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d138      	bne.n	8007d0c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	330b      	adds	r3, #11
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	330b      	adds	r3, #11
 8007caa:	f042 0220 	orr.w	r2, r2, #32
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	68f9      	ldr	r1, [r7, #12]
 8007cbe:	f7fe fb56 	bl	800636e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f103 021c 	add.w	r2, r3, #28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fd fb4c 	bl	800536c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3316      	adds	r3, #22
 8007cd8:	6939      	ldr	r1, [r7, #16]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd fb46 	bl	800536c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3312      	adds	r3, #18
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fd fb25 	bl	8005336 <st_word>
					fs->wflag = 1;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd fdc1 	bl	800587c <sync_fs>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7d1b      	ldrb	r3, [r3, #20]
 8007d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff7b 	bl	8007c1a <f_sync>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d118      	bne.n	8007d60 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f107 0208 	add.w	r2, r7, #8
 8007d34:	4611      	mov	r1, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fbc8 	bl	80074cc <validate>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fcc4 	bl	80056d8 <dec_lock>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d102      	bne.n	8007d60 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b088      	sub	sp, #32
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007d7e:	e01b      	b.n	8007db8 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	f107 0114 	add.w	r1, r7, #20
 8007d88:	2201      	movs	r2, #1
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff fde6 	bl	800795c <f_read>
		if (rc != 1) break;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d116      	bne.n	8007dc4 <f_gets+0x5a>
		c = s[0];
 8007d96:	7d3b      	ldrb	r3, [r7, #20]
 8007d98:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b0d      	cmp	r3, #13
 8007d9e:	d100      	bne.n	8007da2 <f_gets+0x38>
 8007da0:	e00a      	b.n	8007db8 <f_gets+0x4e>
		*p++ = c;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	61ba      	str	r2, [r7, #24]
 8007da8:	7dfa      	ldrb	r2, [r7, #23]
 8007daa:	701a      	strb	r2, [r3, #0]
		n++;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	3301      	adds	r3, #1
 8007db0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b0a      	cmp	r3, #10
 8007db6:	d007      	beq.n	8007dc8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	dbde      	blt.n	8007d80 <f_gets+0x16>
 8007dc2:	e002      	b.n	8007dca <f_gets+0x60>
		if (rc != 1) break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007dc8:	bf00      	nop
	}
	*p = 0;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <f_gets+0x70>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	e000      	b.n	8007ddc <f_gets+0x72>
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007dfa:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007dfc:	7a5b      	ldrb	r3, [r3, #9]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d131      	bne.n	8007e68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e04:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e06:	7a5b      	ldrb	r3, [r3, #9]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e0e:	2100      	movs	r1, #0
 8007e10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e12:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e14:	7a5b      	ldrb	r3, [r3, #9]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e24:	7a5b      	ldrb	r3, [r3, #9]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	79fa      	ldrb	r2, [r7, #7]
 8007e30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e32:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e34:	7a5b      	ldrb	r3, [r3, #9]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	b2d1      	uxtb	r1, r2
 8007e3c:	4a0e      	ldr	r2, [pc, #56]	; (8007e78 <FATFS_LinkDriverEx+0x94>)
 8007e3e:	7251      	strb	r1, [r2, #9]
 8007e40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e42:	7dbb      	ldrb	r3, [r7, #22]
 8007e44:	3330      	adds	r3, #48	; 0x30
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	223a      	movs	r2, #58	; 0x3a
 8007e52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3302      	adds	r3, #2
 8007e58:	222f      	movs	r2, #47	; 0x2f
 8007e5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3303      	adds	r3, #3
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000690 	.word	0x20000690

08007e7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e86:	2200      	movs	r2, #0
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ffaa 	bl	8007de4 <FATFS_LinkDriverEx>
 8007e90:	4603      	mov	r3, r0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8007eac:	d802      	bhi.n	8007eb4 <ff_convert+0x18>
		c = chr;
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	81fb      	strh	r3, [r7, #14]
 8007eb2:	e025      	b.n	8007f00 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	2bff      	cmp	r3, #255	; 0xff
 8007ebe:	d805      	bhi.n	8007ecc <ff_convert+0x30>
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	3b80      	subs	r3, #128	; 0x80
 8007ec4:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <ff_convert+0x74>)
 8007ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eca:	e000      	b.n	8007ece <ff_convert+0x32>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	81fb      	strh	r3, [r7, #14]
 8007ed0:	e016      	b.n	8007f00 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	81fb      	strh	r3, [r7, #14]
 8007ed6:	e009      	b.n	8007eec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	4a0d      	ldr	r2, [pc, #52]	; (8007f10 <ff_convert+0x74>)
 8007edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee0:	88fa      	ldrh	r2, [r7, #6]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d006      	beq.n	8007ef4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007ee6:	89fb      	ldrh	r3, [r7, #14]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	81fb      	strh	r3, [r7, #14]
 8007eec:	89fb      	ldrh	r3, [r7, #14]
 8007eee:	2b7f      	cmp	r3, #127	; 0x7f
 8007ef0:	d9f2      	bls.n	8007ed8 <ff_convert+0x3c>
 8007ef2:	e000      	b.n	8007ef6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007ef4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007ef6:	89fb      	ldrh	r3, [r7, #14]
 8007ef8:	3380      	adds	r3, #128	; 0x80
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007f00:	89fb      	ldrh	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	08008f80 	.word	0x08008f80

08007f14 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f24:	d201      	bcs.n	8007f2a <ff_wtoupper+0x16>
 8007f26:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <ff_wtoupper+0x10c>)
 8007f28:	e000      	b.n	8007f2c <ff_wtoupper+0x18>
 8007f2a:	4b3e      	ldr	r3, [pc, #248]	; (8008024 <ff_wtoupper+0x110>)
 8007f2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	1c9a      	adds	r2, r3, #2
 8007f32:	617a      	str	r2, [r7, #20]
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007f38:	8a7b      	ldrh	r3, [r7, #18]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d068      	beq.n	8008010 <ff_wtoupper+0xfc>
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	8a7b      	ldrh	r3, [r7, #18]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d364      	bcc.n	8008010 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	1c9a      	adds	r2, r3, #2
 8007f4a:	617a      	str	r2, [r7, #20]
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	823b      	strh	r3, [r7, #16]
 8007f50:	8a3b      	ldrh	r3, [r7, #16]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	81fb      	strh	r3, [r7, #14]
 8007f56:	8a3b      	ldrh	r3, [r7, #16]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007f5c:	88fa      	ldrh	r2, [r7, #6]
 8007f5e:	8a79      	ldrh	r1, [r7, #18]
 8007f60:	8a3b      	ldrh	r3, [r7, #16]
 8007f62:	440b      	add	r3, r1
 8007f64:	429a      	cmp	r2, r3
 8007f66:	da49      	bge.n	8007ffc <ff_wtoupper+0xe8>
			switch (cmd) {
 8007f68:	89fb      	ldrh	r3, [r7, #14]
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d84f      	bhi.n	800800e <ff_wtoupper+0xfa>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <ff_wtoupper+0x60>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fab 	.word	0x08007fab
 8007f7c:	08007fc1 	.word	0x08007fc1
 8007f80:	08007fc9 	.word	0x08007fc9
 8007f84:	08007fd1 	.word	0x08007fd1
 8007f88:	08007fd9 	.word	0x08007fd9
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007ff1 	.word	0x08007ff1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007f98:	88fa      	ldrh	r2, [r7, #6]
 8007f9a:	8a7b      	ldrh	r3, [r7, #18]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	80fb      	strh	r3, [r7, #6]
 8007fa8:	e027      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	8a7b      	ldrh	r3, [r7, #18]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	80fb      	strh	r3, [r7, #6]
 8007fbe:	e01c      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	3b10      	subs	r3, #16
 8007fc4:	80fb      	strh	r3, [r7, #6]
 8007fc6:	e018      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	3b20      	subs	r3, #32
 8007fcc:	80fb      	strh	r3, [r7, #6]
 8007fce:	e014      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	3b30      	subs	r3, #48	; 0x30
 8007fd4:	80fb      	strh	r3, [r7, #6]
 8007fd6:	e010      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	3b1a      	subs	r3, #26
 8007fdc:	80fb      	strh	r3, [r7, #6]
 8007fde:	e00c      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007fe0:	88fb      	ldrh	r3, [r7, #6]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	80fb      	strh	r3, [r7, #6]
 8007fe6:	e008      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	3b50      	subs	r3, #80	; 0x50
 8007fec:	80fb      	strh	r3, [r7, #6]
 8007fee:	e004      	b.n	8007ffa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007ff6:	80fb      	strh	r3, [r7, #6]
 8007ff8:	bf00      	nop
			}
			break;
 8007ffa:	e008      	b.n	800800e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007ffc:	89fb      	ldrh	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d195      	bne.n	8007f2e <ff_wtoupper+0x1a>
 8008002:	8a3b      	ldrh	r3, [r7, #16]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4413      	add	r3, r2
 800800a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800800c:	e78f      	b.n	8007f2e <ff_wtoupper+0x1a>
			break;
 800800e:	bf00      	nop
	}

	return chr;
 8008010:	88fb      	ldrh	r3, [r7, #6]
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	08009080 	.word	0x08009080
 8008024:	08009274 	.word	0x08009274

08008028 <__libc_init_array>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4d0d      	ldr	r5, [pc, #52]	; (8008060 <__libc_init_array+0x38>)
 800802c:	4c0d      	ldr	r4, [pc, #52]	; (8008064 <__libc_init_array+0x3c>)
 800802e:	1b64      	subs	r4, r4, r5
 8008030:	10a4      	asrs	r4, r4, #2
 8008032:	2600      	movs	r6, #0
 8008034:	42a6      	cmp	r6, r4
 8008036:	d109      	bne.n	800804c <__libc_init_array+0x24>
 8008038:	4d0b      	ldr	r5, [pc, #44]	; (8008068 <__libc_init_array+0x40>)
 800803a:	4c0c      	ldr	r4, [pc, #48]	; (800806c <__libc_init_array+0x44>)
 800803c:	f000 f830 	bl	80080a0 <_init>
 8008040:	1b64      	subs	r4, r4, r5
 8008042:	10a4      	asrs	r4, r4, #2
 8008044:	2600      	movs	r6, #0
 8008046:	42a6      	cmp	r6, r4
 8008048:	d105      	bne.n	8008056 <__libc_init_array+0x2e>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008050:	4798      	blx	r3
 8008052:	3601      	adds	r6, #1
 8008054:	e7ee      	b.n	8008034 <__libc_init_array+0xc>
 8008056:	f855 3b04 	ldr.w	r3, [r5], #4
 800805a:	4798      	blx	r3
 800805c:	3601      	adds	r6, #1
 800805e:	e7f2      	b.n	8008046 <__libc_init_array+0x1e>
 8008060:	08009338 	.word	0x08009338
 8008064:	08009338 	.word	0x08009338
 8008068:	08009338 	.word	0x08009338
 800806c:	0800933c 	.word	0x0800933c

08008070 <memset>:
 8008070:	4402      	add	r2, r0
 8008072:	4603      	mov	r3, r0
 8008074:	4293      	cmp	r3, r2
 8008076:	d100      	bne.n	800807a <memset+0xa>
 8008078:	4770      	bx	lr
 800807a:	f803 1b01 	strb.w	r1, [r3], #1
 800807e:	e7f9      	b.n	8008074 <memset+0x4>

08008080 <strcat>:
 8008080:	b510      	push	{r4, lr}
 8008082:	4602      	mov	r2, r0
 8008084:	7814      	ldrb	r4, [r2, #0]
 8008086:	4613      	mov	r3, r2
 8008088:	3201      	adds	r2, #1
 800808a:	2c00      	cmp	r4, #0
 800808c:	d1fa      	bne.n	8008084 <strcat+0x4>
 800808e:	3b01      	subs	r3, #1
 8008090:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008094:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008098:	2a00      	cmp	r2, #0
 800809a:	d1f9      	bne.n	8008090 <strcat+0x10>
 800809c:	bd10      	pop	{r4, pc}
	...

080080a0 <_init>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	bf00      	nop
 80080a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a6:	bc08      	pop	{r3}
 80080a8:	469e      	mov	lr, r3
 80080aa:	4770      	bx	lr

080080ac <_fini>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	bf00      	nop
 80080b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b2:	bc08      	pop	{r3}
 80080b4:	469e      	mov	lr, r3
 80080b6:	4770      	bx	lr
